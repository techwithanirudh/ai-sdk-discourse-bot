// This file is auto-generated by @hey-api/openapi-ts

export type GetBackupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/backups.json';
};

export type GetBackupsResponses = {
    /**
     * success response
     */
    200: Array<{
        filename: string;
        size: number;
        last_modified: string;
    }>;
};

export type GetBackupsResponse = GetBackupsResponses[keyof GetBackupsResponses];

export type CreateBackupData = {
    body?: {
        with_uploads: boolean;
    };
    path?: never;
    query?: never;
    url: '/admin/backups.json';
};

export type CreateBackupResponses = {
    /**
     * success response
     */
    200: {
        success: string;
    };
};

export type CreateBackupResponse = CreateBackupResponses[keyof CreateBackupResponses];

export type DownloadBackupData = {
    body?: never;
    path: {
        filename: string;
    };
    query: {
        token: string;
    };
    url: '/admin/backups/{filename}';
};

export type DownloadBackupResponses = {
    /**
     * success response
     */
    200: unknown;
};

export type SendDownloadBackupEmailData = {
    body?: never;
    path: {
        filename: string;
    };
    query?: never;
    url: '/admin/backups/{filename}';
};

export type SendDownloadBackupEmailResponses = {
    /**
     * success response
     */
    200: unknown;
};

export type AdminListBadgesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/badges.json';
};

export type AdminListBadgesResponses = {
    /**
     * success response
     */
    200: {
        badges: Array<{
            id: number;
            name: string;
            description: string;
            grant_count: number;
            allow_title: boolean;
            multiple_grant: boolean;
            icon: string;
            image_url: string | null;
            listable: boolean;
            enabled: boolean;
            badge_grouping_id: number;
            system: boolean;
            long_description: string;
            slug: string;
            manually_grantable: boolean;
            query: string | null;
            trigger: number | null;
            target_posts: boolean;
            auto_revoke: boolean;
            show_posts: boolean;
            i18n_name?: string | null;
            image_upload_id: number | null;
            badge_type_id: number;
            show_in_post_header: boolean;
        }>;
        badge_types: Array<{
            id: number;
            name: string;
            sort_order: number;
        }>;
        badge_groupings: Array<{
            id: number;
            name: string;
            description: string | null;
            position: number;
            system: boolean;
        }>;
        admin_badges: {
            protected_system_fields: Array<unknown>;
            triggers: {
                user_change: number;
                none: number;
                post_revision: number;
                trust_level_change: number;
                post_action: number;
            };
            badge_ids: Array<unknown>;
            badge_grouping_ids: Array<unknown>;
            badge_type_ids: Array<unknown>;
        };
    };
};

export type AdminListBadgesResponse = AdminListBadgesResponses[keyof AdminListBadgesResponses];

export type CreateBadgeData = {
    body?: {
        /**
         * The name for the new badge.
         */
        name: string;
        /**
         * The ID for the badge type. 1 for Gold, 2 for Silver,
         * 3 for Bronze.
         */
        badge_type_id: number;
    };
    path?: never;
    query?: never;
    url: '/admin/badges.json';
};

export type CreateBadgeResponses = {
    /**
     * success response
     */
    200: {
        badge_types: Array<{
            id: number;
            name: string;
            sort_order: number;
        }>;
        badge: {
            id: number;
            name: string;
            description: string;
            grant_count: number;
            allow_title: boolean;
            multiple_grant: boolean;
            icon: string;
            image_url: string | null;
            image_upload_id: number | null;
            listable: boolean;
            enabled: boolean;
            badge_grouping_id: number;
            system: boolean;
            long_description: string;
            slug: string;
            manually_grantable: boolean;
            query: string | null;
            trigger: string | null;
            target_posts: boolean;
            auto_revoke: boolean;
            show_posts: boolean;
            badge_type_id: number;
            show_in_post_header: boolean;
        };
    };
};

export type CreateBadgeResponse = CreateBadgeResponses[keyof CreateBadgeResponses];

export type DeleteBadgeData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/badges/{id}.json';
};

export type DeleteBadgeResponses = {
    /**
     * success response
     */
    200: unknown;
};

export type UpdateBadgeData = {
    body?: {
        /**
         * The name for the new badge.
         */
        name: string;
        /**
         * The ID for the badge type. 1 for Gold, 2 for Silver,
         * 3 for Bronze.
         */
        badge_type_id: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/badges/{id}.json';
};

export type UpdateBadgeResponses = {
    /**
     * success response
     */
    200: {
        badge_types: Array<{
            id: number;
            name: string;
            sort_order: number;
        }>;
        badge: {
            id: number;
            name: string;
            description: string;
            grant_count: number;
            allow_title: boolean;
            multiple_grant: boolean;
            icon: string;
            image_url: string | null;
            image_upload_id: number | null;
            listable: boolean;
            enabled: boolean;
            badge_grouping_id: number;
            system: boolean;
            long_description: string;
            slug: string;
            manually_grantable: boolean;
            query: string | null;
            trigger: string | null;
            target_posts: boolean;
            auto_revoke: boolean;
            show_posts: boolean;
            badge_type_id: number;
            show_in_post_header: boolean;
        };
    };
};

export type UpdateBadgeResponse = UpdateBadgeResponses[keyof UpdateBadgeResponses];

export type ListCategoriesData = {
    body?: never;
    path?: never;
    query?: {
        include_subcategories?: true;
    };
    url: '/categories.json';
};

export type ListCategoriesResponses = {
    /**
     * success response
     */
    200: {
        category_list: {
            can_create_category: boolean;
            can_create_topic: boolean;
            categories: Array<{
                id: number;
                name: string;
                color: string;
                text_color: string;
                slug: string;
                topic_count: number;
                post_count: number;
                position: number;
                description: string | null;
                description_text: string | null;
                description_excerpt: string | null;
                topic_url: string | null;
                read_restricted: boolean;
                permission: number;
                notification_level: number;
                can_edit: boolean;
                topic_template: string | null;
                has_children: boolean;
                subcategory_count: number | null;
                sort_order: string | null;
                sort_ascending: string | null;
                show_subcategory_list: boolean;
                num_featured_topics: number;
                default_view: string | null;
                subcategory_list_style: string;
                default_top_period: string;
                default_list_filter: string;
                minimum_required_tags: number;
                navigate_to_first_post_after_read: boolean;
                topics_day: number;
                topics_week: number;
                topics_month: number;
                topics_year: number;
                topics_all_time: number;
                is_uncategorized?: boolean;
                subcategory_ids: Array<unknown>;
                subcategory_list?: Array<unknown> | null;
                uploaded_logo: string | null;
                uploaded_logo_dark: string | null;
                uploaded_background: string | null;
                uploaded_background_dark: string | null;
            }>;
        };
    };
};

export type ListCategoriesResponse = ListCategoriesResponses[keyof ListCategoriesResponses];

export type CreateCategoryData = {
    body?: {
        name: string;
        color?: string;
        text_color?: string;
        parent_category_id?: number;
        allow_badges?: boolean;
        slug?: string;
        topic_featured_links_allowed?: boolean;
        permissions?: {
            everyone?: number;
            staff?: number;
            [key: string]: unknown | number | undefined;
        };
        search_priority?: number;
        form_template_ids?: Array<unknown>;
    };
    path?: never;
    query?: never;
    url: '/categories.json';
};

export type CreateCategoryResponses = {
    /**
     * success response
     */
    200: {
        category: {
            id: number;
            name: string;
            color: string;
            text_color: string;
            slug: string;
            topic_count: number;
            post_count: number;
            position: number;
            description: string | null;
            description_text: string | null;
            description_excerpt: string | null;
            topic_url: string | null;
            read_restricted: boolean;
            permission: number | null;
            notification_level: number;
            can_edit: boolean;
            topic_template: string | null;
            form_template_ids?: Array<unknown>;
            has_children: boolean | null;
            subcategory_count: number | null;
            sort_order: string | null;
            sort_ascending: string | null;
            show_subcategory_list: boolean;
            num_featured_topics: number;
            default_view: string | null;
            subcategory_list_style: string;
            default_top_period: string;
            default_list_filter: string;
            minimum_required_tags: number;
            navigate_to_first_post_after_read: boolean;
            custom_fields: {
                [key: string]: never;
            };
            allowed_tags?: Array<unknown>;
            allowed_tag_groups?: Array<unknown>;
            allow_global_tags?: boolean;
            required_tag_groups: Array<{
                name: string;
                min_count: number;
            }>;
            category_setting?: unknown;
            read_only_banner: string | null;
            available_groups: Array<unknown>;
            auto_close_hours: string | null;
            auto_close_based_on_last_post: boolean;
            allow_unlimited_owner_edits_on_first_post: boolean;
            default_slow_mode_seconds: string | null;
            group_permissions: Array<{
                permission_type: number;
                group_name: string;
            }>;
            email_in: string | null;
            email_in_allow_strangers: boolean;
            mailinglist_mirror: boolean;
            all_topics_wiki: boolean;
            can_delete: boolean;
            allow_badges: boolean;
            topic_featured_link_allowed: boolean;
            search_priority: number;
            uploaded_logo: string | null;
            uploaded_logo_dark: string | null;
            uploaded_background: string | null;
            uploaded_background_dark: string | null;
        };
    };
};

export type CreateCategoryResponse = CreateCategoryResponses[keyof CreateCategoryResponses];

export type UpdateCategoryData = {
    body?: {
        name: string;
        color?: string;
        text_color?: string;
        parent_category_id?: number;
        allow_badges?: boolean;
        slug?: string;
        topic_featured_links_allowed?: boolean;
        permissions?: {
            everyone?: number;
            staff?: number;
            [key: string]: unknown | number | undefined;
        };
        search_priority?: number;
        form_template_ids?: Array<unknown>;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/categories/{id}.json';
};

export type UpdateCategoryResponses = {
    /**
     * success response
     */
    200: {
        success: string;
        category: {
            id: number;
            name: string;
            color: string;
            text_color: string;
            slug: string;
            topic_count: number;
            post_count: number;
            position: number;
            description: string | null;
            description_text: string | null;
            description_excerpt: string | null;
            topic_url: string | null;
            read_restricted: boolean;
            permission: number | null;
            notification_level: number;
            can_edit: boolean;
            topic_template: string | null;
            form_template_ids: Array<unknown>;
            has_children: boolean | null;
            subcategory_count: number | null;
            sort_order: string | null;
            sort_ascending: string | null;
            show_subcategory_list: boolean;
            num_featured_topics: number;
            default_view: string | null;
            subcategory_list_style: string;
            default_top_period: string;
            default_list_filter: string;
            minimum_required_tags: number;
            navigate_to_first_post_after_read: boolean;
            custom_fields: {
                [key: string]: never;
            };
            allowed_tags?: Array<unknown>;
            allowed_tag_groups?: Array<unknown>;
            allow_global_tags?: boolean;
            required_tag_groups: Array<{
                name: string;
                min_count: number;
            }>;
            category_setting?: unknown;
            read_only_banner: string | null;
            available_groups: Array<unknown>;
            auto_close_hours: string | null;
            auto_close_based_on_last_post: boolean;
            allow_unlimited_owner_edits_on_first_post: boolean;
            default_slow_mode_seconds: string | null;
            group_permissions: Array<{
                permission_type: number;
                group_name: string;
            }>;
            email_in: string | null;
            email_in_allow_strangers: boolean;
            mailinglist_mirror: boolean;
            all_topics_wiki: boolean;
            can_delete: boolean;
            allow_badges: boolean;
            topic_featured_link_allowed: boolean;
            search_priority: number;
            uploaded_logo: string | null;
            uploaded_logo_dark: string | null;
            uploaded_background: string | null;
            uploaded_background_dark: string | null;
        };
    };
};

export type UpdateCategoryResponse = UpdateCategoryResponses[keyof UpdateCategoryResponses];

export type ListCategoryTopicsData = {
    body?: never;
    path: {
        slug: string;
        id: number;
    };
    query?: never;
    url: '/c/{slug}/{id}.json';
};

export type ListCategoryTopicsResponses = {
    /**
     * success response
     */
    200: {
        users?: Array<{
            id: number;
            username: string;
            name: string;
            avatar_template: string;
        }>;
        primary_groups?: Array<unknown>;
        topic_list: {
            can_create_topic: boolean;
            per_page: number;
            top_tags?: Array<unknown>;
            topics: Array<{
                id: number;
                title: string;
                fancy_title: string;
                slug: string;
                posts_count: number;
                reply_count: number;
                highest_post_number: number;
                image_url: string | null;
                created_at: string;
                last_posted_at: string;
                bumped: boolean;
                bumped_at: string;
                archetype: string;
                unseen: boolean;
                pinned: boolean;
                unpinned: string | null;
                excerpt: string;
                visible: boolean;
                closed: boolean;
                archived: boolean;
                bookmarked: string | null;
                liked: string | null;
                views: number;
                like_count: number;
                has_summary: boolean;
                last_poster_username: string;
                category_id: number;
                pinned_globally: boolean;
                featured_link: string | null;
                posters: Array<{
                    extras: string;
                    description: string;
                    user_id: number;
                    primary_group_id: number | null;
                }>;
            }>;
        };
    };
};

export type ListCategoryTopicsResponse = ListCategoryTopicsResponses[keyof ListCategoryTopicsResponses];

export type GetCategoryData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/c/{id}/show.json';
};

export type GetCategoryResponses = {
    /**
     * response
     */
    200: {
        category: {
            id: number;
            name: string;
            color: string;
            text_color: string;
            slug: string;
            topic_count: number;
            post_count: number;
            position: number;
            description: string | null;
            description_text: string | null;
            description_excerpt: string | null;
            topic_url: string | null;
            read_restricted: boolean;
            permission: number | null;
            notification_level: number;
            can_edit: boolean;
            topic_template: string | null;
            form_template_ids?: Array<unknown>;
            has_children: boolean | null;
            subcategory_count: number | null;
            sort_order: string | null;
            sort_ascending: string | null;
            show_subcategory_list: boolean;
            num_featured_topics: number;
            default_view: string | null;
            subcategory_list_style: string;
            default_top_period: string;
            default_list_filter: string;
            minimum_required_tags: number;
            navigate_to_first_post_after_read: boolean;
            custom_fields: {
                [key: string]: never;
            };
            allowed_tags?: Array<unknown>;
            allowed_tag_groups?: Array<unknown>;
            allow_global_tags?: boolean;
            required_tag_groups: Array<{
                name: string;
                min_count: number;
            }>;
            category_setting?: unknown;
            read_only_banner: string | null;
            available_groups: Array<unknown>;
            auto_close_hours: string | null;
            auto_close_based_on_last_post: boolean;
            allow_unlimited_owner_edits_on_first_post: boolean;
            default_slow_mode_seconds: string | null;
            group_permissions: Array<{
                permission_type: number;
                group_name: string;
            }>;
            email_in: string | null;
            email_in_allow_strangers: boolean;
            mailinglist_mirror: boolean;
            all_topics_wiki: boolean;
            can_delete: boolean;
            allow_badges: boolean;
            topic_featured_link_allowed: boolean;
            search_priority: number;
            uploaded_logo: string | null;
            uploaded_logo_dark: string | null;
            uploaded_background: string | null;
            uploaded_background_dark: string | null;
        };
    };
};

export type GetCategoryResponse = GetCategoryResponses[keyof GetCategoryResponses];

export type CreateGroupData = {
    body?: {
        group: {
            name: string;
            full_name?: string;
            /**
             * About Group
             */
            bio_raw?: string;
            /**
             * comma,separated
             */
            usernames?: string;
            /**
             * comma,separated
             */
            owner_usernames?: string;
            /**
             * pipe|separated
             */
            automatic_membership_email_domains?: string;
            visibility_level?: number;
            primary_group?: boolean;
            flair_icon?: string;
            flair_upload_id?: number;
            flair_bg_color?: string;
            public_admission?: boolean;
            public_exit?: boolean;
            default_notification_level?: number;
            muted_category_ids?: Array<number>;
            regular_category_ids?: Array<number>;
            watching_category_ids?: Array<number>;
            tracking_category_ids?: Array<number>;
            watching_first_post_category_ids?: Array<number>;
        };
    };
    path?: never;
    query?: never;
    url: '/admin/groups.json';
};

export type CreateGroupResponses = {
    /**
     * group created
     */
    200: {
        basic_group: {
            id: number;
            automatic: boolean;
            name: string;
            user_count: number;
            mentionable_level: number;
            messageable_level: number;
            visibility_level: number;
            primary_group: boolean;
            title: string | null;
            grant_trust_level: string | null;
            incoming_email: string | null;
            has_messages: boolean;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            bio_raw: string | null;
            bio_cooked: string | null;
            bio_excerpt: string | null;
            public_admission: boolean;
            public_exit: boolean;
            allow_membership_requests: boolean;
            full_name: string | null;
            default_notification_level: number;
            membership_request_template: string | null;
            members_visibility_level: number;
            can_see_members: boolean;
            can_admin_group: boolean;
            can_edit_group?: boolean;
            publish_read_state: boolean;
        };
    };
};

export type CreateGroupResponse = CreateGroupResponses[keyof CreateGroupResponses];

export type DeleteGroupData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/groups/{id}.json';
};

export type DeleteGroupResponses = {
    /**
     * response
     */
    200: {
        success: string;
    };
};

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses];

export type GetGroupData = {
    body?: never;
    path: {
        /**
         * Use group name instead of id
         */
        id: string;
    };
    query?: never;
    url: '/groups/{id}.json';
};

export type GetGroupResponses = {
    /**
     * success response
     */
    200: {
        group: {
            id: number;
            automatic: boolean;
            name: string;
            user_count: number;
            mentionable_level: number;
            messageable_level: number;
            visibility_level: number;
            primary_group: boolean;
            title: string | null;
            grant_trust_level: string | null;
            incoming_email: string | null;
            has_messages: boolean;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            bio_raw: string | null;
            bio_cooked: string | null;
            bio_excerpt: string | null;
            public_admission: boolean;
            public_exit: boolean;
            allow_membership_requests: boolean;
            full_name: string | null;
            default_notification_level: number;
            membership_request_template: string | null;
            is_group_user: boolean;
            members_visibility_level: number;
            can_see_members: boolean;
            can_admin_group: boolean;
            can_edit_group?: boolean;
            publish_read_state: boolean;
            is_group_owner_display: boolean;
            mentionable: boolean;
            messageable: boolean;
            automatic_membership_email_domains: string | null;
            smtp_updated_at?: string | null;
            smtp_updated_by?: {
                [key: string]: unknown;
            } | null;
            smtp_enabled?: boolean;
            smtp_server: string | null;
            smtp_port: string | null;
            smtp_ssl_mode: number | null;
            imap_enabled?: boolean;
            imap_updated_at?: string | null;
            imap_updated_by?: {
                [key: string]: unknown;
            } | null;
            imap_server: string | null;
            imap_port: string | null;
            imap_ssl: string | null;
            imap_mailbox_name: string;
            imap_mailboxes: Array<unknown>;
            email_username: string | null;
            email_from_alias?: string | null;
            email_password: string | null;
            imap_last_error: string | null;
            imap_old_emails: string | null;
            imap_new_emails: string | null;
            message_count: number;
            allow_unknown_sender_topic_replies: boolean;
            associated_group_ids?: Array<unknown>;
            watching_category_ids: Array<unknown>;
            tracking_category_ids: Array<unknown>;
            watching_first_post_category_ids: Array<unknown>;
            regular_category_ids: Array<unknown>;
            muted_category_ids: Array<unknown>;
            watching_tags?: Array<unknown>;
            watching_first_post_tags?: Array<unknown>;
            tracking_tags?: Array<unknown>;
            regular_tags?: Array<unknown>;
            muted_tags?: Array<unknown>;
        };
        extras: {
            visible_group_names: Array<unknown>;
        };
    };
};

export type GetGroupResponse = GetGroupResponses[keyof GetGroupResponses];

export type UpdateGroupData = {
    body?: {
        group: {
            name: string;
            full_name?: string;
            /**
             * About Group
             */
            bio_raw?: string;
            /**
             * comma,separated
             */
            usernames?: string;
            /**
             * comma,separated
             */
            owner_usernames?: string;
            /**
             * pipe|separated
             */
            automatic_membership_email_domains?: string;
            visibility_level?: number;
            primary_group?: boolean;
            flair_icon?: string;
            flair_upload_id?: number;
            flair_bg_color?: string;
            public_admission?: boolean;
            public_exit?: boolean;
            default_notification_level?: number;
            muted_category_ids?: Array<number>;
            regular_category_ids?: Array<number>;
            watching_category_ids?: Array<number>;
            tracking_category_ids?: Array<number>;
            watching_first_post_category_ids?: Array<number>;
        };
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/groups/{id}.json';
};

export type UpdateGroupResponses = {
    /**
     * success response
     */
    200: {
        success?: string;
    };
};

export type UpdateGroupResponse = UpdateGroupResponses[keyof UpdateGroupResponses];

export type RemoveGroupMembersData = {
    body?: {
        /**
         * comma separated list
         */
        usernames?: string;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/groups/{id}/members.json';
};

export type RemoveGroupMembersResponses = {
    /**
     * success response
     */
    200: {
        success: string;
        usernames: Array<unknown>;
        skipped_usernames: Array<unknown>;
    };
};

export type RemoveGroupMembersResponse = RemoveGroupMembersResponses[keyof RemoveGroupMembersResponses];

export type ListGroupMembersData = {
    body?: never;
    path: {
        /**
         * Use group name instead of id
         */
        id: string;
    };
    query?: never;
    url: '/groups/{id}/members.json';
};

export type ListGroupMembersResponses = {
    /**
     * success response
     */
    200: {
        members: Array<{
            id: number;
            username: string;
            name: string | null;
            avatar_template: string;
            title: string | null;
            last_posted_at: string;
            last_seen_at: string;
            added_at: string;
            timezone: string;
        }>;
        owners: Array<{
            id: number;
            username: string;
            name: string | null;
            avatar_template: string;
            title: string | null;
            last_posted_at: string;
            last_seen_at: string;
            added_at: string;
            timezone: string;
        }>;
        meta: {
            total: number;
            limit: number;
            offset: number;
        };
    };
};

export type ListGroupMembersResponse = ListGroupMembersResponses[keyof ListGroupMembersResponses];

export type AddGroupMembersData = {
    body?: {
        /**
         * comma separated list
         */
        usernames?: string;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/groups/{id}/members.json';
};

export type AddGroupMembersResponses = {
    /**
     * success response
     */
    200: {
        success: string;
        usernames: Array<unknown>;
        emails: Array<unknown>;
    };
};

export type AddGroupMembersResponse = AddGroupMembersResponses[keyof AddGroupMembersResponses];

export type ListGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/groups.json';
};

export type ListGroupsResponses = {
    /**
     * response
     */
    200: {
        groups: Array<{
            id: number;
            automatic: boolean;
            name: string;
            display_name: string;
            user_count: number;
            mentionable_level: number;
            messageable_level: number;
            visibility_level: number;
            primary_group: boolean;
            title: string | null;
            grant_trust_level: string | null;
            incoming_email: string | null;
            has_messages: boolean;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            bio_raw: string | null;
            bio_cooked: string | null;
            bio_excerpt: string | null;
            public_admission: boolean;
            public_exit: boolean;
            allow_membership_requests: boolean;
            full_name: string | null;
            default_notification_level: number;
            membership_request_template: string | null;
            is_group_user?: boolean;
            is_group_owner?: boolean;
            members_visibility_level: number;
            can_see_members: boolean;
            can_admin_group: boolean;
            can_edit_group?: boolean;
            publish_read_state: boolean;
        }>;
        extras: {
            type_filters: Array<unknown>;
        };
        total_rows_groups: number;
        load_more_groups: string;
    };
};

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses];

export type CreateInviteData = {
    body?: {
        /**
         * required for email invites only
         */
        email?: string;
        skip_email?: boolean;
        /**
         * optional, for email invites
         */
        custom_message?: string;
        /**
         * optional, for link invites
         */
        max_redemptions_allowed?: number;
        topic_id?: number;
        /**
         * Optional, either this or `group_names`. Comma separated
         * list for multiple ids.
         */
        group_ids?: string;
        /**
         * Optional, either this or `group_ids`. Comma separated
         * list for multiple names.
         */
        group_names?: string;
        /**
         * optional, if not supplied, the invite_expiry_days site
         * setting is used
         */
        expires_at?: string;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path?: never;
    query?: never;
    url: '/invites.json';
};

export type CreateInviteResponses = {
    /**
     * success response
     */
    200: {
        id?: number;
        link?: string;
        email?: string;
        emailed?: boolean;
        custom_message?: string | null;
        topics?: Array<unknown>;
        groups?: Array<unknown>;
        created_at?: string;
        updated_at?: string;
        expires_at?: string;
        expired?: boolean;
    };
};

export type CreateInviteResponse = CreateInviteResponses[keyof CreateInviteResponses];

export type CreateMultipleInvitesData = {
    body?: {
        /**
         * pass 1 email per invite to be generated. other properties
         * will be shared by each invite.
         */
        email?: string;
        skip_email?: boolean;
        /**
         * optional, for email invites
         */
        custom_message?: string;
        /**
         * optional, for link invites
         */
        max_redemptions_allowed?: number;
        topic_id?: number;
        /**
         * Optional, either this or `group_names`. Comma separated
         * list for multiple ids.
         */
        group_ids?: string;
        /**
         * Optional, either this or `group_ids`. Comma separated
         * list for multiple names.
         */
        group_names?: string;
        /**
         * optional, if not supplied, the invite_expiry_days site
         * setting is used
         */
        expires_at?: string;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path?: never;
    query?: never;
    url: '/invites/create-multiple.json';
};

export type CreateMultipleInvitesResponses = {
    /**
     * success response
     */
    200: {
        num_successfully_created_invitations?: number;
        num_failed_invitations?: number;
        failed_invitations?: Array<unknown>;
        successful_invitations?: Array<unknown>;
    };
};

export type CreateMultipleInvitesResponse = CreateMultipleInvitesResponses[keyof CreateMultipleInvitesResponses];

export type GetNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications.json';
};

export type GetNotificationsResponses = {
    /**
     * notifications
     */
    200: {
        notifications?: Array<{
            id?: number;
            user_id?: number;
            notification_type?: number;
            read?: boolean;
            created_at?: string;
            post_number?: number | null;
            topic_id?: number | null;
            slug?: string | null;
            data?: {
                badge_id?: number;
                badge_name?: string;
                badge_slug?: string;
                badge_title?: boolean;
                username?: string;
            };
        }>;
        total_rows_notifications?: number;
        seen_notification_id?: number;
        load_more_notifications?: string;
    };
};

export type GetNotificationsResponse = GetNotificationsResponses[keyof GetNotificationsResponses];

export type MarkNotificationsAsReadData = {
    body?: {
        /**
         * (optional) Leave off to mark all notifications as
         * read
         */
        id?: number;
    };
    path?: never;
    query?: never;
    url: '/notifications/mark-read.json';
};

export type MarkNotificationsAsReadResponses = {
    /**
     * notifications marked read
     */
    200: {
        success?: string;
    };
};

export type MarkNotificationsAsReadResponse = MarkNotificationsAsReadResponses[keyof MarkNotificationsAsReadResponses];

export type ListPostsData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path?: never;
    query?: {
        /**
         * Load posts with an id lower than this value. Useful for pagination.
         */
        before?: string;
    };
    url: '/posts.json';
};

export type ListPostsResponses = {
    /**
     * latest posts
     */
    200: {
        latest_posts?: Array<{
            id?: number;
            name?: string;
            username?: string;
            avatar_template?: string;
            created_at?: string;
            cooked?: string;
            post_number?: number;
            post_type?: number;
            updated_at?: string;
            reply_count?: number;
            reply_to_post_number?: string | null;
            quote_count?: number;
            incoming_link_count?: number;
            reads?: number;
            readers_count?: number;
            score?: number;
            yours?: boolean;
            topic_id?: number;
            topic_slug?: string;
            topic_title?: string;
            topic_html_title?: string;
            category_id?: number;
            display_username?: string;
            primary_group_name?: string | null;
            flair_name?: string | null;
            flair_url?: string | null;
            flair_bg_color?: string | null;
            flair_color?: string | null;
            flair_group_id?: number | null;
            version?: number;
            can_edit?: boolean;
            can_delete?: boolean;
            can_recover?: boolean;
            can_see_hidden_post?: boolean;
            can_wiki?: boolean;
            user_title?: string | null;
            raw?: string;
            actions_summary?: Array<{
                id?: number;
                can_act?: boolean;
            }>;
            moderator?: boolean;
            admin?: boolean;
            staff?: boolean;
            user_id?: number;
            hidden?: boolean;
            trust_level?: number;
            deleted_at?: string | null;
            user_deleted?: boolean;
            edit_reason?: string | null;
            can_view_edit_history?: boolean;
            wiki?: boolean;
            reviewable_id?: number | null;
            reviewable_score_count?: number;
            reviewable_score_pending_count?: number;
        }>;
    };
};

export type ListPostsResponse = ListPostsResponses[keyof ListPostsResponses];

export type CreateTopicPostPmData = {
    body?: {
        /**
         * Required if creating a new topic or new private message.
         */
        title?: string;
        raw: string;
        /**
         * Required if creating a new post.
         */
        topic_id?: number;
        /**
         * Optional if creating a new topic, and ignored if creating
         * a new post.
         */
        category?: number;
        /**
         * Required for private message, comma separated.
         */
        target_recipients?: string;
        /**
         * Deprecated. Use target_recipients instead.
         * @deprecated
         */
        target_usernames?: string;
        /**
         * Required for new private message.
         */
        archetype?: string;
        created_at?: string;
        /**
         * Optional, the post number to reply to inside a topic.
         */
        reply_to_post_number?: number;
        /**
         * Provide a URL from a remote system to associate a forum
         * topic with that URL, typically for using Discourse as a comments
         * system for an external blog.
         */
        embed_url?: string;
        /**
         * Provide an external_id from a remote system to associate
         * a forum topic with that id.
         */
        external_id?: string;
    };
    path?: never;
    query?: never;
    url: '/posts.json';
};

export type CreateTopicPostPmResponses = {
    /**
     * post created
     */
    200: {
        id: number;
        name: string | null;
        username: string;
        avatar_template: string;
        created_at: string;
        raw?: string;
        cooked: string;
        post_number: number;
        post_type: number;
        posts_count: number;
        updated_at: string;
        reply_count: number;
        reply_to_post_number: string | null;
        quote_count: number;
        incoming_link_count: number;
        reads: number;
        readers_count: number;
        score: number;
        yours: boolean;
        topic_id: number;
        topic_slug: string;
        display_username: string | null;
        primary_group_name: string | null;
        flair_name: string | null;
        flair_url: string | null;
        flair_bg_color: string | null;
        flair_color: string | null;
        flair_group_id?: number | null;
        badges_granted?: Array<unknown>;
        version: number;
        can_edit: boolean;
        can_delete: boolean;
        can_recover: boolean;
        can_see_hidden_post?: boolean;
        can_wiki: boolean;
        user_title: string | null;
        bookmarked: boolean;
        actions_summary: Array<{
            id: number;
            can_act: boolean;
        }>;
        moderator: boolean;
        admin: boolean;
        staff: boolean;
        user_id: number;
        draft_sequence: number;
        hidden: boolean;
        trust_level: number;
        deleted_at: string | null;
        user_deleted: boolean;
        edit_reason: string | null;
        can_view_edit_history: boolean;
        wiki: boolean;
        reviewable_id: number | null;
        reviewable_score_count: number;
        reviewable_score_pending_count: number;
        post_url: string;
        mentioned_users?: Array<unknown>;
    };
};

export type CreateTopicPostPmResponse = CreateTopicPostPmResponses[keyof CreateTopicPostPmResponses];

export type DeletePostData = {
    body?: {
        /**
         * The `SiteSetting.can_permanently_delete` needs to be
         * enabled first before this param can be used. Also this endpoint
         * needs to be called first without `force_destroy` and then followed
         * up with a second call 5 minutes later with `force_destroy` to
         * permanently delete.
         */
        force_destroy?: boolean;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/posts/{id}.json';
};

export type DeletePostResponses = {
    /**
     * success response
     */
    200: unknown;
};

export type GetPostData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}.json';
};

export type GetPostResponses = {
    /**
     * single reviewable post
     */
    200: {
        id: number;
        username: string;
        avatar_template: string;
        created_at: string;
        cooked: string;
        post_number: number;
        post_type: number;
        posts_count: number;
        updated_at: string;
        reply_count: number;
        reply_to_post_number: string | null;
        quote_count: number;
        incoming_link_count: number;
        reads: number;
        readers_count: number;
        score: number;
        yours: boolean;
        topic_id: number;
        topic_slug: string;
        primary_group_name: string | null;
        flair_name: string | null;
        flair_url: string | null;
        flair_bg_color: string | null;
        flair_color: string | null;
        flair_group_id?: number | null;
        version: number;
        can_edit: boolean;
        can_delete: boolean;
        can_recover: boolean;
        can_see_hidden_post?: boolean;
        can_wiki: boolean;
        user_title: string | null;
        bookmarked: boolean;
        raw: string;
        actions_summary: Array<{
            /**
             * `2`: like, `3`, `4`, `6`, `7`, `8`: flag
             */
            id: number;
            count?: number;
            acted?: boolean;
            can_undo?: boolean;
            can_act?: boolean;
        }>;
        moderator: boolean;
        admin: boolean;
        staff: boolean;
        user_id: number;
        hidden: boolean;
        trust_level: number;
        deleted_at: string | null;
        user_deleted: boolean;
        edit_reason: string | null;
        can_view_edit_history: boolean;
        wiki: boolean;
        reviewable_id: number | null;
        reviewable_score_count: number;
        reviewable_score_pending_count: number;
        post_url: string;
        mentioned_users?: Array<unknown>;
        name?: string | null;
        display_username?: string | null;
        [key: string]: unknown | number | string | (string | null) | number | boolean | (string | null) | (string | null) | (string | null) | (string | null) | (string | null) | (number | null) | (string | null) | Array<{
            /**
             * `2`: like, `3`, `4`, `6`, `7`, `8`: flag
             */
            id: number;
            count?: number;
            acted?: boolean;
            can_undo?: boolean;
            can_act?: boolean;
        }> | (string | null) | (string | null) | (number | null) | Array<unknown> | (string | null) | (string | null) | undefined;
    };
};

export type GetPostResponse = GetPostResponses[keyof GetPostResponses];

export type UpdatePostData = {
    body?: {
        post?: {
            raw: string;
            edit_reason?: string;
        };
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}.json';
};

export type UpdatePostResponses = {
    /**
     * post updated
     */
    200: {
        post: {
            id: number;
            username: string;
            avatar_template: string;
            created_at: string;
            cooked: string;
            post_number: number;
            post_type: number;
            posts_count: number;
            updated_at: string;
            reply_count: number;
            reply_to_post_number: string | null;
            quote_count: number;
            incoming_link_count: number;
            reads: number;
            readers_count: number;
            score: number;
            yours: boolean;
            topic_id: number;
            topic_slug: string;
            primary_group_name: string | null;
            flair_name: string | null;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            flair_group_id?: number | null;
            badges_granted?: Array<unknown>;
            version: number;
            can_edit: boolean;
            can_delete: boolean;
            can_recover: boolean;
            can_see_hidden_post?: boolean;
            can_wiki: boolean;
            user_title: string | null;
            bookmarked: boolean;
            raw: string;
            actions_summary: Array<{
                id: number;
                can_act: boolean;
            }>;
            moderator: boolean;
            admin: boolean;
            staff: boolean;
            user_id: number;
            draft_sequence: number;
            hidden: boolean;
            trust_level: number;
            deleted_at: string | null;
            user_deleted: boolean;
            edit_reason: string | null;
            can_view_edit_history: boolean;
            wiki: boolean;
            reviewable_id: number | null;
            reviewable_score_count: number;
            reviewable_score_pending_count: number;
            post_url: string;
            mentioned_users?: Array<unknown>;
            name?: string | null;
            display_username?: string | null;
        };
    };
};

export type UpdatePostResponse = UpdatePostResponses[keyof UpdatePostResponses];

export type PostRepliesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}/replies.json';
};

export type PostRepliesResponses = {
    /**
     * post replies
     */
    200: Array<{
        id: number;
        name: string | null;
        username: string;
        avatar_template: string;
        created_at: string;
        cooked: string;
        post_number: number;
        post_type: number;
        posts_count: number;
        updated_at: string;
        reply_count: number;
        reply_to_post_number: number;
        quote_count: number;
        incoming_link_count: number;
        reads: number;
        readers_count: number;
        score: number;
        yours: boolean;
        topic_id: number;
        topic_slug: string;
        display_username: string | null;
        primary_group_name: string | null;
        flair_name: string | null;
        flair_url: string | null;
        flair_bg_color: string | null;
        flair_color: string | null;
        flair_group_id?: number | null;
        version: number;
        can_edit: boolean;
        can_delete: boolean;
        can_recover: boolean;
        can_see_hidden_post: boolean;
        can_wiki: boolean;
        user_title: string | null;
        reply_to_user: {
            username: string;
            name?: string;
            avatar_template: string;
        };
        bookmarked: boolean;
        actions_summary: Array<{
            id: number;
            can_act: boolean;
        }>;
        moderator: boolean;
        admin: boolean;
        staff: boolean;
        user_id: number;
        hidden: boolean;
        trust_level: number;
        deleted_at: string | null;
        user_deleted: boolean;
        edit_reason: string | null;
        can_view_edit_history: boolean;
        wiki: boolean;
        reviewable_id: number | null;
        reviewable_score_count: number;
        reviewable_score_pending_count: number;
        post_url: string;
    }>;
};

export type PostRepliesResponse = PostRepliesResponses[keyof PostRepliesResponses];

export type LockPostData = {
    body?: {
        locked: string;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/posts/{id}/locked.json';
};

export type LockPostResponses = {
    /**
     * post updated
     */
    200: {
        locked?: boolean;
    };
};

export type LockPostResponse = LockPostResponses[keyof LockPostResponses];

export type PerformPostActionData = {
    body?: {
        id: number;
        post_action_type_id: number;
        flag_topic?: boolean;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path?: never;
    query?: never;
    url: '/post_actions.json';
};

export type PerformPostActionResponses = {
    /**
     * post updated
     */
    200: {
        id?: number;
        name?: string;
        username?: string;
        avatar_template?: string;
        created_at?: string;
        cooked?: string;
        post_number?: number;
        post_type?: number;
        updated_at?: string;
        reply_count?: number;
        reply_to_post_number?: string | null;
        quote_count?: number;
        incoming_link_count?: number;
        reads?: number;
        readers_count?: number;
        score?: number;
        yours?: boolean;
        topic_id?: number;
        topic_slug?: string;
        display_username?: string;
        primary_group_name?: string | null;
        flair_name?: string | null;
        flair_url?: string | null;
        flair_bg_color?: string | null;
        flair_color?: string | null;
        version?: number;
        can_edit?: boolean;
        can_delete?: boolean;
        can_recover?: boolean;
        can_wiki?: boolean;
        user_title?: string | null;
        actions_summary?: Array<{
            id?: number;
            count?: number;
            acted?: boolean;
            can_undo?: boolean;
        }>;
        moderator?: boolean;
        admin?: boolean;
        staff?: boolean;
        user_id?: number;
        hidden?: boolean;
        trust_level?: number;
        deleted_at?: string | null;
        user_deleted?: boolean;
        edit_reason?: string | null;
        can_view_edit_history?: boolean;
        wiki?: boolean;
        notice?: {
            [key: string]: unknown;
        };
        notice_created_by_user?: {
            [key: string]: unknown;
        } | null;
        reviewable_id?: number | null;
        reviewable_score_count?: number;
        reviewable_score_pending_count?: number;
    };
};

export type PerformPostActionResponse = PerformPostActionResponses[keyof PerformPostActionResponses];

export type ListUserPrivateMessagesData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/topics/private-messages/{username}.json';
};

export type ListUserPrivateMessagesResponses = {
    /**
     * private messages
     */
    200: {
        users?: Array<{
            id?: number;
            username?: string;
            name?: string;
            avatar_template?: string;
        }>;
        primary_groups?: Array<unknown>;
        topic_list?: {
            can_create_topic?: boolean;
            draft?: string | null;
            draft_key?: string;
            draft_sequence?: number;
            per_page?: number;
            topics?: Array<{
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: string | null;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: string | null;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: string | null;
                pinned_globally?: boolean;
                featured_link?: string | null;
                allowed_user_count?: number;
                posters?: Array<{
                    extras?: string;
                    description?: string;
                    user_id?: number;
                    primary_group_id?: number | null;
                }>;
                participants?: Array<{
                    extras?: string;
                    description?: string | null;
                    user_id?: number;
                    primary_group_id?: number | null;
                }>;
            }>;
        };
    };
};

export type ListUserPrivateMessagesResponse = ListUserPrivateMessagesResponses[keyof ListUserPrivateMessagesResponses];

export type GetUserSentPrivateMessagesData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/topics/private-messages-sent/{username}.json';
};

export type GetUserSentPrivateMessagesResponses = {
    /**
     * private messages
     */
    200: {
        users?: Array<{
            id?: number;
            username?: string;
            name?: string | null;
            avatar_template?: string;
        }>;
        primary_groups?: Array<unknown>;
        topic_list?: {
            can_create_topic?: boolean;
            draft?: string | null;
            draft_key?: string;
            draft_sequence?: number;
            per_page?: number;
            topics?: Array<{
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: string | null;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: string | null;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: string | null;
                pinned_globally?: boolean;
                featured_link?: string | null;
                allowed_user_count?: number;
                posters?: Array<{
                    extras?: string;
                    description?: string;
                    user_id?: number;
                    primary_group_id?: number | null;
                }>;
                participants?: Array<unknown>;
            }>;
        };
    };
};

export type GetUserSentPrivateMessagesResponse = GetUserSentPrivateMessagesResponses[keyof GetUserSentPrivateMessagesResponses];

export type SearchData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The query string needs to be url encoded and is made up of the following options:
         * - Search term. This is just a string. Usually it would be the first item in the query.
         * - `@<username>`: Use the `@` followed by the username to specify posts by this user.
         * - `#<category>`: Use the `#` followed by the category slug to search within this category.
         * - `tags:`: `api,solved` or for posts that have all the specified tags `api+solved`.
         * - `before:`: `yyyy-mm-dd`
         * - `after:`: `yyyy-mm-dd`
         * - `order:`: `latest`, `likes`, `views`, `latest_topic`
         * - `assigned:`: username (without `@`)
         * - `in:`: `title`, `likes`, `personal`, `messages`, `seen`, `unseen`, `posted`, `created`, `watching`, `tracking`, `bookmarks`, `assigned`, `unassigned`, `first`, `pinned`, `wiki`
         * - `with:`: `images`
         * - `status:`: `open`, `closed`, `public`, `archived`, `noreplies`, `single_user`, `solved`, `unsolved`
         * - `group:`: group_name or group_id
         * - `group_messages:`: group_name or group_id
         * - `min_posts:`: 1
         * - `max_posts:`: 10
         * - `min_views:`: 1
         * - `max_views:`: 10
         *
         * If you are using cURL you can use the `-G` and the `--data-urlencode` flags to encode the query:
         *
         * ```
         * curl -i -sS -X GET -G "http://localhost:4200/search.json" \
         * --data-urlencode 'q=wordpress @scossar #fun after:2020-01-01'
         * ```
         *
         */
        q?: string;
        page?: number;
    };
    url: '/search.json';
};

export type SearchResponses = {
    /**
     * success response
     */
    200: {
        posts: Array<unknown>;
        users: Array<unknown>;
        categories: Array<unknown>;
        tags: Array<unknown>;
        groups: Array<unknown>;
        grouped_search_result: {
            more_posts: string | null;
            more_users: string | null;
            more_categories: string | null;
            term: string;
            search_log_id: number;
            more_full_page_results: string | null;
            can_create_topic: boolean;
            error: string | null;
            extra?: {
                categories?: Array<unknown> | null;
            };
            post_ids: Array<unknown>;
            user_ids: Array<unknown>;
            category_ids: Array<unknown>;
            tag_ids: Array<unknown>;
            group_ids: Array<unknown>;
        };
    };
};

export type SearchResponse = SearchResponses[keyof SearchResponses];

export type GetSiteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/site.json';
};

export type GetSiteResponses = {
    /**
     * success response
     */
    200: {
        default_archetype: string;
        notification_types: {
            mentioned: number;
            replied: number;
            quoted: number;
            edited: number;
            liked: number;
            private_message: number;
            invited_to_private_message: number;
            invitee_accepted: number;
            posted: number;
            watching_category_or_tag: number;
            new_features?: number;
            admin_problems?: number;
            moved_post: number;
            linked: number;
            granted_badge: number;
            invited_to_topic: number;
            custom: number;
            group_mentioned: number;
            group_message_summary: number;
            watching_first_post: number;
            topic_reminder: number;
            liked_consolidated: number;
            linked_consolidated: number;
            post_approved: number;
            code_review_commit_approved: number;
            membership_request_accepted: number;
            membership_request_consolidated: number;
            bookmark_reminder: number;
            reaction: number;
            votes_released: number;
            event_reminder: number;
            event_invitation: number;
            chat_mention: number;
            chat_message: number;
            chat_invitation: number;
            chat_group_mention: number;
            chat_quoted?: number;
            chat_watched_thread?: number;
            assigned?: number;
            question_answer_user_commented?: number;
            following?: number;
            following_created_topic?: number;
            following_replied?: number;
            circles_activity?: number;
        };
        post_types: {
            regular: number;
            moderator_action: number;
            small_action: number;
            whisper: number;
        };
        trust_levels: {
            newuser: number;
            basic: number;
            member: number;
            regular: number;
            leader: number;
        };
        user_tips?: {
            first_notification: number;
            topic_timeline: number;
            post_menu: number;
            topic_notification_levels: number;
            suggested_topics: number;
        };
        groups: Array<{
            id: number;
            name: string;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
        }>;
        filters: Array<unknown>;
        periods: Array<unknown>;
        top_menu_items: Array<unknown>;
        anonymous_top_menu_items: Array<unknown>;
        uncategorized_category_id: number;
        user_field_max_length: number;
        post_action_types: Array<{
            id: number | null;
            name_key: string | null;
            name: string;
            description: string;
            short_description: string;
            is_flag: boolean;
            require_message: boolean;
            enabled: boolean;
            applies_to: Array<unknown>;
            is_used: boolean;
            position?: number;
            auto_action_type: boolean;
        }>;
        topic_flag_types: Array<{
            id: number | null;
            name_key: string | null;
            name: string;
            description: string;
            short_description: string;
            is_flag: boolean;
            require_message: boolean;
            enabled: boolean;
            applies_to: Array<unknown>;
            is_used: boolean;
            position?: number;
            auto_action_type: boolean;
        }>;
        can_create_tag: boolean;
        can_tag_topics: boolean;
        can_tag_pms: boolean;
        tags_filter_regexp: string;
        top_tags: Array<unknown>;
        wizard_required?: boolean;
        can_associate_groups?: boolean;
        topic_featured_link_allowed_category_ids: Array<unknown>;
        user_themes: Array<{
            theme_id: number;
            name: string;
            default: boolean;
            color_scheme_id: number | null;
        }>;
        user_color_schemes: Array<{
            id: number;
            name: string;
            is_dark: boolean;
        }>;
        default_dark_color_scheme: {
            [key: string]: unknown;
        } | null;
        censored_regexp: Array<{
            [key: string]: unknown;
        }>;
        custom_emoji_translation: {
            [key: string]: never;
        };
        watched_words_replace: string | null;
        watched_words_link: string | null;
        markdown_additional_options?: {
            [key: string]: unknown;
        };
        hashtag_configurations?: {
            [key: string]: unknown;
        };
        hashtag_icons?: {
            [key: string]: unknown;
        };
        displayed_about_plugin_stat_groups?: Array<unknown>;
        categories: Array<{
            id: number;
            name: string;
            color: string;
            text_color: string;
            slug: string;
            topic_count: number;
            post_count: number;
            position: number;
            description?: string | null;
            description_text?: string | null;
            description_excerpt?: string | null;
            topic_url: string;
            read_restricted: boolean;
            permission: number;
            notification_level: number;
            topic_template: string | null;
            has_children: boolean;
            subcategory_count: number | null;
            sort_order: string | null;
            sort_ascending: string | null;
            show_subcategory_list: boolean;
            num_featured_topics: number;
            default_view: string | null;
            subcategory_list_style: string;
            default_top_period: string;
            default_list_filter: string;
            minimum_required_tags: number;
            navigate_to_first_post_after_read: boolean;
            allowed_tags: Array<unknown>;
            allowed_tag_groups: Array<unknown>;
            allow_global_tags: boolean;
            required_tag_groups: Array<{
                name: string;
                min_count: number;
            }>;
            read_only_banner: string | null;
            uploaded_logo: string | null;
            uploaded_logo_dark: string | null;
            uploaded_background: string | null;
            uploaded_background_dark: string | null;
            can_edit: boolean;
            custom_fields?: {
                [key: string]: unknown;
            } | null;
            parent_category_id?: number;
            form_template_ids?: Array<unknown>;
        }>;
        archetypes: Array<{
            id: string;
            name: string;
            options: Array<unknown>;
        }>;
        user_fields: Array<unknown>;
        auth_providers: Array<unknown>;
        whispers_allowed_groups_names?: Array<unknown>;
        denied_emojis?: Array<unknown>;
        valid_flag_applies_to_types?: Array<unknown>;
        navigation_menu_site_top_tags?: Array<unknown>;
        full_name_required_for_signup: boolean;
        full_name_visible_in_signup: boolean;
    };
};

export type GetSiteResponse = GetSiteResponses[keyof GetSiteResponses];

export type GetSiteBasicInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/site/basic-info.json';
};

export type GetSiteBasicInfoResponses = {
    /**
     * success response
     */
    200: {
        logo_url: string;
        logo_small_url: string;
        apple_touch_icon_url: string;
        favicon_url: string;
        title: string;
        description: string;
        header_primary_color: string;
        header_background_color: string;
        login_required: boolean;
        locale: string;
        include_in_discourse_discover: boolean;
        mobile_logo_url: string;
    };
};

export type GetSiteBasicInfoResponse = GetSiteBasicInfoResponses[keyof GetSiteBasicInfoResponses];

export type ListTagGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tag_groups.json';
};

export type ListTagGroupsResponses = {
    /**
     * tags
     */
    200: {
        tag_groups?: Array<{
            id?: number;
            name?: string;
            tag_names?: Array<unknown>;
            parent_tag_name?: Array<unknown>;
            one_per_topic?: boolean;
            permissions?: {
                staff?: number;
            };
        }>;
    };
};

export type ListTagGroupsResponse = ListTagGroupsResponses[keyof ListTagGroupsResponses];

export type CreateTagGroupData = {
    body?: {
        name: string;
    };
    path?: never;
    query?: never;
    url: '/tag_groups.json';
};

export type CreateTagGroupResponses = {
    /**
     * tag group created
     */
    200: {
        tag_group: {
            id: number;
            name: string;
            tag_names: Array<unknown>;
            parent_tag_name: Array<unknown>;
            one_per_topic: boolean;
            permissions: {
                [key: string]: unknown;
            };
        };
    };
};

export type CreateTagGroupResponse = CreateTagGroupResponses[keyof CreateTagGroupResponses];

export type GetTagGroupData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/tag_groups/{id}.json';
};

export type GetTagGroupResponses = {
    /**
     * notifications
     */
    200: {
        tag_group?: {
            id?: number;
            name?: string;
            tag_names?: Array<unknown>;
            parent_tag_name?: Array<unknown>;
            one_per_topic?: boolean;
            permissions?: {
                everyone?: number;
            };
        };
    };
};

export type GetTagGroupResponse = GetTagGroupResponses[keyof GetTagGroupResponses];

export type UpdateTagGroupData = {
    body?: {
        name?: string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/tag_groups/{id}.json';
};

export type UpdateTagGroupResponses = {
    /**
     * Tag group updated
     */
    200: {
        success?: string;
        tag_group?: {
            id?: number;
            name?: string;
            tag_names?: Array<unknown>;
            parent_tag_name?: Array<unknown>;
            one_per_topic?: boolean;
            permissions?: {
                everyone?: number;
            };
        };
    };
};

export type UpdateTagGroupResponse = UpdateTagGroupResponses[keyof UpdateTagGroupResponses];

export type ListTagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tags.json';
};

export type ListTagsResponses = {
    /**
     * notifications
     */
    200: {
        tags?: Array<{
            id?: string;
            text?: string;
            count?: number;
            pm_count?: number;
            target_tag?: string | null;
        }>;
        extras?: {
            categories?: Array<unknown>;
        };
    };
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type GetTagData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/tag/{name}.json';
};

export type GetTagResponses = {
    /**
     * notifications
     */
    200: {
        users?: Array<{
            id?: number;
            username?: string;
            name?: string | null;
            avatar_template?: string;
        }>;
        primary_groups?: Array<unknown>;
        topic_list?: {
            can_create_topic?: boolean;
            draft?: string | null;
            draft_key?: string;
            draft_sequence?: number;
            per_page?: number;
            tags?: Array<{
                id?: number;
                name?: string;
                topic_count?: number;
                staff?: boolean;
            }>;
            topics?: Array<{
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: string | null;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: string | null;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                tags?: Array<unknown>;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: number;
                pinned_globally?: boolean;
                featured_link?: string | null;
                posters?: Array<{
                    extras?: string;
                    description?: string;
                    user_id?: number;
                    primary_group_id?: number | null;
                }>;
            }>;
        };
    };
};

export type GetTagResponse = GetTagResponses[keyof GetTagResponses];

export type GetSpecificPostsFromTopicData = {
    body?: {
        'post_ids[]': number;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/posts.json';
};

export type GetSpecificPostsFromTopicResponses = {
    /**
     * specific posts
     */
    200: {
        post_stream?: {
            posts?: Array<{
                id?: number;
                name?: string | null;
                username?: string;
                avatar_template?: string;
                created_at?: string;
                cooked?: string;
                post_number?: number;
                post_type?: number;
                updated_at?: string;
                reply_count?: number;
                reply_to_post_number?: string | null;
                quote_count?: number;
                incoming_link_count?: number;
                reads?: number;
                readers_count?: number;
                score?: number;
                yours?: boolean;
                topic_id?: number;
                topic_slug?: string;
                display_username?: string | null;
                primary_group_name?: string | null;
                flair_name?: string | null;
                flair_url?: string | null;
                flair_bg_color?: string | null;
                flair_color?: string | null;
                version?: number;
                can_edit?: boolean;
                can_delete?: boolean;
                can_recover?: boolean;
                can_wiki?: boolean;
                read?: boolean;
                user_title?: string | null;
                actions_summary?: Array<{
                    id?: number;
                    can_act?: boolean;
                }>;
                moderator?: boolean;
                admin?: boolean;
                staff?: boolean;
                user_id?: number;
                hidden?: boolean;
                trust_level?: number;
                deleted_at?: string | null;
                user_deleted?: boolean;
                edit_reason?: string | null;
                can_view_edit_history?: boolean;
                wiki?: boolean;
                reviewable_id?: number;
                reviewable_score_count?: number;
                reviewable_score_pending_count?: number;
            }>;
        };
        id?: number;
    };
};

export type GetSpecificPostsFromTopicResponse = GetSpecificPostsFromTopicResponses[keyof GetSpecificPostsFromTopicResponses];

export type RemoveTopicData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}.json';
};

export type RemoveTopicResponses = {
    /**
     * specific posts
     */
    200: unknown;
};

export type GetTopicData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}.json';
};

export type GetTopicResponses = {
    /**
     * specific posts
     */
    200: {
        post_stream: {
            posts: Array<{
                id: number;
                name: string;
                username: string;
                avatar_template: string;
                created_at: string;
                cooked: string;
                post_number: number;
                post_type: number;
                updated_at: string;
                reply_count: number;
                reply_to_post_number: string | null;
                quote_count: number;
                incoming_link_count: number;
                reads: number;
                readers_count: number;
                score: number;
                yours: boolean;
                topic_id: number;
                topic_slug: string;
                display_username: string;
                primary_group_name: string | null;
                flair_name: string | null;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
                version: number;
                can_edit: boolean;
                can_delete: boolean;
                can_recover: boolean;
                can_see_hidden_post?: boolean;
                can_wiki: boolean;
                link_counts: Array<{
                    url: string;
                    internal: boolean;
                    reflection: boolean;
                    title: string;
                    clicks: number;
                }>;
                read: boolean;
                user_title: string | null;
                bookmarked: boolean;
                actions_summary: Array<{
                    id: number;
                    can_act: boolean;
                }>;
                moderator: boolean;
                admin: boolean;
                staff: boolean;
                user_id: number;
                hidden: boolean;
                trust_level: number;
                deleted_at: string | null;
                user_deleted: boolean;
                edit_reason: string | null;
                can_view_edit_history: boolean;
                wiki: boolean;
                reviewable_id: number;
                reviewable_score_count: number;
                reviewable_score_pending_count: number;
            }>;
            stream: Array<unknown>;
        };
        timeline_lookup: Array<unknown>;
        suggested_topics: Array<{
            id: number;
            title: string;
            fancy_title: string;
            slug: string;
            posts_count: number;
            reply_count: number;
            highest_post_number: number;
            image_url: string | null;
            created_at: string;
            last_posted_at: string | null;
            bumped: boolean;
            bumped_at: string;
            archetype: string;
            unseen: boolean;
            pinned: boolean;
            unpinned: string | null;
            excerpt: string;
            visible: boolean;
            closed: boolean;
            archived: boolean;
            bookmarked: string | null;
            liked: string | null;
            tags: Array<unknown>;
            tags_descriptions: {
                [key: string]: never;
            };
            like_count: number;
            views: number;
            category_id: number;
            featured_link: string | null;
            posters: Array<{
                extras: string;
                description: string;
                user: {
                    id: number;
                    username: string;
                    name: string;
                    avatar_template: string;
                };
            }>;
        }>;
        tags: Array<unknown>;
        tags_descriptions: {
            [key: string]: never;
        };
        id: number;
        title: string;
        fancy_title: string;
        posts_count: number;
        created_at: string;
        views: number;
        reply_count: number;
        like_count: number;
        last_posted_at: string | null;
        visible: boolean;
        closed: boolean;
        archived: boolean;
        has_summary: boolean;
        archetype: string;
        slug: string;
        category_id: number;
        word_count: number | null;
        deleted_at: string | null;
        user_id: number;
        featured_link: string | null;
        pinned_globally: boolean;
        pinned_at: string | null;
        pinned_until: string | null;
        image_url: string | null;
        slow_mode_seconds: number;
        draft: string | null;
        draft_key: string;
        draft_sequence: number;
        unpinned: string | null;
        pinned: boolean;
        current_post_number?: number;
        highest_post_number: number | null;
        deleted_by: string | null;
        has_deleted: boolean;
        actions_summary: Array<{
            id: number;
            count: number;
            hidden: boolean;
            can_act: boolean;
        }>;
        chunk_size: number;
        bookmarked: boolean;
        bookmarks: Array<unknown>;
        topic_timer: string | null;
        message_bus_last_id: number;
        participant_count: number;
        show_read_indicator: boolean;
        thumbnails: string | null;
        slow_mode_enabled_until: string | null;
        details: {
            can_edit: boolean;
            notification_level: number;
            can_move_posts: boolean;
            can_delete: boolean;
            can_remove_allowed_users: boolean;
            can_create_post: boolean;
            can_reply_as_new_topic: boolean;
            can_invite_to?: boolean;
            can_invite_via_email?: boolean;
            can_flag_topic?: boolean;
            can_convert_topic: boolean;
            can_review_topic: boolean;
            can_close_topic: boolean;
            can_archive_topic: boolean;
            can_split_merge_topic: boolean;
            can_edit_staff_notes: boolean;
            can_toggle_topic_visibility: boolean;
            can_pin_unpin_topic: boolean;
            can_moderate_category: boolean;
            can_remove_self_id: number;
            participants?: Array<{
                id: number;
                username: string;
                name: string;
                avatar_template: string;
                post_count: number;
                primary_group_name: string | null;
                flair_name: string | null;
                flair_url: string | null;
                flair_color: string | null;
                flair_bg_color: string | null;
                flair_group_id?: number | null;
                admin: boolean;
                moderator: boolean;
                trust_level: number;
            }>;
            created_by: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
            };
            last_poster: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
            };
        };
    };
};

export type GetTopicResponse = GetTopicResponses[keyof GetTopicResponses];

export type UpdateTopicData = {
    body?: {
        topic?: {
            title?: string;
            category_id?: number;
        };
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/-/{id}.json';
};

export type UpdateTopicResponses = {
    /**
     * topic updated
     */
    200: {
        basic_topic?: {
            id?: number;
            title?: string;
            fancy_title?: string;
            slug?: string;
            posts_count?: number;
        };
    };
};

export type UpdateTopicResponse = UpdateTopicResponses[keyof UpdateTopicResponses];

export type InviteToTopicData = {
    body?: {
        user?: string;
        email?: string;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/invite.json';
};

export type InviteToTopicResponses = {
    /**
     * topic updated
     */
    200: {
        user?: {
            id?: number;
            username?: string;
            name?: string;
            avatar_template?: string;
        };
    };
};

export type InviteToTopicResponse = InviteToTopicResponses[keyof InviteToTopicResponses];

export type InviteGroupToTopicData = {
    body?: {
        /**
         * The name of the group to invite
         */
        group?: string;
        /**
         * Whether to notify the group, it defaults to true
         */
        should_notify?: boolean;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/invite-group.json';
};

export type InviteGroupToTopicResponses = {
    /**
     * invites to a PM
     */
    200: {
        group?: {
            id?: number;
            name?: string;
        };
    };
};

export type InviteGroupToTopicResponse = InviteGroupToTopicResponses[keyof InviteGroupToTopicResponses];

export type BookmarkTopicData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/bookmark.json';
};

export type BookmarkTopicResponses = {
    /**
     * topic updated
     */
    200: unknown;
};

export type UpdateTopicStatusData = {
    body?: {
        status: 'closed' | 'pinned' | 'pinned_globally' | 'archived' | 'visible';
        enabled: 'true' | 'false';
        /**
         * Only required for `pinned` and `pinned_globally`
         */
        until?: string;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/status.json';
};

export type UpdateTopicStatusResponses = {
    /**
     * topic updated
     */
    200: {
        success?: string;
        topic_status_update?: string | null;
    };
};

export type UpdateTopicStatusResponse = UpdateTopicStatusResponses[keyof UpdateTopicStatusResponses];

export type ListLatestTopicsData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path?: never;
    query?: {
        /**
         * Enum: `default`, `created`, `activity`, `views`, `posts`, `category`,
         * `likes`, `op_likes`, `posters`
         */
        order?: string;
        /**
         * Defaults to `desc`, add `ascending=true` to sort asc
         */
        ascending?: string;
        /**
         * Maximum number of topics returned, between 1-100
         */
        per_page?: number;
    };
    url: '/latest.json';
};

export type ListLatestTopicsResponses = {
    /**
     * topic updated
     */
    200: {
        users?: Array<{
            id?: number;
            username?: string;
            name?: string | null;
            avatar_template?: string;
        }>;
        primary_groups?: Array<unknown>;
        topic_list?: {
            can_create_topic?: boolean;
            draft?: string | null;
            draft_key?: string;
            draft_sequence?: number;
            per_page?: number;
            topics?: Array<{
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: string;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: string | null;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: number;
                op_like_count?: number;
                pinned_globally?: boolean;
                featured_link?: string | null;
                posters?: Array<{
                    extras?: string;
                    description?: string;
                    user_id?: number;
                    primary_group_id?: number | null;
                }>;
            }>;
        };
    };
};

export type ListLatestTopicsResponse = ListLatestTopicsResponses[keyof ListLatestTopicsResponses];

export type ListTopTopicsData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path?: never;
    query?: {
        /**
         * Enum: `all`, `yearly`, `quarterly`, `monthly`, `weekly`, `daily`
         */
        period?: string;
        /**
         * Maximum number of topics returned, between 1-100
         */
        per_page?: number;
    };
    url: '/top.json';
};

export type ListTopTopicsResponses = {
    /**
     * response
     */
    200: {
        users?: Array<{
            id?: number;
            username?: string;
            name?: string;
            avatar_template?: string;
        }>;
        primary_groups?: Array<unknown>;
        topic_list?: {
            can_create_topic?: boolean;
            draft?: string | null;
            draft_key?: string;
            draft_sequence?: number;
            for_period?: string;
            per_page?: number;
            topics?: Array<{
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: string | null;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: boolean;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: number;
                op_like_count?: number;
                pinned_globally?: boolean;
                featured_link?: string | null;
                posters?: Array<{
                    extras?: string | null;
                    description?: string;
                    user_id?: number;
                    primary_group_id?: number | null;
                }>;
            }>;
        };
    };
};

export type ListTopTopicsResponse = ListTopTopicsResponses[keyof ListTopTopicsResponses];

export type SetNotificationLevelData = {
    body?: {
        notification_level: '0' | '1' | '2' | '3';
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/notifications.json';
};

export type SetNotificationLevelResponses = {
    /**
     * topic updated
     */
    200: {
        success?: string;
    };
};

export type SetNotificationLevelResponse = SetNotificationLevelResponses[keyof SetNotificationLevelResponses];

export type UpdateTopicTimestampData = {
    body?: {
        timestamp: string;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/change-timestamp.json';
};

export type UpdateTopicTimestampResponses = {
    /**
     * topic updated
     */
    200: {
        success?: string;
    };
};

export type UpdateTopicTimestampResponse = UpdateTopicTimestampResponses[keyof UpdateTopicTimestampResponses];

export type CreateTopicTimerData = {
    body?: {
        time?: string;
        status_type?: string;
        based_on_last_post?: boolean;
        category_id?: number;
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/t/{id}/timer.json';
};

export type CreateTopicTimerResponses = {
    /**
     * topic updated
     */
    200: {
        success?: string;
        execute_at?: string;
        duration?: string | null;
        based_on_last_post?: boolean;
        closed?: boolean;
        category_id?: number | null;
    };
};

export type CreateTopicTimerResponse = CreateTopicTimerResponses[keyof CreateTopicTimerResponses];

export type GetTopicByExternalIdData = {
    body?: never;
    path: {
        external_id: string;
    };
    query?: never;
    url: '/t/external_id/{external_id}.json';
};

export type CreateUploadData = {
    body?: {
        type: 'avatar' | 'profile_background' | 'card_background' | 'custom_emoji' | 'composer';
        /**
         * required if uploading an avatar
         */
        user_id?: number;
        /**
         * Use this flag to return an id and url
         */
        synchronous?: boolean;
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/uploads.json';
};

export type CreateUploadResponses = {
    /**
     * file uploaded
     */
    200: {
        id: number;
        url: string;
        original_filename: string;
        filesize: number;
        width: number;
        height: number;
        thumbnail_width: number;
        thumbnail_height: number;
        extension: string;
        short_url: string;
        short_path: string;
        retain_hours: string | null;
        human_filesize: string;
        dominant_color?: string | null;
        thumbnail?: {
            id?: number;
            upload_id?: number;
            url?: string;
            extension?: string;
            width?: number;
            height?: number;
            filesize?: number;
        } | null;
    };
};

export type CreateUploadResponse = CreateUploadResponses[keyof CreateUploadResponses];

export type GeneratePresignedPutData = {
    body?: {
        type: 'avatar' | 'profile_background' | 'card_background' | 'custom_emoji' | 'composer';
        file_name: string;
        /**
         * File size should be represented in bytes.
         */
        file_size: number;
        metadata?: {
            /**
             * The SHA1 checksum of the upload binary blob. Optionally
             * be provided and serves as an additional security check when
             * later processing the file in complete-external-upload endpoint.
             */
            'sha1-checksum'?: string;
        };
    };
    path?: never;
    query?: never;
    url: '/uploads/generate-presigned-put.json';
};

export type GeneratePresignedPutResponses = {
    /**
     * external upload initialized
     */
    200: {
        /**
         * The path of the temporary file on the external storage
         * service.
         */
        key?: string;
        /**
         * A presigned PUT URL which must be used to upload
         * the file binary blob to.
         */
        url?: string;
        /**
         * A map of headers that must be sent with the PUT request.
         */
        signed_headers?: {
            [key: string]: unknown;
        };
        /**
         * A unique string that identifies the external upload.
         * This must be stored and then sent in the /complete-external-upload
         * endpoint to complete the direct upload.
         */
        unique_identifier?: string;
    };
};

export type GeneratePresignedPutResponse = GeneratePresignedPutResponses[keyof GeneratePresignedPutResponses];

export type CompleteExternalUploadData = {
    body?: {
        /**
         * The unique identifier returned in the original /generate-presigned-put
         * request.
         */
        unique_identifier: string;
        /**
         * Optionally set this to true if the upload is for a
         * private message.
         */
        for_private_message?: string;
        /**
         * Optionally set this to true if the upload is for a
         * site setting.
         */
        for_site_setting?: string;
        /**
         * Optionally set this to true if the upload was pasted
         * into the upload area. This will convert PNG files to JPEG.
         */
        pasted?: string;
    };
    path?: never;
    query?: never;
    url: '/uploads/complete-external-upload.json';
};

export type CompleteExternalUploadResponses = {
    /**
     * external upload initialized
     */
    200: {
        id: number;
        url: string;
        original_filename: string;
        filesize: number;
        width: number;
        height: number;
        thumbnail_width: number;
        thumbnail_height: number;
        extension: string;
        short_url: string;
        short_path: string;
        retain_hours: string | null;
        human_filesize: string;
        dominant_color?: string | null;
        thumbnail?: {
            id?: number;
            upload_id?: number;
            url?: string;
            extension?: string;
            width?: number;
            height?: number;
            filesize?: number;
        } | null;
    };
};

export type CompleteExternalUploadResponse = CompleteExternalUploadResponses[keyof CompleteExternalUploadResponses];

export type CreateMultipartUploadData = {
    body?: {
        upload_type: 'avatar' | 'profile_background' | 'card_background' | 'custom_emoji' | 'composer';
        file_name: string;
        /**
         * File size should be represented in bytes.
         */
        file_size: number;
        metadata?: {
            /**
             * The SHA1 checksum of the upload binary blob. Optionally
             * be provided and serves as an additional security check when
             * later processing the file in complete-external-upload endpoint.
             */
            'sha1-checksum'?: string;
        };
    };
    path?: never;
    query?: never;
    url: '/uploads/create-multipart.json';
};

export type CreateMultipartUploadResponses = {
    /**
     * external upload initialized
     */
    200: {
        /**
         * The path of the temporary file on the external storage
         * service.
         */
        key: string;
        /**
         * The identifier of the multipart upload in the external
         * storage provider. This is the multipart upload_id in AWS S3.
         */
        external_upload_identifier: string;
        /**
         * A unique string that identifies the external upload.
         * This must be stored and then sent in the /complete-multipart
         * and /batch-presign-multipart-parts endpoints.
         */
        unique_identifier: string;
    };
};

export type CreateMultipartUploadResponse = CreateMultipartUploadResponses[keyof CreateMultipartUploadResponses];

export type BatchPresignMultipartPartsData = {
    body?: {
        /**
         * The part numbers to generate the presigned URLs for,
         * must be between 1 and 10000.
         */
        part_numbers: Array<unknown>;
        /**
         * The unique identifier returned in the original /create-multipart
         * request.
         */
        unique_identifier: string;
    };
    path?: never;
    query?: never;
    url: '/uploads/batch-presign-multipart-parts.json';
};

export type BatchPresignMultipartPartsResponses = {
    /**
     * external upload initialized
     */
    200: {
        /**
         * The presigned URLs for each part number, which has
         * the part numbers as keys.
         */
        presigned_urls: {
            [key: string]: unknown;
        };
    };
};

export type BatchPresignMultipartPartsResponse = BatchPresignMultipartPartsResponses[keyof BatchPresignMultipartPartsResponses];

export type AbortMultipartData = {
    body?: {
        /**
         * The identifier of the multipart upload in the external
         * storage provider. This is the multipart upload_id in AWS S3.
         */
        external_upload_identifier: string;
    };
    path?: never;
    query?: never;
    url: '/uploads/abort-multipart.json';
};

export type AbortMultipartResponses = {
    /**
     * external upload initialized
     */
    200: {
        success: string;
    };
};

export type AbortMultipartResponse = AbortMultipartResponses[keyof AbortMultipartResponses];

export type CompleteMultipartData = {
    body?: {
        /**
         * The unique identifier returned in the original /create-multipart
         * request.
         */
        unique_identifier: string;
        /**
         * All of the part numbers and their corresponding ETags
         * that have been uploaded must be provided.
         */
        parts: Array<unknown>;
    };
    path?: never;
    query?: never;
    url: '/uploads/complete-multipart.json';
};

export type CompleteMultipartResponses = {
    /**
     * external upload initialized
     */
    200: {
        id: number;
        url: string;
        original_filename: string;
        filesize: number;
        width: number;
        height: number;
        thumbnail_width: number;
        thumbnail_height: number;
        extension: string;
        short_url: string;
        short_path: string;
        retain_hours: string | null;
        human_filesize: string;
        dominant_color?: string | null;
        thumbnail?: {
            id?: number;
            upload_id?: number;
            url?: string;
            extension?: string;
            width?: number;
            height?: number;
            filesize?: number;
        } | null;
    };
};

export type CompleteMultipartResponse = CompleteMultipartResponses[keyof CompleteMultipartResponses];

export type ListUserBadgesData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/user-badges/{username}.json';
};

export type ListUserBadgesResponses = {
    /**
     * success response
     */
    200: {
        badges?: Array<{
            id: number;
            name: string;
            description: string;
            grant_count: number;
            allow_title: boolean;
            multiple_grant: boolean;
            icon: string;
            image_url: string | null;
            listable: boolean;
            enabled: boolean;
            badge_grouping_id: number;
            system: boolean;
            slug: string;
            manually_grantable: boolean;
            badge_type_id: number;
        }>;
        badge_types?: Array<{
            id: number;
            name: string;
            sort_order: number;
        }>;
        granted_bies?: Array<{
            id: number;
            username: string;
            name: string;
            avatar_template: string;
            flair_name: string | null;
            admin: boolean;
            moderator: boolean;
            trust_level: number;
        }>;
        user_badges: Array<{
            id: number;
            granted_at: string;
            grouping_position: number;
            is_favorite: string | null;
            can_favorite: boolean;
            badge_id: number;
            granted_by_id: number;
        }>;
    };
};

export type ListUserBadgesResponse = ListUserBadgesResponses[keyof ListUserBadgesResponses];

export type CreateUserData = {
    body?: {
        name: string;
        email: string;
        password: string;
        username: string;
        /**
         * This param requires an api key in the request header
         * or it will be ignored
         */
        active?: boolean;
        approved?: boolean;
        user_fields?: {
            1?: boolean;
            [key: string]: unknown | boolean | undefined;
        };
        external_ids?: {
            [key: string]: unknown;
        };
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path?: never;
    query?: never;
    url: '/users.json';
};

export type CreateUserResponses = {
    /**
     * user created
     */
    200: {
        success: boolean;
        active: boolean;
        message: string;
        user_id?: number;
    };
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type GetUserData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        username: string;
    };
    query?: never;
    url: '/u/{username}.json';
};

export type GetUserResponses = {
    /**
     * user with primary group response
     */
    200: {
        user_badges: Array<unknown>;
        user: {
            id: number;
            username: string;
            name: string;
            avatar_template: string;
            last_posted_at: string | null;
            last_seen_at: string | null;
            created_at: string;
            ignored: boolean;
            muted: boolean;
            can_ignore_user: boolean;
            can_ignore_users?: boolean;
            can_mute_user: boolean;
            can_mute_users?: boolean;
            can_send_private_messages: boolean;
            can_send_private_message_to_user: boolean;
            trust_level: number;
            moderator: boolean;
            admin: boolean;
            title: string | null;
            badge_count: number;
            second_factor_backup_enabled?: boolean;
            user_fields?: {
                1: string | null;
                2: string | null;
            };
            custom_fields: {
                first_name?: string | null;
            };
            time_read: number;
            recent_time_read: number;
            primary_group_id: number | null;
            primary_group_name: string | null;
            flair_group_id: number | null;
            flair_name: string | null;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            featured_topic: string | null;
            staged: boolean;
            can_edit: boolean;
            can_edit_username: boolean;
            can_edit_email: boolean;
            can_edit_name: boolean;
            uploaded_avatar_id: number | null;
            has_title_badges: boolean;
            pending_count: number;
            pending_posts_count?: number;
            profile_view_count: number;
            second_factor_enabled: boolean;
            can_upload_profile_header: boolean;
            can_upload_user_card_background: boolean;
            post_count: number;
            can_be_deleted: boolean;
            can_delete_all_posts: boolean;
            locale: string | null;
            muted_category_ids: Array<unknown>;
            regular_category_ids: Array<unknown>;
            watched_tags: Array<unknown>;
            watching_first_post_tags: Array<unknown>;
            tracked_tags: Array<unknown>;
            muted_tags: Array<unknown>;
            tracked_category_ids: Array<unknown>;
            watched_category_ids: Array<unknown>;
            watched_first_post_category_ids: Array<unknown>;
            system_avatar_upload_id: string | null;
            system_avatar_template: string;
            muted_usernames: Array<unknown>;
            ignored_usernames: Array<unknown>;
            allowed_pm_usernames: Array<unknown>;
            mailing_list_posts_per_day: number;
            can_change_bio: boolean;
            can_change_location: boolean;
            can_change_website: boolean;
            can_change_tracking_preferences: boolean;
            user_api_keys: string | null;
            user_passkeys?: Array<unknown>;
            sidebar_tags?: Array<unknown>;
            sidebar_category_ids?: Array<unknown>;
            display_sidebar_tags?: boolean;
            can_pick_theme_with_custom_homepage?: boolean;
            user_auth_tokens: Array<{
                id: number;
                client_ip: string;
                location: string;
                browser: string;
                device: string;
                os: string;
                icon: string;
                created_at: string;
                seen_at: string;
                is_active: boolean;
            }>;
            user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
            };
            use_logo_small_as_avatar: boolean;
            featured_user_badge_ids: Array<unknown>;
            invited_by: string | null;
            groups: Array<{
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: string | null;
                grant_trust_level: string | null;
                incoming_email: string | null;
                has_messages: boolean;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
                bio_raw: string | null;
                bio_cooked: string | null;
                bio_excerpt: string | null;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: string | null;
                default_notification_level: number;
                membership_request_template: string | null;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                publish_read_state: boolean;
            }>;
            group_users: Array<{
                group_id: number;
                user_id: number;
                notification_level: number;
                owner?: boolean;
            }>;
            user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                bookmark_auto_delete_preference?: number;
                color_scheme_id: string | null;
                dark_scheme_id: string | null;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_smart_lists: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: Array<unknown>;
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: string | null;
                hide_profile_and_presence: boolean;
                hide_profile: boolean;
                hide_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: string | null;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: string | null;
                sidebar_link_to_filtered_list?: boolean;
                sidebar_show_count_of_new_items?: boolean;
                watched_precedence_over_muted?: boolean | null;
                seen_popups?: Array<unknown> | null;
                topics_unread_when_closed: boolean;
            };
        };
    };
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body?: {
        name?: string;
        external_ids?: {
            [key: string]: unknown;
        };
    };
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        username: string;
    };
    query?: never;
    url: '/u/{username}.json';
};

export type UpdateUserResponses = {
    /**
     * user updated
     */
    200: {
        success: string;
        user: {
            [key: string]: unknown;
        };
    };
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type GetUserExternalIdData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        external_id: string;
    };
    query?: never;
    url: '/u/by-external/{external_id}.json';
};

export type GetUserExternalIdResponses = {
    /**
     * user response
     */
    200: {
        user_badges: Array<unknown>;
        user: {
            id: number;
            username: string;
            name: string;
            avatar_template: string;
            last_posted_at: string | null;
            last_seen_at: string | null;
            created_at: string;
            ignored: boolean;
            muted: boolean;
            can_ignore_user: boolean;
            can_ignore_users?: boolean;
            can_mute_user: boolean;
            can_mute_users?: boolean;
            can_send_private_messages: boolean;
            can_send_private_message_to_user: boolean;
            trust_level: number;
            moderator: boolean;
            admin: boolean;
            title: string | null;
            badge_count: number;
            second_factor_backup_enabled?: boolean;
            user_fields?: {
                1: string | null;
                2: string | null;
            };
            custom_fields: {
                first_name?: string | null;
            };
            time_read: number;
            recent_time_read: number;
            primary_group_id: number | null;
            primary_group_name: string | null;
            flair_group_id: number | null;
            flair_name: string | null;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            featured_topic: string | null;
            staged: boolean;
            can_edit: boolean;
            can_edit_username: boolean;
            can_edit_email: boolean;
            can_edit_name: boolean;
            uploaded_avatar_id: number | null;
            has_title_badges: boolean;
            pending_count: number;
            pending_posts_count?: number;
            profile_view_count: number;
            second_factor_enabled: boolean;
            can_upload_profile_header: boolean;
            can_upload_user_card_background: boolean;
            post_count: number;
            can_be_deleted: boolean;
            can_delete_all_posts: boolean;
            locale: string | null;
            muted_category_ids: Array<unknown>;
            regular_category_ids: Array<unknown>;
            watched_tags: Array<unknown>;
            watching_first_post_tags: Array<unknown>;
            tracked_tags: Array<unknown>;
            muted_tags: Array<unknown>;
            tracked_category_ids: Array<unknown>;
            watched_category_ids: Array<unknown>;
            watched_first_post_category_ids: Array<unknown>;
            system_avatar_upload_id: string | null;
            system_avatar_template: string;
            muted_usernames: Array<unknown>;
            ignored_usernames: Array<unknown>;
            allowed_pm_usernames: Array<unknown>;
            mailing_list_posts_per_day: number;
            can_change_bio: boolean;
            can_change_location: boolean;
            can_change_website: boolean;
            can_change_tracking_preferences: boolean;
            user_api_keys: string | null;
            user_passkeys?: Array<unknown>;
            sidebar_tags?: Array<unknown>;
            sidebar_category_ids?: Array<unknown>;
            display_sidebar_tags?: boolean;
            can_pick_theme_with_custom_homepage?: boolean;
            user_auth_tokens: Array<{
                id: number;
                client_ip: string;
                location: string;
                browser: string;
                device: string;
                os: string;
                icon: string;
                created_at: string;
                seen_at: string;
                is_active: boolean;
            }>;
            user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
            };
            use_logo_small_as_avatar: boolean;
            featured_user_badge_ids: Array<unknown>;
            invited_by: string | null;
            groups: Array<{
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: string | null;
                grant_trust_level: string | null;
                incoming_email: string | null;
                has_messages: boolean;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
                bio_raw: string | null;
                bio_cooked: string | null;
                bio_excerpt: string | null;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: string | null;
                default_notification_level: number;
                membership_request_template: string | null;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                publish_read_state: boolean;
            }>;
            group_users: Array<{
                group_id: number;
                user_id: number;
                notification_level: number;
                owner?: boolean;
            }>;
            user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                bookmark_auto_delete_preference?: number;
                color_scheme_id: string | null;
                dark_scheme_id: string | null;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_smart_lists: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: Array<unknown>;
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: string | null;
                hide_profile_and_presence: boolean;
                hide_profile: boolean;
                hide_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: string | null;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: string | null;
                sidebar_link_to_filtered_list?: boolean;
                sidebar_show_count_of_new_items?: boolean;
                watched_precedence_over_muted?: boolean | null;
                seen_popups?: Array<unknown> | null;
                topics_unread_when_closed: boolean;
            };
        };
    };
};

export type GetUserExternalIdResponse = GetUserExternalIdResponses[keyof GetUserExternalIdResponses];

export type GetUserIdentiyProviderExternalIdData = {
    body?: never;
    headers: {
        'Api-Key': string;
        'Api-Username': string;
    };
    path: {
        /**
         * Authentication provider name. Can be found in the provider callback
         * URL: `/auth/{provider}/callback`
         */
        provider: string;
        external_id: string;
    };
    query?: never;
    url: '/u/by-external/{provider}/{external_id}.json';
};

export type GetUserIdentiyProviderExternalIdResponses = {
    /**
     * user response
     */
    200: {
        user_badges: Array<unknown>;
        user: {
            id: number;
            username: string;
            name: string;
            avatar_template: string;
            last_posted_at: string | null;
            last_seen_at: string | null;
            created_at: string;
            ignored: boolean;
            muted: boolean;
            can_ignore_user: boolean;
            can_ignore_users?: boolean;
            can_mute_user: boolean;
            can_mute_users?: boolean;
            can_send_private_messages: boolean;
            can_send_private_message_to_user: boolean;
            trust_level: number;
            moderator: boolean;
            admin: boolean;
            title: string | null;
            badge_count: number;
            second_factor_backup_enabled?: boolean;
            user_fields?: {
                1: string | null;
                2: string | null;
            };
            custom_fields: {
                first_name?: string | null;
            };
            time_read: number;
            recent_time_read: number;
            primary_group_id: number | null;
            primary_group_name: string | null;
            flair_group_id: number | null;
            flair_name: string | null;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            featured_topic: string | null;
            staged: boolean;
            can_edit: boolean;
            can_edit_username: boolean;
            can_edit_email: boolean;
            can_edit_name: boolean;
            uploaded_avatar_id: number | null;
            has_title_badges: boolean;
            pending_count: number;
            pending_posts_count?: number;
            profile_view_count: number;
            second_factor_enabled: boolean;
            can_upload_profile_header: boolean;
            can_upload_user_card_background: boolean;
            post_count: number;
            can_be_deleted: boolean;
            can_delete_all_posts: boolean;
            locale: string | null;
            muted_category_ids: Array<unknown>;
            regular_category_ids: Array<unknown>;
            watched_tags: Array<unknown>;
            watching_first_post_tags: Array<unknown>;
            tracked_tags: Array<unknown>;
            muted_tags: Array<unknown>;
            tracked_category_ids: Array<unknown>;
            watched_category_ids: Array<unknown>;
            watched_first_post_category_ids: Array<unknown>;
            system_avatar_upload_id: string | null;
            system_avatar_template: string;
            muted_usernames: Array<unknown>;
            ignored_usernames: Array<unknown>;
            allowed_pm_usernames: Array<unknown>;
            mailing_list_posts_per_day: number;
            can_change_bio: boolean;
            can_change_location: boolean;
            can_change_website: boolean;
            can_change_tracking_preferences: boolean;
            user_api_keys: string | null;
            user_passkeys?: Array<unknown>;
            sidebar_tags?: Array<unknown>;
            sidebar_category_ids?: Array<unknown>;
            display_sidebar_tags?: boolean;
            can_pick_theme_with_custom_homepage?: boolean;
            user_auth_tokens: Array<{
                id: number;
                client_ip: string;
                location: string;
                browser: string;
                device: string;
                os: string;
                icon: string;
                created_at: string;
                seen_at: string;
                is_active: boolean;
            }>;
            user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
            };
            use_logo_small_as_avatar: boolean;
            featured_user_badge_ids: Array<unknown>;
            invited_by: string | null;
            groups: Array<{
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: string | null;
                grant_trust_level: string | null;
                incoming_email: string | null;
                has_messages: boolean;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
                bio_raw: string | null;
                bio_cooked: string | null;
                bio_excerpt: string | null;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: string | null;
                default_notification_level: number;
                membership_request_template: string | null;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                publish_read_state: boolean;
            }>;
            group_users: Array<{
                group_id: number;
                user_id: number;
                notification_level: number;
                owner?: boolean;
            }>;
            user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                bookmark_auto_delete_preference?: number;
                color_scheme_id: string | null;
                dark_scheme_id: string | null;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_smart_lists: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: Array<unknown>;
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: string | null;
                hide_profile_and_presence: boolean;
                hide_profile: boolean;
                hide_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: string | null;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: string | null;
                sidebar_link_to_filtered_list?: boolean;
                sidebar_show_count_of_new_items?: boolean;
                watched_precedence_over_muted?: boolean | null;
                seen_popups?: Array<unknown> | null;
                topics_unread_when_closed: boolean;
            };
        };
    };
};

export type GetUserIdentiyProviderExternalIdResponse = GetUserIdentiyProviderExternalIdResponses[keyof GetUserIdentiyProviderExternalIdResponses];

export type UpdateAvatarData = {
    body?: {
        upload_id: number;
        type: 'uploaded' | 'custom' | 'gravatar' | 'system';
    };
    path: {
        username: string;
    };
    query?: never;
    url: '/u/{username}/preferences/avatar/pick.json';
};

export type UpdateAvatarResponses = {
    /**
     * avatar updated
     */
    200: {
        success: string;
    };
};

export type UpdateAvatarResponse = UpdateAvatarResponses[keyof UpdateAvatarResponses];

export type UpdateEmailData = {
    body?: {
        email: string;
    };
    path: {
        username: string;
    };
    query?: never;
    url: '/u/{username}/preferences/email.json';
};

export type UpdateEmailResponses = {
    /**
     * email updated
     */
    200: unknown;
};

export type UpdateUsernameData = {
    body?: {
        new_username: string;
    };
    path: {
        username: string;
    };
    query?: never;
    url: '/u/{username}/preferences/username.json';
};

export type UpdateUsernameResponses = {
    /**
     * username updated
     */
    200: unknown;
};

export type ListUsersPublicData = {
    body?: never;
    path?: never;
    query: {
        period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'all';
        order: 'likes_received' | 'likes_given' | 'topic_count' | 'post_count' | 'topics_entered' | 'posts_read' | 'days_visited';
        asc?: 'true';
        page?: number;
    };
    url: '/directory_items.json';
};

export type ListUsersPublicResponses = {
    /**
     * directory items response
     */
    200: {
        directory_items: Array<{
            id: number;
            likes_received: number;
            likes_given: number;
            topics_entered: number;
            topic_count: number;
            post_count: number;
            posts_read: number;
            days_visited: number;
            user: {
                id: number;
                username: string;
                name: string | null;
                avatar_template: string;
                title: string | null;
            };
        }>;
        meta: {
            last_updated_at: string | null;
            total_rows_directory_items: number;
            load_more_directory_items: string;
        };
    };
};

export type ListUsersPublicResponse = ListUsersPublicResponses[keyof ListUsersPublicResponses];

export type DeleteUserData = {
    body?: {
        delete_posts?: boolean;
        block_email?: boolean;
        block_urls?: boolean;
        block_ip?: boolean;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}.json';
};

export type DeleteUserResponses = {
    /**
     * response
     */
    200: {
        deleted: boolean;
    };
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type AdminGetUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}.json';
};

export type AdminGetUserResponses = {
    /**
     * response
     */
    200: {
        id: number;
        username: string;
        name: string | null;
        avatar_template: string;
        active: boolean;
        admin: boolean;
        moderator: boolean;
        last_seen_at: string | null;
        last_emailed_at: string | null;
        created_at: string;
        last_seen_age: number | null;
        last_emailed_age: number | null;
        created_at_age: number | null;
        trust_level: number;
        manual_locked_trust_level: string | null;
        title: string | null;
        time_read: number;
        staged: boolean;
        days_visited: number;
        posts_read_count: number;
        topics_entered: number;
        post_count: number;
        associated_accounts?: Array<unknown>;
        can_send_activation_email: boolean;
        can_activate: boolean;
        can_deactivate: boolean;
        ip_address: string;
        registration_ip_address: string | null;
        can_grant_admin: boolean;
        can_revoke_admin: boolean;
        can_grant_moderation: boolean;
        can_revoke_moderation: boolean;
        can_impersonate: boolean;
        like_count: number;
        like_given_count: number;
        topic_count: number;
        flags_given_count: number;
        flags_received_count: number;
        private_topics_count: number;
        can_delete_all_posts: boolean;
        can_be_deleted?: boolean;
        can_be_anonymized: boolean;
        can_be_merged: boolean;
        full_suspend_reason: string | null;
        latest_export?: {
            [key: string]: unknown;
        } | null;
        silence_reason?: string | null;
        post_edits_count?: number | null;
        primary_group_id: number | null;
        badge_count: number;
        warnings_received_count: number;
        bounce_score: number | null;
        reset_bounce_score_after: string | null;
        can_view_action_logs: boolean;
        can_disable_second_factor: boolean;
        can_delete_sso_record: boolean;
        api_key_count: number;
        similar_users_count?: number;
        single_sign_on_record: string | null;
        approved_by: {
            id: number;
            username: string;
            name: string;
            avatar_template: string;
        } | null;
        suspended_by: string | null;
        silenced_by: string | null;
        penalty_counts?: {
            silenced: number;
            suspended: number;
        };
        next_penalty?: string;
        tl3_requirements?: {
            time_period: number;
            requirements_met: boolean;
            requirements_lost: boolean;
            trust_level_locked: boolean;
            on_grace_period: boolean;
            days_visited: number;
            min_days_visited: number;
            num_topics_replied_to: number;
            min_topics_replied_to: number;
            topics_viewed: number;
            min_topics_viewed: number;
            posts_read: number;
            min_posts_read: number;
            topics_viewed_all_time: number;
            min_topics_viewed_all_time: number;
            posts_read_all_time: number;
            min_posts_read_all_time: number;
            num_flagged_posts: number;
            max_flagged_posts: number;
            num_flagged_by_users: number;
            max_flagged_by_users: number;
            num_likes_given: number;
            min_likes_given: number;
            num_likes_received: number;
            min_likes_received: number;
            num_likes_received_days: number;
            min_likes_received_days: number;
            num_likes_received_users: number;
            min_likes_received_users: number;
            penalty_counts: {
                silenced: number;
                suspended: number;
                total: number;
            };
        };
        groups: Array<{
            id: number;
            automatic: boolean;
            name: string;
            display_name: string;
            user_count: number;
            mentionable_level: number;
            messageable_level: number;
            visibility_level: number;
            primary_group: boolean;
            title: string | null;
            grant_trust_level: string | null;
            incoming_email: string | null;
            has_messages: boolean;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            flair_group_id?: number | null;
            bio_raw: string | null;
            bio_cooked: string | null;
            bio_excerpt: string | null;
            public_admission: boolean;
            public_exit: boolean;
            allow_membership_requests: boolean;
            full_name: string | null;
            default_notification_level: number;
            membership_request_template: string | null;
            members_visibility_level: number;
            can_see_members: boolean;
            can_admin_group: boolean;
            publish_read_state: boolean;
        }>;
        external_ids: {
            [key: string]: unknown;
        };
    };
};

export type AdminGetUserResponse = AdminGetUserResponses[keyof AdminGetUserResponses];

export type ActivateUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}/activate.json';
};

export type ActivateUserResponses = {
    /**
     * response
     */
    200: {
        success: string;
    };
};

export type ActivateUserResponse = ActivateUserResponses[keyof ActivateUserResponses];

export type DeactivateUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}/deactivate.json';
};

export type DeactivateUserResponses = {
    /**
     * response
     */
    200: {
        success: string;
    };
};

export type DeactivateUserResponse = DeactivateUserResponses[keyof DeactivateUserResponses];

export type SuspendUserData = {
    body?: {
        suspend_until: string;
        reason: string;
        /**
         * Will send an email with this message when present
         */
        message?: string;
        post_action?: string;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}/suspend.json';
};

export type SuspendUserResponses = {
    /**
     * response
     */
    200: {
        suspension: {
            suspend_reason: string;
            full_suspend_reason: string;
            suspended_till: string;
            suspended_at: string;
            suspended_by: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
            };
        };
    };
};

export type SuspendUserResponse = SuspendUserResponses[keyof SuspendUserResponses];

export type SilenceUserData = {
    body?: {
        silenced_till: string;
        reason: string;
        /**
         * Will send an email with this message when present
         */
        message?: string;
        post_action?: string;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}/silence.json';
};

export type SilenceUserResponses = {
    /**
     * response
     */
    200: {
        silence: {
            silenced: boolean;
            silence_reason: string;
            silenced_till: string;
            silenced_at: string;
            silenced_by: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
            };
        };
    };
};

export type SilenceUserResponse = SilenceUserResponses[keyof SilenceUserResponses];

export type AnonymizeUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}/anonymize.json';
};

export type AnonymizeUserResponses = {
    /**
     * response
     */
    200: {
        success: string;
        username: string;
    };
};

export type AnonymizeUserResponse = AnonymizeUserResponses[keyof AnonymizeUserResponses];

export type LogOutUserData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/admin/users/{id}/log_out.json';
};

export type LogOutUserResponses = {
    /**
     * response
     */
    200: {
        success: string;
    };
};

export type LogOutUserResponse = LogOutUserResponses[keyof LogOutUserResponses];

export type RefreshGravatarData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/user_avatar/{username}/refresh_gravatar.json';
};

export type RefreshGravatarResponses = {
    /**
     * response
     */
    200: {
        gravatar_upload_id: number | null;
        gravatar_avatar_template: string | null;
    };
};

export type RefreshGravatarResponse = RefreshGravatarResponses[keyof RefreshGravatarResponses];

export type AdminListUsersData = {
    body?: never;
    path: {
        flag: 'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect';
    };
    query?: {
        order?: 'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time';
        asc?: 'true';
        page?: number;
        /**
         * Include user email addresses in response. These requests will
         * be logged in the staff action logs.
         */
        show_emails?: boolean;
        /**
         * Include user stats information
         */
        stats?: boolean;
        /**
         * Filter to the user with this email address
         */
        email?: string;
        /**
         * Filter to users with this IP address
         */
        ip?: string;
    };
    url: '/admin/users/list/{flag}.json';
};

export type AdminListUsersResponses = {
    /**
     * response
     */
    200: Array<{
        id: number;
        username: string;
        name: string | null;
        avatar_template: string;
        email?: string;
        secondary_emails?: Array<unknown>;
        active: boolean;
        admin: boolean;
        moderator: boolean;
        last_seen_at: string | null;
        last_emailed_at: string | null;
        created_at: string;
        last_seen_age: number | null;
        last_emailed_age: number | null;
        created_at_age: number | null;
        trust_level: number;
        manual_locked_trust_level: string | null;
        title: string | null;
        time_read: number;
        staged: boolean;
        days_visited: number;
        posts_read_count: number;
        topics_entered: number;
        post_count: number;
    }>;
};

export type AdminListUsersResponse = AdminListUsersResponses[keyof AdminListUsersResponses];

export type ListUserActionsData = {
    body?: never;
    path?: never;
    query: {
        offset: number;
        username: string;
        filter: string;
    };
    url: '/user_actions.json';
};

export type ListUserActionsResponses = {
    /**
     * response
     */
    200: {
        user_actions: Array<{
            excerpt: string;
            action_type: number;
            created_at: string;
            avatar_template: string;
            acting_avatar_template: string;
            slug: string;
            topic_id: number;
            target_user_id: number;
            target_name: string | null;
            target_username: string;
            post_number: number;
            post_id: string | null;
            username: string;
            name: string | null;
            user_id: number;
            acting_username: string;
            acting_name: string | null;
            acting_user_id: number;
            title: string;
            deleted: boolean;
            hidden: string | null;
            post_type: string | null;
            action_code: string | null;
            category_id: number;
            closed: boolean;
            archived: boolean;
        }>;
    };
};

export type ListUserActionsResponse = ListUserActionsResponses[keyof ListUserActionsResponses];

export type SendPasswordResetEmailData = {
    body?: {
        login: string;
    };
    path?: never;
    query?: never;
    url: '/session/forgot_password.json';
};

export type SendPasswordResetEmailResponses = {
    /**
     * success response
     */
    200: {
        success: string;
        user_found: boolean;
    };
};

export type SendPasswordResetEmailResponse = SendPasswordResetEmailResponses[keyof SendPasswordResetEmailResponses];

export type ChangePasswordData = {
    body?: {
        username: string;
        password: string;
    };
    path: {
        token: string;
    };
    query?: never;
    url: '/users/password-reset/{token}.json';
};

export type ChangePasswordResponses = {
    /**
     * success response
     */
    200: unknown;
};

export type GetUserEmailsData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/u/{username}/emails.json';
};

export type GetUserEmailsResponses = {
    /**
     * success response
     */
    200: {
        email: string;
        secondary_emails: Array<unknown>;
        unconfirmed_emails: Array<unknown>;
        associated_accounts: Array<unknown>;
    };
};

export type GetUserEmailsResponse = GetUserEmailsResponses[keyof GetUserEmailsResponses];

export type SendMessageData = {
    body?: {
        message?: string;
        staged_id?: string;
    };
    path: {
        channel_id: number;
    };
    query?: never;
    url: '/chat/{channel_id}';
};

export type SendMessageResponses = {
    /**
     * Message sent successfully
     */
    200: {
        success?: string;
        message_id?: number;
    };
};

export type SendMessageResponse = SendMessageResponses[keyof SendMessageResponses];

export type EditMessageData = {
    body?: {
        message?: string;
    };
    path: {
        channel_id: number;
        message_id: number;
    };
    query?: never;
    url: '/chat/api/channels/{channel_id}/messages/{message_id}';
};

export type EditMessageResponses = {
    /**
     * Message updated
     */
    200: {
        success?: string;
        message_id?: number;
    };
};

export type EditMessageResponse = EditMessageResponses[keyof EditMessageResponses];

export type GetMessagesData = {
    body?: never;
    path: {
        channel_id: number;
    };
    query?: {
        fetch_from_last_read?: boolean;
        page_size?: number;
    };
    url: '/chat/api/channels/{channel_id}/messages';
};

export type GetMessagesResponses = {
    /**
     * A page of messages
     */
    200: {
        messages?: Array<{
            id?: number;
            message?: string;
            cooked?: string;
            created_at?: Date;
            chat_channel_id?: number;
            streaming?: boolean;
            user?: {
                id?: number;
                username?: string;
                name?: string;
                avatar_template?: string;
                moderator?: boolean;
                admin?: boolean;
                staff?: boolean;
            };
            mentioned_users?: Array<{
                id?: number;
                username?: string;
                name?: string;
            }>;
            available_flags?: Array<string | null>;
            uploads?: Array<{
                [key: string]: unknown;
            }>;
            edited?: boolean;
            blocks?: Array<{
                [key: string]: unknown;
            }>;
            chat_webhook_event?: {
                [key: string]: unknown;
            } | null;
        }>;
        tracking?: {
            [key: string]: unknown;
        } | null;
        meta?: {
            [key: string]: unknown;
        } | null;
    };
};

export type GetMessagesResponse = GetMessagesResponses[keyof GetMessagesResponses];

export type ReactToMessageData = {
    body?: {
        react_action?: string;
        emoji?: string;
    };
    path: {
        channel_id: number;
        message_id: number;
    };
    query?: never;
    url: '/chat/{channel_id}/react/{message_id}';
};

export type ReactToMessageResponses = {
    /**
     * Reaction added/removed
     */
    200: {
        success?: string;
    };
};

export type ReactToMessageResponse = ReactToMessageResponses[keyof ReactToMessageResponses];

export type GetUserCardData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/u/{username}/card.json';
};

export type GetUserCardResponses = {
    /**
     * User card with badges & metadata
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetUserCardResponse = GetUserCardResponses[keyof GetUserCardResponses];

export type GetSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/session/current.json';
};

export type GetSessionResponses = {
    /**
     * Authenticated User Session Data
     */
    200: {
        current_user?: {
            id: number;
            username: string;
            name: string;
            avatar_template: string;
            last_posted_at: string | null;
            last_seen_at: string | null;
            created_at: string;
            ignored: boolean;
            muted: boolean;
            can_ignore_user: boolean;
            can_ignore_users?: boolean;
            can_mute_user: boolean;
            can_mute_users?: boolean;
            can_send_private_messages: boolean;
            can_send_private_message_to_user: boolean;
            trust_level: number;
            moderator: boolean;
            admin: boolean;
            title: string | null;
            badge_count: number;
            second_factor_backup_enabled?: boolean;
            user_fields?: {
                1: string | null;
                2: string | null;
            };
            custom_fields: {
                first_name?: string | null;
            };
            time_read: number;
            recent_time_read: number;
            primary_group_id: number | null;
            primary_group_name: string | null;
            flair_group_id: number | null;
            flair_name: string | null;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            featured_topic: string | null;
            staged: boolean;
            can_edit: boolean;
            can_edit_username: boolean;
            can_edit_email: boolean;
            can_edit_name: boolean;
            uploaded_avatar_id: number | null;
            has_title_badges: boolean;
            pending_count: number;
            pending_posts_count?: number;
            profile_view_count: number;
            second_factor_enabled: boolean;
            can_upload_profile_header: boolean;
            can_upload_user_card_background: boolean;
            post_count: number;
            can_be_deleted: boolean;
            can_delete_all_posts: boolean;
            locale: string | null;
            muted_category_ids: Array<unknown>;
            regular_category_ids: Array<unknown>;
            watched_tags: Array<unknown>;
            watching_first_post_tags: Array<unknown>;
            tracked_tags: Array<unknown>;
            muted_tags: Array<unknown>;
            tracked_category_ids: Array<unknown>;
            watched_category_ids: Array<unknown>;
            watched_first_post_category_ids: Array<unknown>;
            system_avatar_upload_id: string | null;
            system_avatar_template: string;
            muted_usernames: Array<unknown>;
            ignored_usernames: Array<unknown>;
            allowed_pm_usernames: Array<unknown>;
            mailing_list_posts_per_day: number;
            can_change_bio: boolean;
            can_change_location: boolean;
            can_change_website: boolean;
            can_change_tracking_preferences: boolean;
            user_api_keys: string | null;
            user_passkeys?: Array<unknown>;
            sidebar_tags?: Array<unknown>;
            sidebar_category_ids?: Array<unknown>;
            display_sidebar_tags?: boolean;
            can_pick_theme_with_custom_homepage?: boolean;
            user_auth_tokens: Array<{
                id: number;
                client_ip: string;
                location: string;
                browser: string;
                device: string;
                os: string;
                icon: string;
                created_at: string;
                seen_at: string;
                is_active: boolean;
            }>;
            user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
            };
            use_logo_small_as_avatar: boolean;
            featured_user_badge_ids: Array<unknown>;
            invited_by: string | null;
            groups: Array<{
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: string | null;
                grant_trust_level: string | null;
                incoming_email: string | null;
                has_messages: boolean;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
                bio_raw: string | null;
                bio_cooked: string | null;
                bio_excerpt: string | null;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: string | null;
                default_notification_level: number;
                membership_request_template: string | null;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                publish_read_state: boolean;
            }>;
            group_users: Array<{
                group_id: number;
                user_id: number;
                notification_level: number;
                owner?: boolean;
            }>;
            user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                bookmark_auto_delete_preference?: number;
                color_scheme_id: string | null;
                dark_scheme_id: string | null;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_smart_lists: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: Array<unknown>;
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: string | null;
                hide_profile_and_presence: boolean;
                hide_profile: boolean;
                hide_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: string | null;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: string | null;
                sidebar_link_to_filtered_list?: boolean;
                sidebar_show_count_of_new_items?: boolean;
                watched_precedence_over_muted?: boolean | null;
                seen_popups?: Array<unknown> | null;
                topics_unread_when_closed: boolean;
            };
        };
    };
};

export type GetSessionResponse = GetSessionResponses[keyof GetSessionResponses];

export type ClientOptions = {
    baseUrl: 'https://{defaultHost}' | (string & {});
};