// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zGetBackupsResponse = z.array(z.object({
    filename: z.string(),
    size: z.number().int(),
    last_modified: z.string()
})).min(1);

export const zCreateBackupResponse = z.object({
    success: z.string()
});

export const zAdminListBadgesResponse = z.object({
    badges: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        description: z.string(),
        grant_count: z.number().int(),
        allow_title: z.boolean(),
        multiple_grant: z.boolean(),
        icon: z.string(),
        image_url: z.union([
            z.string(),
            z.null()
        ]),
        listable: z.boolean(),
        enabled: z.boolean(),
        badge_grouping_id: z.number().int(),
        system: z.boolean(),
        long_description: z.string(),
        slug: z.string(),
        manually_grantable: z.boolean(),
        query: z.union([
            z.string(),
            z.null()
        ]),
        trigger: z.union([
            z.number().int(),
            z.null()
        ]),
        target_posts: z.boolean(),
        auto_revoke: z.boolean(),
        show_posts: z.boolean(),
        i18n_name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        image_upload_id: z.union([
            z.number().int(),
            z.null()
        ]),
        badge_type_id: z.number().int(),
        show_in_post_header: z.boolean()
    })),
    badge_types: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        sort_order: z.number().int()
    })),
    badge_groupings: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        position: z.number().int(),
        system: z.boolean()
    })),
    admin_badges: z.object({
        protected_system_fields: z.array(z.unknown()),
        triggers: z.object({
            user_change: z.number().int(),
            none: z.number().int(),
            post_revision: z.number().int(),
            trust_level_change: z.number().int(),
            post_action: z.number().int()
        }),
        badge_ids: z.array(z.unknown()),
        badge_grouping_ids: z.array(z.unknown()),
        badge_type_ids: z.array(z.unknown())
    })
});

export const zCreateBadgeResponse = z.object({
    badge_types: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        sort_order: z.number().int()
    })),
    badge: z.object({
        id: z.number().int(),
        name: z.string(),
        description: z.string(),
        grant_count: z.number().int(),
        allow_title: z.boolean(),
        multiple_grant: z.boolean(),
        icon: z.string(),
        image_url: z.union([
            z.string(),
            z.null()
        ]),
        image_upload_id: z.union([
            z.number().int(),
            z.null()
        ]),
        listable: z.boolean(),
        enabled: z.boolean(),
        badge_grouping_id: z.number().int(),
        system: z.boolean(),
        long_description: z.string(),
        slug: z.string(),
        manually_grantable: z.boolean(),
        query: z.union([
            z.string(),
            z.null()
        ]),
        trigger: z.union([
            z.string(),
            z.null()
        ]),
        target_posts: z.boolean(),
        auto_revoke: z.boolean(),
        show_posts: z.boolean(),
        badge_type_id: z.number().int(),
        show_in_post_header: z.boolean()
    })
});

export const zUpdateBadgeResponse = z.object({
    badge_types: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        sort_order: z.number().int()
    })),
    badge: z.object({
        id: z.number().int(),
        name: z.string(),
        description: z.string(),
        grant_count: z.number().int(),
        allow_title: z.boolean(),
        multiple_grant: z.boolean(),
        icon: z.string(),
        image_url: z.union([
            z.string(),
            z.null()
        ]),
        image_upload_id: z.union([
            z.number().int(),
            z.null()
        ]),
        listable: z.boolean(),
        enabled: z.boolean(),
        badge_grouping_id: z.number().int(),
        system: z.boolean(),
        long_description: z.string(),
        slug: z.string(),
        manually_grantable: z.boolean(),
        query: z.union([
            z.string(),
            z.null()
        ]),
        trigger: z.union([
            z.string(),
            z.null()
        ]),
        target_posts: z.boolean(),
        auto_revoke: z.boolean(),
        show_posts: z.boolean(),
        badge_type_id: z.number().int(),
        show_in_post_header: z.boolean()
    })
});

export const zListCategoriesResponse = z.object({
    category_list: z.object({
        can_create_category: z.boolean(),
        can_create_topic: z.boolean(),
        categories: z.array(z.object({
            id: z.number().int(),
            name: z.string(),
            color: z.string(),
            text_color: z.string(),
            slug: z.string(),
            topic_count: z.number().int(),
            post_count: z.number().int(),
            position: z.number().int(),
            description: z.union([
                z.string(),
                z.null()
            ]),
            description_text: z.union([
                z.string(),
                z.null()
            ]),
            description_excerpt: z.union([
                z.string(),
                z.null()
            ]),
            topic_url: z.union([
                z.string(),
                z.null()
            ]),
            read_restricted: z.boolean(),
            permission: z.number().int(),
            notification_level: z.number().int(),
            can_edit: z.boolean(),
            topic_template: z.union([
                z.string(),
                z.null()
            ]),
            has_children: z.boolean(),
            subcategory_count: z.union([
                z.number().int(),
                z.null()
            ]),
            sort_order: z.union([
                z.string(),
                z.null()
            ]),
            sort_ascending: z.union([
                z.string(),
                z.null()
            ]),
            show_subcategory_list: z.boolean(),
            num_featured_topics: z.number().int(),
            default_view: z.union([
                z.string(),
                z.null()
            ]),
            subcategory_list_style: z.string(),
            default_top_period: z.string(),
            default_list_filter: z.string(),
            minimum_required_tags: z.number().int(),
            navigate_to_first_post_after_read: z.boolean(),
            topics_day: z.number().int(),
            topics_week: z.number().int(),
            topics_month: z.number().int(),
            topics_year: z.number().int(),
            topics_all_time: z.number().int(),
            is_uncategorized: z.boolean().optional(),
            subcategory_ids: z.array(z.unknown()),
            subcategory_list: z.union([
                z.array(z.unknown()),
                z.null()
            ]).optional(),
            uploaded_logo: z.union([
                z.string(),
                z.null()
            ]),
            uploaded_logo_dark: z.union([
                z.string(),
                z.null()
            ]),
            uploaded_background: z.union([
                z.string(),
                z.null()
            ]),
            uploaded_background_dark: z.union([
                z.string(),
                z.null()
            ])
        }))
    })
});

export const zCreateCategoryResponse = z.object({
    category: z.object({
        id: z.number().int(),
        name: z.string(),
        color: z.string(),
        text_color: z.string(),
        slug: z.string(),
        topic_count: z.number().int(),
        post_count: z.number().int(),
        position: z.number().int(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        description_text: z.union([
            z.string(),
            z.null()
        ]),
        description_excerpt: z.union([
            z.string(),
            z.null()
        ]),
        topic_url: z.union([
            z.string(),
            z.null()
        ]),
        read_restricted: z.boolean(),
        permission: z.union([
            z.number().int(),
            z.null()
        ]),
        notification_level: z.number().int(),
        can_edit: z.boolean(),
        topic_template: z.union([
            z.string(),
            z.null()
        ]),
        form_template_ids: z.array(z.unknown()).optional(),
        has_children: z.union([
            z.boolean(),
            z.null()
        ]),
        subcategory_count: z.union([
            z.number().int(),
            z.null()
        ]),
        sort_order: z.union([
            z.string(),
            z.null()
        ]),
        sort_ascending: z.union([
            z.string(),
            z.null()
        ]),
        show_subcategory_list: z.boolean(),
        num_featured_topics: z.number().int(),
        default_view: z.union([
            z.string(),
            z.null()
        ]),
        subcategory_list_style: z.string(),
        default_top_period: z.string(),
        default_list_filter: z.string(),
        minimum_required_tags: z.number().int(),
        navigate_to_first_post_after_read: z.boolean(),
        custom_fields: z.object({}),
        allowed_tags: z.array(z.unknown()).optional(),
        allowed_tag_groups: z.array(z.unknown()).optional(),
        allow_global_tags: z.boolean().optional(),
        required_tag_groups: z.array(z.object({
            name: z.string(),
            min_count: z.number().int()
        })),
        category_setting: z.unknown().optional(),
        read_only_banner: z.union([
            z.string(),
            z.null()
        ]),
        available_groups: z.array(z.unknown()),
        auto_close_hours: z.union([
            z.string(),
            z.null()
        ]),
        auto_close_based_on_last_post: z.boolean(),
        allow_unlimited_owner_edits_on_first_post: z.boolean(),
        default_slow_mode_seconds: z.union([
            z.string(),
            z.null()
        ]),
        group_permissions: z.array(z.object({
            permission_type: z.number().int(),
            group_name: z.string()
        })),
        email_in: z.union([
            z.string(),
            z.null()
        ]),
        email_in_allow_strangers: z.boolean(),
        mailinglist_mirror: z.boolean(),
        all_topics_wiki: z.boolean(),
        can_delete: z.boolean(),
        allow_badges: z.boolean(),
        topic_featured_link_allowed: z.boolean(),
        search_priority: z.number().int(),
        uploaded_logo: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_logo_dark: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background_dark: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zUpdateCategoryResponse = z.object({
    success: z.string(),
    category: z.object({
        id: z.number().int(),
        name: z.string(),
        color: z.string(),
        text_color: z.string(),
        slug: z.string(),
        topic_count: z.number().int(),
        post_count: z.number().int(),
        position: z.number().int(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        description_text: z.union([
            z.string(),
            z.null()
        ]),
        description_excerpt: z.union([
            z.string(),
            z.null()
        ]),
        topic_url: z.union([
            z.string(),
            z.null()
        ]),
        read_restricted: z.boolean(),
        permission: z.union([
            z.number().int(),
            z.null()
        ]),
        notification_level: z.number().int(),
        can_edit: z.boolean(),
        topic_template: z.union([
            z.string(),
            z.null()
        ]),
        form_template_ids: z.array(z.unknown()),
        has_children: z.union([
            z.boolean(),
            z.null()
        ]),
        subcategory_count: z.union([
            z.number().int(),
            z.null()
        ]),
        sort_order: z.union([
            z.string(),
            z.null()
        ]),
        sort_ascending: z.union([
            z.string(),
            z.null()
        ]),
        show_subcategory_list: z.boolean(),
        num_featured_topics: z.number().int(),
        default_view: z.union([
            z.string(),
            z.null()
        ]),
        subcategory_list_style: z.string(),
        default_top_period: z.string(),
        default_list_filter: z.string(),
        minimum_required_tags: z.number().int(),
        navigate_to_first_post_after_read: z.boolean(),
        custom_fields: z.object({}),
        allowed_tags: z.array(z.unknown()).optional(),
        allowed_tag_groups: z.array(z.unknown()).optional(),
        allow_global_tags: z.boolean().optional(),
        required_tag_groups: z.array(z.object({
            name: z.string(),
            min_count: z.number().int()
        })),
        category_setting: z.unknown().optional(),
        read_only_banner: z.union([
            z.string(),
            z.null()
        ]),
        available_groups: z.array(z.unknown()),
        auto_close_hours: z.union([
            z.string(),
            z.null()
        ]),
        auto_close_based_on_last_post: z.boolean(),
        allow_unlimited_owner_edits_on_first_post: z.boolean(),
        default_slow_mode_seconds: z.union([
            z.string(),
            z.null()
        ]),
        group_permissions: z.array(z.object({
            permission_type: z.number().int(),
            group_name: z.string()
        })),
        email_in: z.union([
            z.string(),
            z.null()
        ]),
        email_in_allow_strangers: z.boolean(),
        mailinglist_mirror: z.boolean(),
        all_topics_wiki: z.boolean(),
        can_delete: z.boolean(),
        allow_badges: z.boolean(),
        topic_featured_link_allowed: z.boolean(),
        search_priority: z.number().int(),
        uploaded_logo: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_logo_dark: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background_dark: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zListCategoryTopicsResponse = z.object({
    users: z.array(z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string()
    })).optional(),
    primary_groups: z.array(z.unknown()).optional(),
    topic_list: z.object({
        can_create_topic: z.boolean(),
        per_page: z.number().int(),
        top_tags: z.array(z.unknown()).optional(),
        topics: z.array(z.object({
            id: z.number().int(),
            title: z.string(),
            fancy_title: z.string(),
            slug: z.string(),
            posts_count: z.number().int(),
            reply_count: z.number().int(),
            highest_post_number: z.number().int(),
            image_url: z.union([
                z.string(),
                z.null()
            ]),
            created_at: z.string(),
            last_posted_at: z.string(),
            bumped: z.boolean(),
            bumped_at: z.string(),
            archetype: z.string(),
            unseen: z.boolean(),
            pinned: z.boolean(),
            unpinned: z.union([
                z.string(),
                z.null()
            ]),
            excerpt: z.string(),
            visible: z.boolean(),
            closed: z.boolean(),
            archived: z.boolean(),
            bookmarked: z.union([
                z.string(),
                z.null()
            ]),
            liked: z.union([
                z.string(),
                z.null()
            ]),
            views: z.number().int(),
            like_count: z.number().int(),
            has_summary: z.boolean(),
            last_poster_username: z.string(),
            category_id: z.number().int(),
            pinned_globally: z.boolean(),
            featured_link: z.union([
                z.string(),
                z.null()
            ]),
            posters: z.array(z.object({
                extras: z.string(),
                description: z.string(),
                user_id: z.number().int(),
                primary_group_id: z.union([
                    z.number().int(),
                    z.null()
                ])
            }))
        }))
    })
});

export const zGetCategoryResponse = z.object({
    category: z.object({
        id: z.number().int(),
        name: z.string(),
        color: z.string(),
        text_color: z.string(),
        slug: z.string(),
        topic_count: z.number().int(),
        post_count: z.number().int(),
        position: z.number().int(),
        description: z.union([
            z.string(),
            z.null()
        ]),
        description_text: z.union([
            z.string(),
            z.null()
        ]),
        description_excerpt: z.union([
            z.string(),
            z.null()
        ]),
        topic_url: z.union([
            z.string(),
            z.null()
        ]),
        read_restricted: z.boolean(),
        permission: z.union([
            z.number().int(),
            z.null()
        ]),
        notification_level: z.number().int(),
        can_edit: z.boolean(),
        topic_template: z.union([
            z.string(),
            z.null()
        ]),
        form_template_ids: z.array(z.unknown()).optional(),
        has_children: z.union([
            z.boolean(),
            z.null()
        ]),
        subcategory_count: z.union([
            z.number().int(),
            z.null()
        ]),
        sort_order: z.union([
            z.string(),
            z.null()
        ]),
        sort_ascending: z.union([
            z.string(),
            z.null()
        ]),
        show_subcategory_list: z.boolean(),
        num_featured_topics: z.number().int(),
        default_view: z.union([
            z.string(),
            z.null()
        ]),
        subcategory_list_style: z.string(),
        default_top_period: z.string(),
        default_list_filter: z.string(),
        minimum_required_tags: z.number().int(),
        navigate_to_first_post_after_read: z.boolean(),
        custom_fields: z.object({}),
        allowed_tags: z.array(z.unknown()).optional(),
        allowed_tag_groups: z.array(z.unknown()).optional(),
        allow_global_tags: z.boolean().optional(),
        required_tag_groups: z.array(z.object({
            name: z.string(),
            min_count: z.number().int()
        })),
        category_setting: z.unknown().optional(),
        read_only_banner: z.union([
            z.string(),
            z.null()
        ]),
        available_groups: z.array(z.unknown()),
        auto_close_hours: z.union([
            z.string(),
            z.null()
        ]),
        auto_close_based_on_last_post: z.boolean(),
        allow_unlimited_owner_edits_on_first_post: z.boolean(),
        default_slow_mode_seconds: z.union([
            z.string(),
            z.null()
        ]),
        group_permissions: z.array(z.object({
            permission_type: z.number().int(),
            group_name: z.string()
        })),
        email_in: z.union([
            z.string(),
            z.null()
        ]),
        email_in_allow_strangers: z.boolean(),
        mailinglist_mirror: z.boolean(),
        all_topics_wiki: z.boolean(),
        can_delete: z.boolean(),
        allow_badges: z.boolean(),
        topic_featured_link_allowed: z.boolean(),
        search_priority: z.number().int(),
        uploaded_logo: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_logo_dark: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background_dark: z.union([
            z.string(),
            z.null()
        ])
    })
});

export const zCreateGroupResponse = z.object({
    basic_group: z.object({
        id: z.number().int(),
        automatic: z.boolean(),
        name: z.string(),
        user_count: z.number().int(),
        mentionable_level: z.number().int(),
        messageable_level: z.number().int(),
        visibility_level: z.number().int(),
        primary_group: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        grant_trust_level: z.union([
            z.string(),
            z.null()
        ]),
        incoming_email: z.union([
            z.string(),
            z.null()
        ]),
        has_messages: z.boolean(),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        bio_raw: z.union([
            z.string(),
            z.null()
        ]),
        bio_cooked: z.union([
            z.string(),
            z.null()
        ]),
        bio_excerpt: z.union([
            z.string(),
            z.null()
        ]),
        public_admission: z.boolean(),
        public_exit: z.boolean(),
        allow_membership_requests: z.boolean(),
        full_name: z.union([
            z.string(),
            z.null()
        ]),
        default_notification_level: z.number().int(),
        membership_request_template: z.union([
            z.string(),
            z.null()
        ]),
        members_visibility_level: z.number().int(),
        can_see_members: z.boolean(),
        can_admin_group: z.boolean(),
        can_edit_group: z.boolean().optional(),
        publish_read_state: z.boolean()
    })
});

export const zDeleteGroupResponse = z.object({
    success: z.string()
});

export const zGetGroupResponse = z.object({
    group: z.object({
        id: z.number().int(),
        automatic: z.boolean(),
        name: z.string(),
        user_count: z.number().int(),
        mentionable_level: z.number().int(),
        messageable_level: z.number().int(),
        visibility_level: z.number().int(),
        primary_group: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        grant_trust_level: z.union([
            z.string(),
            z.null()
        ]),
        incoming_email: z.union([
            z.string(),
            z.null()
        ]),
        has_messages: z.boolean(),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        bio_raw: z.union([
            z.string(),
            z.null()
        ]),
        bio_cooked: z.union([
            z.string(),
            z.null()
        ]),
        bio_excerpt: z.union([
            z.string(),
            z.null()
        ]),
        public_admission: z.boolean(),
        public_exit: z.boolean(),
        allow_membership_requests: z.boolean(),
        full_name: z.union([
            z.string(),
            z.null()
        ]),
        default_notification_level: z.number().int(),
        membership_request_template: z.union([
            z.string(),
            z.null()
        ]),
        is_group_user: z.boolean(),
        members_visibility_level: z.number().int(),
        can_see_members: z.boolean(),
        can_admin_group: z.boolean(),
        can_edit_group: z.boolean().optional(),
        publish_read_state: z.boolean(),
        is_group_owner_display: z.boolean(),
        mentionable: z.boolean(),
        messageable: z.boolean(),
        automatic_membership_email_domains: z.union([
            z.string(),
            z.null()
        ]),
        smtp_updated_at: z.union([
            z.string(),
            z.null()
        ]).optional(),
        smtp_updated_by: z.union([
            z.object({}),
            z.null()
        ]).optional(),
        smtp_enabled: z.boolean().optional(),
        smtp_server: z.union([
            z.string(),
            z.null()
        ]),
        smtp_port: z.union([
            z.string(),
            z.null()
        ]),
        smtp_ssl_mode: z.union([
            z.number().int(),
            z.null()
        ]),
        imap_enabled: z.boolean().optional(),
        imap_updated_at: z.union([
            z.string(),
            z.null()
        ]).optional(),
        imap_updated_by: z.union([
            z.object({}),
            z.null()
        ]).optional(),
        imap_server: z.union([
            z.string(),
            z.null()
        ]),
        imap_port: z.union([
            z.string(),
            z.null()
        ]),
        imap_ssl: z.union([
            z.string(),
            z.null()
        ]),
        imap_mailbox_name: z.string(),
        imap_mailboxes: z.array(z.unknown()),
        email_username: z.union([
            z.string(),
            z.null()
        ]),
        email_from_alias: z.union([
            z.string(),
            z.null()
        ]).optional(),
        email_password: z.union([
            z.string(),
            z.null()
        ]),
        imap_last_error: z.union([
            z.string(),
            z.null()
        ]),
        imap_old_emails: z.union([
            z.string(),
            z.null()
        ]),
        imap_new_emails: z.union([
            z.string(),
            z.null()
        ]),
        message_count: z.number().int(),
        allow_unknown_sender_topic_replies: z.boolean(),
        associated_group_ids: z.array(z.unknown()).optional(),
        watching_category_ids: z.array(z.unknown()),
        tracking_category_ids: z.array(z.unknown()),
        watching_first_post_category_ids: z.array(z.unknown()),
        regular_category_ids: z.array(z.unknown()),
        muted_category_ids: z.array(z.unknown()),
        watching_tags: z.array(z.unknown()).optional(),
        watching_first_post_tags: z.array(z.unknown()).optional(),
        tracking_tags: z.array(z.unknown()).optional(),
        regular_tags: z.array(z.unknown()).optional(),
        muted_tags: z.array(z.unknown()).optional()
    }),
    extras: z.object({
        visible_group_names: z.array(z.unknown())
    })
});

export const zUpdateGroupResponse = z.object({
    success: z.string().optional()
});

export const zRemoveGroupMembersResponse = z.object({
    success: z.string(),
    usernames: z.array(z.unknown()),
    skipped_usernames: z.array(z.unknown())
});

export const zListGroupMembersResponse = z.object({
    members: z.array(z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.union([
            z.string(),
            z.null()
        ]),
        avatar_template: z.string(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        last_posted_at: z.string(),
        last_seen_at: z.string(),
        added_at: z.string(),
        timezone: z.string()
    })),
    owners: z.array(z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.union([
            z.string(),
            z.null()
        ]),
        avatar_template: z.string(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        last_posted_at: z.string(),
        last_seen_at: z.string(),
        added_at: z.string(),
        timezone: z.string()
    })),
    meta: z.object({
        total: z.number().int(),
        limit: z.number().int(),
        offset: z.number().int()
    })
});

export const zAddGroupMembersResponse = z.object({
    success: z.string(),
    usernames: z.array(z.unknown()),
    emails: z.array(z.unknown())
});

export const zListGroupsResponse = z.object({
    groups: z.array(z.object({
        id: z.number().int(),
        automatic: z.boolean(),
        name: z.string(),
        display_name: z.string(),
        user_count: z.number().int(),
        mentionable_level: z.number().int(),
        messageable_level: z.number().int(),
        visibility_level: z.number().int(),
        primary_group: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        grant_trust_level: z.union([
            z.string(),
            z.null()
        ]),
        incoming_email: z.union([
            z.string(),
            z.null()
        ]),
        has_messages: z.boolean(),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        bio_raw: z.union([
            z.string(),
            z.null()
        ]),
        bio_cooked: z.union([
            z.string(),
            z.null()
        ]),
        bio_excerpt: z.union([
            z.string(),
            z.null()
        ]),
        public_admission: z.boolean(),
        public_exit: z.boolean(),
        allow_membership_requests: z.boolean(),
        full_name: z.union([
            z.string(),
            z.null()
        ]),
        default_notification_level: z.number().int(),
        membership_request_template: z.union([
            z.string(),
            z.null()
        ]),
        is_group_user: z.boolean().optional(),
        is_group_owner: z.boolean().optional(),
        members_visibility_level: z.number().int(),
        can_see_members: z.boolean(),
        can_admin_group: z.boolean(),
        can_edit_group: z.boolean().optional(),
        publish_read_state: z.boolean()
    })),
    extras: z.object({
        type_filters: z.array(z.unknown())
    }),
    total_rows_groups: z.number().int(),
    load_more_groups: z.string()
});

export const zCreateInviteResponse = z.object({
    id: z.number().int().optional(),
    link: z.string().optional(),
    email: z.string().optional(),
    emailed: z.boolean().optional(),
    custom_message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    topics: z.array(z.unknown()).optional(),
    groups: z.array(z.unknown()).optional(),
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
    expires_at: z.string().optional(),
    expired: z.boolean().optional()
});

export const zCreateMultipleInvitesResponse = z.object({
    num_successfully_created_invitations: z.number().int().optional(),
    num_failed_invitations: z.number().int().optional(),
    failed_invitations: z.array(z.unknown()).optional(),
    successful_invitations: z.array(z.unknown()).optional()
});

export const zGetNotificationsResponse = z.object({
    notifications: z.array(z.object({
        id: z.number().int().optional(),
        user_id: z.number().int().optional(),
        notification_type: z.number().int().optional(),
        read: z.boolean().optional(),
        created_at: z.string().optional(),
        post_number: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        topic_id: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        slug: z.union([
            z.string(),
            z.null()
        ]).optional(),
        data: z.object({
            badge_id: z.number().int().optional(),
            badge_name: z.string().optional(),
            badge_slug: z.string().optional(),
            badge_title: z.boolean().optional(),
            username: z.string().optional()
        }).optional()
    })).optional(),
    total_rows_notifications: z.number().int().optional(),
    seen_notification_id: z.number().int().optional(),
    load_more_notifications: z.string().optional()
});

export const zMarkNotificationsAsReadResponse = z.object({
    success: z.string().optional()
});

export const zListPostsResponse = z.object({
    latest_posts: z.array(z.object({
        id: z.number().int().optional(),
        name: z.string().optional(),
        username: z.string().optional(),
        avatar_template: z.string().optional(),
        created_at: z.string().optional(),
        cooked: z.string().optional(),
        post_number: z.number().int().optional(),
        post_type: z.number().int().optional(),
        updated_at: z.string().optional(),
        reply_count: z.number().int().optional(),
        reply_to_post_number: z.union([
            z.string(),
            z.null()
        ]).optional(),
        quote_count: z.number().int().optional(),
        incoming_link_count: z.number().int().optional(),
        reads: z.number().int().optional(),
        readers_count: z.number().int().optional(),
        score: z.number().optional(),
        yours: z.boolean().optional(),
        topic_id: z.number().int().optional(),
        topic_slug: z.string().optional(),
        topic_title: z.string().optional(),
        topic_html_title: z.string().optional(),
        category_id: z.number().int().optional(),
        display_username: z.string().optional(),
        primary_group_name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        flair_name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        flair_url: z.union([
            z.string(),
            z.null()
        ]).optional(),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]).optional(),
        flair_color: z.union([
            z.string(),
            z.null()
        ]).optional(),
        flair_group_id: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        version: z.number().int().optional(),
        can_edit: z.boolean().optional(),
        can_delete: z.boolean().optional(),
        can_recover: z.boolean().optional(),
        can_see_hidden_post: z.boolean().optional(),
        can_wiki: z.boolean().optional(),
        user_title: z.union([
            z.string(),
            z.null()
        ]).optional(),
        raw: z.string().optional(),
        actions_summary: z.array(z.object({
            id: z.number().int().optional(),
            can_act: z.boolean().optional()
        })).optional(),
        moderator: z.boolean().optional(),
        admin: z.boolean().optional(),
        staff: z.boolean().optional(),
        user_id: z.number().int().optional(),
        hidden: z.boolean().optional(),
        trust_level: z.number().int().optional(),
        deleted_at: z.union([
            z.string(),
            z.null()
        ]).optional(),
        user_deleted: z.boolean().optional(),
        edit_reason: z.union([
            z.string(),
            z.null()
        ]).optional(),
        can_view_edit_history: z.boolean().optional(),
        wiki: z.boolean().optional(),
        reviewable_id: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        reviewable_score_count: z.number().int().optional(),
        reviewable_score_pending_count: z.number().int().optional()
    })).optional()
});

export const zCreateTopicPostPmResponse = z.object({
    id: z.number().int(),
    name: z.union([
        z.string(),
        z.null()
    ]),
    username: z.string(),
    avatar_template: z.string(),
    created_at: z.string(),
    raw: z.string().optional(),
    cooked: z.string(),
    post_number: z.number().int(),
    post_type: z.number().int(),
    posts_count: z.number().int(),
    updated_at: z.string(),
    reply_count: z.number().int(),
    reply_to_post_number: z.union([
        z.string(),
        z.null()
    ]),
    quote_count: z.number().int(),
    incoming_link_count: z.number().int(),
    reads: z.number().int(),
    readers_count: z.number().int(),
    score: z.number(),
    yours: z.boolean(),
    topic_id: z.number().int(),
    topic_slug: z.string(),
    display_username: z.union([
        z.string(),
        z.null()
    ]),
    primary_group_name: z.union([
        z.string(),
        z.null()
    ]),
    flair_name: z.union([
        z.string(),
        z.null()
    ]),
    flair_url: z.union([
        z.string(),
        z.null()
    ]),
    flair_bg_color: z.union([
        z.string(),
        z.null()
    ]),
    flair_color: z.union([
        z.string(),
        z.null()
    ]),
    flair_group_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    badges_granted: z.array(z.unknown()).optional(),
    version: z.number().int(),
    can_edit: z.boolean(),
    can_delete: z.boolean(),
    can_recover: z.boolean(),
    can_see_hidden_post: z.boolean().optional(),
    can_wiki: z.boolean(),
    user_title: z.union([
        z.string(),
        z.null()
    ]),
    bookmarked: z.boolean(),
    actions_summary: z.array(z.object({
        id: z.number().int(),
        can_act: z.boolean()
    })),
    moderator: z.boolean(),
    admin: z.boolean(),
    staff: z.boolean(),
    user_id: z.number().int(),
    draft_sequence: z.number().int(),
    hidden: z.boolean(),
    trust_level: z.number().int(),
    deleted_at: z.union([
        z.string(),
        z.null()
    ]),
    user_deleted: z.boolean(),
    edit_reason: z.union([
        z.string(),
        z.null()
    ]),
    can_view_edit_history: z.boolean(),
    wiki: z.boolean(),
    reviewable_id: z.union([
        z.number().int(),
        z.null()
    ]),
    reviewable_score_count: z.number().int(),
    reviewable_score_pending_count: z.number().int(),
    post_url: z.string(),
    mentioned_users: z.array(z.unknown()).optional()
});

export const zGetPostResponse = z.object({
    id: z.number().int(),
    username: z.string(),
    avatar_template: z.string(),
    created_at: z.string(),
    cooked: z.string(),
    post_number: z.number().int(),
    post_type: z.number().int(),
    posts_count: z.number().int(),
    updated_at: z.string(),
    reply_count: z.number().int(),
    reply_to_post_number: z.union([
        z.string(),
        z.null()
    ]),
    quote_count: z.number().int(),
    incoming_link_count: z.number().int(),
    reads: z.number().int(),
    readers_count: z.number().int(),
    score: z.number(),
    yours: z.boolean(),
    topic_id: z.number().int(),
    topic_slug: z.string(),
    primary_group_name: z.union([
        z.string(),
        z.null()
    ]),
    flair_name: z.union([
        z.string(),
        z.null()
    ]),
    flair_url: z.union([
        z.string(),
        z.null()
    ]),
    flair_bg_color: z.union([
        z.string(),
        z.null()
    ]),
    flair_color: z.union([
        z.string(),
        z.null()
    ]),
    flair_group_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    version: z.number().int(),
    can_edit: z.boolean(),
    can_delete: z.boolean(),
    can_recover: z.boolean(),
    can_see_hidden_post: z.boolean().optional(),
    can_wiki: z.boolean(),
    user_title: z.union([
        z.string(),
        z.null()
    ]),
    bookmarked: z.boolean(),
    raw: z.string(),
    actions_summary: z.array(z.object({
        id: z.number().int(),
        count: z.number().int().optional(),
        acted: z.boolean().optional(),
        can_undo: z.boolean().optional(),
        can_act: z.boolean().optional()
    })),
    moderator: z.boolean(),
    admin: z.boolean(),
    staff: z.boolean(),
    user_id: z.number().int(),
    hidden: z.boolean(),
    trust_level: z.number().int(),
    deleted_at: z.union([
        z.string(),
        z.null()
    ]),
    user_deleted: z.boolean(),
    edit_reason: z.union([
        z.string(),
        z.null()
    ]),
    can_view_edit_history: z.boolean(),
    wiki: z.boolean(),
    reviewable_id: z.union([
        z.number().int(),
        z.null()
    ]),
    reviewable_score_count: z.number().int(),
    reviewable_score_pending_count: z.number().int(),
    post_url: z.string(),
    mentioned_users: z.array(z.unknown()).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    display_username: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUpdatePostResponse = z.object({
    post: z.object({
        id: z.number().int(),
        username: z.string(),
        avatar_template: z.string(),
        created_at: z.string(),
        cooked: z.string(),
        post_number: z.number().int(),
        post_type: z.number().int(),
        posts_count: z.number().int(),
        updated_at: z.string(),
        reply_count: z.number().int(),
        reply_to_post_number: z.union([
            z.string(),
            z.null()
        ]),
        quote_count: z.number().int(),
        incoming_link_count: z.number().int(),
        reads: z.number().int(),
        readers_count: z.number().int(),
        score: z.number(),
        yours: z.boolean(),
        topic_id: z.number().int(),
        topic_slug: z.string(),
        primary_group_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_group_id: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        badges_granted: z.array(z.unknown()).optional(),
        version: z.number().int(),
        can_edit: z.boolean(),
        can_delete: z.boolean(),
        can_recover: z.boolean(),
        can_see_hidden_post: z.boolean().optional(),
        can_wiki: z.boolean(),
        user_title: z.union([
            z.string(),
            z.null()
        ]),
        bookmarked: z.boolean(),
        raw: z.string(),
        actions_summary: z.array(z.object({
            id: z.number().int(),
            can_act: z.boolean()
        })),
        moderator: z.boolean(),
        admin: z.boolean(),
        staff: z.boolean(),
        user_id: z.number().int(),
        draft_sequence: z.number().int(),
        hidden: z.boolean(),
        trust_level: z.number().int(),
        deleted_at: z.union([
            z.string(),
            z.null()
        ]),
        user_deleted: z.boolean(),
        edit_reason: z.union([
            z.string(),
            z.null()
        ]),
        can_view_edit_history: z.boolean(),
        wiki: z.boolean(),
        reviewable_id: z.union([
            z.number().int(),
            z.null()
        ]),
        reviewable_score_count: z.number().int(),
        reviewable_score_pending_count: z.number().int(),
        post_url: z.string(),
        mentioned_users: z.array(z.unknown()).optional(),
        name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        display_username: z.union([
            z.string(),
            z.null()
        ]).optional()
    })
});

export const zPostRepliesResponse = z.array(z.object({
    id: z.number().int(),
    name: z.union([
        z.string(),
        z.null()
    ]),
    username: z.string(),
    avatar_template: z.string(),
    created_at: z.string(),
    cooked: z.string(),
    post_number: z.number().int(),
    post_type: z.number().int(),
    posts_count: z.number().int(),
    updated_at: z.string(),
    reply_count: z.number().int(),
    reply_to_post_number: z.number().int(),
    quote_count: z.number().int(),
    incoming_link_count: z.number().int(),
    reads: z.number().int(),
    readers_count: z.number().int(),
    score: z.number(),
    yours: z.boolean(),
    topic_id: z.number().int(),
    topic_slug: z.string(),
    display_username: z.union([
        z.string(),
        z.null()
    ]),
    primary_group_name: z.union([
        z.string(),
        z.null()
    ]),
    flair_name: z.union([
        z.string(),
        z.null()
    ]),
    flair_url: z.union([
        z.string(),
        z.null()
    ]),
    flair_bg_color: z.union([
        z.string(),
        z.null()
    ]),
    flair_color: z.union([
        z.string(),
        z.null()
    ]),
    flair_group_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    version: z.number().int(),
    can_edit: z.boolean(),
    can_delete: z.boolean(),
    can_recover: z.boolean(),
    can_see_hidden_post: z.boolean(),
    can_wiki: z.boolean(),
    user_title: z.union([
        z.string(),
        z.null()
    ]),
    reply_to_user: z.object({
        username: z.string(),
        name: z.string().optional(),
        avatar_template: z.string()
    }),
    bookmarked: z.boolean(),
    actions_summary: z.array(z.object({
        id: z.number().int(),
        can_act: z.boolean()
    })),
    moderator: z.boolean(),
    admin: z.boolean(),
    staff: z.boolean(),
    user_id: z.number().int(),
    hidden: z.boolean(),
    trust_level: z.number().int(),
    deleted_at: z.union([
        z.string(),
        z.null()
    ]),
    user_deleted: z.boolean(),
    edit_reason: z.union([
        z.string(),
        z.null()
    ]),
    can_view_edit_history: z.boolean(),
    wiki: z.boolean(),
    reviewable_id: z.union([
        z.number().int(),
        z.null()
    ]),
    reviewable_score_count: z.number().int(),
    reviewable_score_pending_count: z.number().int(),
    post_url: z.string()
})).min(1);

export const zLockPostResponse = z.object({
    locked: z.boolean().optional()
});

export const zPerformPostActionResponse = z.object({
    id: z.number().int().optional(),
    name: z.string().optional(),
    username: z.string().optional(),
    avatar_template: z.string().optional(),
    created_at: z.string().optional(),
    cooked: z.string().optional(),
    post_number: z.number().int().optional(),
    post_type: z.number().int().optional(),
    updated_at: z.string().optional(),
    reply_count: z.number().int().optional(),
    reply_to_post_number: z.union([
        z.string(),
        z.null()
    ]).optional(),
    quote_count: z.number().int().optional(),
    incoming_link_count: z.number().int().optional(),
    reads: z.number().int().optional(),
    readers_count: z.number().int().optional(),
    score: z.number().optional(),
    yours: z.boolean().optional(),
    topic_id: z.number().int().optional(),
    topic_slug: z.string().optional(),
    display_username: z.string().optional(),
    primary_group_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    flair_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    flair_url: z.union([
        z.string(),
        z.null()
    ]).optional(),
    flair_bg_color: z.union([
        z.string(),
        z.null()
    ]).optional(),
    flair_color: z.union([
        z.string(),
        z.null()
    ]).optional(),
    version: z.number().int().optional(),
    can_edit: z.boolean().optional(),
    can_delete: z.boolean().optional(),
    can_recover: z.boolean().optional(),
    can_wiki: z.boolean().optional(),
    user_title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    actions_summary: z.array(z.object({
        id: z.number().int().optional(),
        count: z.number().int().optional(),
        acted: z.boolean().optional(),
        can_undo: z.boolean().optional()
    })).optional(),
    moderator: z.boolean().optional(),
    admin: z.boolean().optional(),
    staff: z.boolean().optional(),
    user_id: z.number().int().optional(),
    hidden: z.boolean().optional(),
    trust_level: z.number().int().optional(),
    deleted_at: z.union([
        z.string(),
        z.null()
    ]).optional(),
    user_deleted: z.boolean().optional(),
    edit_reason: z.union([
        z.string(),
        z.null()
    ]).optional(),
    can_view_edit_history: z.boolean().optional(),
    wiki: z.boolean().optional(),
    notice: z.object({}).optional(),
    notice_created_by_user: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    reviewable_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    reviewable_score_count: z.number().int().optional(),
    reviewable_score_pending_count: z.number().int().optional()
});

export const zListUserPrivateMessagesResponse = z.object({
    users: z.array(z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        name: z.string().optional(),
        avatar_template: z.string().optional()
    })).optional(),
    primary_groups: z.array(z.unknown()).optional(),
    topic_list: z.object({
        can_create_topic: z.boolean().optional(),
        draft: z.union([
            z.string(),
            z.null()
        ]).optional(),
        draft_key: z.string().optional(),
        draft_sequence: z.number().int().optional(),
        per_page: z.number().int().optional(),
        topics: z.array(z.object({
            id: z.number().int().optional(),
            title: z.string().optional(),
            fancy_title: z.string().optional(),
            slug: z.string().optional(),
            posts_count: z.number().int().optional(),
            reply_count: z.number().int().optional(),
            highest_post_number: z.number().int().optional(),
            image_url: z.union([
                z.string(),
                z.null()
            ]).optional(),
            created_at: z.string().optional(),
            last_posted_at: z.string().optional(),
            bumped: z.boolean().optional(),
            bumped_at: z.string().optional(),
            archetype: z.string().optional(),
            unseen: z.boolean().optional(),
            last_read_post_number: z.number().int().optional(),
            unread_posts: z.number().int().optional(),
            pinned: z.boolean().optional(),
            unpinned: z.union([
                z.string(),
                z.null()
            ]).optional(),
            visible: z.boolean().optional(),
            closed: z.boolean().optional(),
            archived: z.boolean().optional(),
            notification_level: z.number().int().optional(),
            bookmarked: z.boolean().optional(),
            liked: z.boolean().optional(),
            views: z.number().int().optional(),
            like_count: z.number().int().optional(),
            has_summary: z.boolean().optional(),
            last_poster_username: z.string().optional(),
            category_id: z.union([
                z.string(),
                z.null()
            ]).optional(),
            pinned_globally: z.boolean().optional(),
            featured_link: z.union([
                z.string(),
                z.null()
            ]).optional(),
            allowed_user_count: z.number().int().optional(),
            posters: z.array(z.object({
                extras: z.string().optional(),
                description: z.string().optional(),
                user_id: z.number().int().optional(),
                primary_group_id: z.union([
                    z.number().int(),
                    z.null()
                ]).optional()
            })).optional(),
            participants: z.array(z.object({
                extras: z.string().optional(),
                description: z.union([
                    z.string(),
                    z.null()
                ]).optional(),
                user_id: z.number().int().optional(),
                primary_group_id: z.union([
                    z.number().int(),
                    z.null()
                ]).optional()
            })).optional()
        })).optional()
    }).optional()
});

export const zGetUserSentPrivateMessagesResponse = z.object({
    users: z.array(z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        avatar_template: z.string().optional()
    })).optional(),
    primary_groups: z.array(z.unknown()).optional(),
    topic_list: z.object({
        can_create_topic: z.boolean().optional(),
        draft: z.union([
            z.string(),
            z.null()
        ]).optional(),
        draft_key: z.string().optional(),
        draft_sequence: z.number().int().optional(),
        per_page: z.number().int().optional(),
        topics: z.array(z.object({
            id: z.number().int().optional(),
            title: z.string().optional(),
            fancy_title: z.string().optional(),
            slug: z.string().optional(),
            posts_count: z.number().int().optional(),
            reply_count: z.number().int().optional(),
            highest_post_number: z.number().int().optional(),
            image_url: z.union([
                z.string(),
                z.null()
            ]).optional(),
            created_at: z.string().optional(),
            last_posted_at: z.string().optional(),
            bumped: z.boolean().optional(),
            bumped_at: z.string().optional(),
            archetype: z.string().optional(),
            unseen: z.boolean().optional(),
            last_read_post_number: z.number().int().optional(),
            unread_posts: z.number().int().optional(),
            pinned: z.boolean().optional(),
            unpinned: z.union([
                z.string(),
                z.null()
            ]).optional(),
            visible: z.boolean().optional(),
            closed: z.boolean().optional(),
            archived: z.boolean().optional(),
            notification_level: z.number().int().optional(),
            bookmarked: z.boolean().optional(),
            liked: z.boolean().optional(),
            views: z.number().int().optional(),
            like_count: z.number().int().optional(),
            has_summary: z.boolean().optional(),
            last_poster_username: z.string().optional(),
            category_id: z.union([
                z.string(),
                z.null()
            ]).optional(),
            pinned_globally: z.boolean().optional(),
            featured_link: z.union([
                z.string(),
                z.null()
            ]).optional(),
            allowed_user_count: z.number().int().optional(),
            posters: z.array(z.object({
                extras: z.string().optional(),
                description: z.string().optional(),
                user_id: z.number().int().optional(),
                primary_group_id: z.union([
                    z.number().int(),
                    z.null()
                ]).optional()
            })).optional(),
            participants: z.array(z.unknown()).optional()
        })).optional()
    }).optional()
});

export const zSearchResponse = z.object({
    posts: z.array(z.unknown()),
    users: z.array(z.unknown()),
    categories: z.array(z.unknown()),
    tags: z.array(z.unknown()),
    groups: z.array(z.unknown()),
    grouped_search_result: z.object({
        more_posts: z.union([
            z.string(),
            z.null()
        ]),
        more_users: z.union([
            z.string(),
            z.null()
        ]),
        more_categories: z.union([
            z.string(),
            z.null()
        ]),
        term: z.string(),
        search_log_id: z.number().int(),
        more_full_page_results: z.union([
            z.string(),
            z.null()
        ]),
        can_create_topic: z.boolean(),
        error: z.union([
            z.string(),
            z.null()
        ]),
        extra: z.object({
            categories: z.union([
                z.array(z.unknown()),
                z.null()
            ]).optional()
        }).optional(),
        post_ids: z.array(z.unknown()),
        user_ids: z.array(z.unknown()),
        category_ids: z.array(z.unknown()),
        tag_ids: z.array(z.unknown()),
        group_ids: z.array(z.unknown())
    })
});

export const zGetSiteResponse = z.object({
    default_archetype: z.string(),
    notification_types: z.object({
        mentioned: z.number().int(),
        replied: z.number().int(),
        quoted: z.number().int(),
        edited: z.number().int(),
        liked: z.number().int(),
        private_message: z.number().int(),
        invited_to_private_message: z.number().int(),
        invitee_accepted: z.number().int(),
        posted: z.number().int(),
        watching_category_or_tag: z.number().int(),
        new_features: z.number().int().optional(),
        admin_problems: z.number().int().optional(),
        moved_post: z.number().int(),
        linked: z.number().int(),
        granted_badge: z.number().int(),
        invited_to_topic: z.number().int(),
        custom: z.number().int(),
        group_mentioned: z.number().int(),
        group_message_summary: z.number().int(),
        watching_first_post: z.number().int(),
        topic_reminder: z.number().int(),
        liked_consolidated: z.number().int(),
        linked_consolidated: z.number().int(),
        post_approved: z.number().int(),
        code_review_commit_approved: z.number().int(),
        membership_request_accepted: z.number().int(),
        membership_request_consolidated: z.number().int(),
        bookmark_reminder: z.number().int(),
        reaction: z.number().int(),
        votes_released: z.number().int(),
        event_reminder: z.number().int(),
        event_invitation: z.number().int(),
        chat_mention: z.number().int(),
        chat_message: z.number().int(),
        chat_invitation: z.number().int(),
        chat_group_mention: z.number().int(),
        chat_quoted: z.number().int().optional(),
        chat_watched_thread: z.number().int().optional(),
        assigned: z.number().int().optional(),
        question_answer_user_commented: z.number().int().optional(),
        following: z.number().int().optional(),
        following_created_topic: z.number().int().optional(),
        following_replied: z.number().int().optional(),
        circles_activity: z.number().int().optional()
    }),
    post_types: z.object({
        regular: z.number().int(),
        moderator_action: z.number().int(),
        small_action: z.number().int(),
        whisper: z.number().int()
    }),
    trust_levels: z.object({
        newuser: z.number().int(),
        basic: z.number().int(),
        member: z.number().int(),
        regular: z.number().int(),
        leader: z.number().int()
    }),
    user_tips: z.object({
        first_notification: z.number().int(),
        topic_timeline: z.number().int(),
        post_menu: z.number().int(),
        topic_notification_levels: z.number().int(),
        suggested_topics: z.number().int()
    }).optional(),
    groups: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ])
    })),
    filters: z.array(z.unknown()),
    periods: z.array(z.unknown()),
    top_menu_items: z.array(z.unknown()),
    anonymous_top_menu_items: z.array(z.unknown()),
    uncategorized_category_id: z.number().int(),
    user_field_max_length: z.number().int(),
    post_action_types: z.array(z.object({
        id: z.union([
            z.number().int(),
            z.null()
        ]),
        name_key: z.union([
            z.string(),
            z.null()
        ]),
        name: z.string(),
        description: z.string(),
        short_description: z.string(),
        is_flag: z.boolean(),
        require_message: z.boolean(),
        enabled: z.boolean(),
        applies_to: z.array(z.unknown()),
        is_used: z.boolean(),
        position: z.number().int().optional(),
        auto_action_type: z.boolean()
    })),
    topic_flag_types: z.array(z.object({
        id: z.union([
            z.number().int(),
            z.null()
        ]),
        name_key: z.union([
            z.string(),
            z.null()
        ]),
        name: z.string(),
        description: z.string(),
        short_description: z.string(),
        is_flag: z.boolean(),
        require_message: z.boolean(),
        enabled: z.boolean(),
        applies_to: z.array(z.unknown()),
        is_used: z.boolean(),
        position: z.number().int().optional(),
        auto_action_type: z.boolean()
    })),
    can_create_tag: z.boolean(),
    can_tag_topics: z.boolean(),
    can_tag_pms: z.boolean(),
    tags_filter_regexp: z.string(),
    top_tags: z.array(z.unknown()),
    wizard_required: z.boolean().optional(),
    can_associate_groups: z.boolean().optional(),
    topic_featured_link_allowed_category_ids: z.array(z.unknown()),
    user_themes: z.array(z.object({
        theme_id: z.number().int(),
        name: z.string(),
        default: z.boolean(),
        color_scheme_id: z.union([
            z.number().int(),
            z.null()
        ])
    })),
    user_color_schemes: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        is_dark: z.boolean()
    })),
    default_dark_color_scheme: z.union([
        z.object({}),
        z.null()
    ]),
    censored_regexp: z.array(z.object({})),
    custom_emoji_translation: z.object({}),
    watched_words_replace: z.union([
        z.string(),
        z.null()
    ]),
    watched_words_link: z.union([
        z.string(),
        z.null()
    ]),
    markdown_additional_options: z.object({}).optional(),
    hashtag_configurations: z.object({}).optional(),
    hashtag_icons: z.object({}).optional(),
    displayed_about_plugin_stat_groups: z.array(z.unknown()).optional(),
    categories: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        color: z.string(),
        text_color: z.string(),
        slug: z.string(),
        topic_count: z.number().int(),
        post_count: z.number().int(),
        position: z.number().int(),
        description: z.union([
            z.string(),
            z.null()
        ]).optional(),
        description_text: z.union([
            z.string(),
            z.null()
        ]).optional(),
        description_excerpt: z.union([
            z.string(),
            z.null()
        ]).optional(),
        topic_url: z.string(),
        read_restricted: z.boolean(),
        permission: z.number().int(),
        notification_level: z.number().int(),
        topic_template: z.union([
            z.string(),
            z.null()
        ]),
        has_children: z.boolean(),
        subcategory_count: z.union([
            z.number().int(),
            z.null()
        ]),
        sort_order: z.union([
            z.string(),
            z.null()
        ]),
        sort_ascending: z.union([
            z.string(),
            z.null()
        ]),
        show_subcategory_list: z.boolean(),
        num_featured_topics: z.number().int(),
        default_view: z.union([
            z.string(),
            z.null()
        ]),
        subcategory_list_style: z.string(),
        default_top_period: z.string(),
        default_list_filter: z.string(),
        minimum_required_tags: z.number().int(),
        navigate_to_first_post_after_read: z.boolean(),
        allowed_tags: z.array(z.unknown()),
        allowed_tag_groups: z.array(z.unknown()),
        allow_global_tags: z.boolean(),
        required_tag_groups: z.array(z.object({
            name: z.string(),
            min_count: z.number().int()
        })),
        read_only_banner: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_logo: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_logo_dark: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background: z.union([
            z.string(),
            z.null()
        ]),
        uploaded_background_dark: z.union([
            z.string(),
            z.null()
        ]),
        can_edit: z.boolean(),
        custom_fields: z.union([
            z.object({}),
            z.null()
        ]).optional(),
        parent_category_id: z.number().int().optional(),
        form_template_ids: z.array(z.unknown()).optional()
    })),
    archetypes: z.array(z.object({
        id: z.string(),
        name: z.string(),
        options: z.array(z.unknown())
    })),
    user_fields: z.array(z.unknown()),
    auth_providers: z.array(z.unknown()),
    whispers_allowed_groups_names: z.array(z.unknown()).optional(),
    denied_emojis: z.array(z.unknown()).optional(),
    valid_flag_applies_to_types: z.array(z.unknown()).optional(),
    navigation_menu_site_top_tags: z.array(z.unknown()).optional(),
    full_name_required_for_signup: z.boolean(),
    full_name_visible_in_signup: z.boolean()
});

export const zGetSiteBasicInfoResponse = z.object({
    logo_url: z.string(),
    logo_small_url: z.string(),
    apple_touch_icon_url: z.string(),
    favicon_url: z.string(),
    title: z.string(),
    description: z.string(),
    header_primary_color: z.string(),
    header_background_color: z.string(),
    login_required: z.boolean(),
    locale: z.string(),
    include_in_discourse_discover: z.boolean(),
    mobile_logo_url: z.string()
});

export const zListTagGroupsResponse = z.object({
    tag_groups: z.array(z.object({
        id: z.number().int().optional(),
        name: z.string().optional(),
        tag_names: z.array(z.unknown()).optional(),
        parent_tag_name: z.array(z.unknown()).optional(),
        one_per_topic: z.boolean().optional(),
        permissions: z.object({
            staff: z.number().int().optional()
        }).optional()
    })).optional()
});

export const zCreateTagGroupResponse = z.object({
    tag_group: z.object({
        id: z.number().int(),
        name: z.string(),
        tag_names: z.array(z.unknown()),
        parent_tag_name: z.array(z.unknown()),
        one_per_topic: z.boolean(),
        permissions: z.object({})
    })
});

export const zGetTagGroupResponse = z.object({
    tag_group: z.object({
        id: z.number().int().optional(),
        name: z.string().optional(),
        tag_names: z.array(z.unknown()).optional(),
        parent_tag_name: z.array(z.unknown()).optional(),
        one_per_topic: z.boolean().optional(),
        permissions: z.object({
            everyone: z.number().int().optional()
        }).optional()
    }).optional()
});

export const zUpdateTagGroupResponse = z.object({
    success: z.string().optional(),
    tag_group: z.object({
        id: z.number().int().optional(),
        name: z.string().optional(),
        tag_names: z.array(z.unknown()).optional(),
        parent_tag_name: z.array(z.unknown()).optional(),
        one_per_topic: z.boolean().optional(),
        permissions: z.object({
            everyone: z.number().int().optional()
        }).optional()
    }).optional()
});

export const zListTagsResponse = z.object({
    tags: z.array(z.object({
        id: z.string().optional(),
        text: z.string().optional(),
        count: z.number().int().optional(),
        pm_count: z.number().int().optional(),
        target_tag: z.union([
            z.string(),
            z.null()
        ]).optional()
    })).optional(),
    extras: z.object({
        categories: z.array(z.unknown()).optional()
    }).optional()
});

export const zGetTagResponse = z.object({
    users: z.array(z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        avatar_template: z.string().optional()
    })).optional(),
    primary_groups: z.array(z.unknown()).optional(),
    topic_list: z.object({
        can_create_topic: z.boolean().optional(),
        draft: z.union([
            z.string(),
            z.null()
        ]).optional(),
        draft_key: z.string().optional(),
        draft_sequence: z.number().int().optional(),
        per_page: z.number().int().optional(),
        tags: z.array(z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
            topic_count: z.number().int().optional(),
            staff: z.boolean().optional()
        })).optional(),
        topics: z.array(z.object({
            id: z.number().int().optional(),
            title: z.string().optional(),
            fancy_title: z.string().optional(),
            slug: z.string().optional(),
            posts_count: z.number().int().optional(),
            reply_count: z.number().int().optional(),
            highest_post_number: z.number().int().optional(),
            image_url: z.union([
                z.string(),
                z.null()
            ]).optional(),
            created_at: z.string().optional(),
            last_posted_at: z.string().optional(),
            bumped: z.boolean().optional(),
            bumped_at: z.string().optional(),
            archetype: z.string().optional(),
            unseen: z.boolean().optional(),
            last_read_post_number: z.number().int().optional(),
            unread_posts: z.number().int().optional(),
            pinned: z.boolean().optional(),
            unpinned: z.union([
                z.string(),
                z.null()
            ]).optional(),
            visible: z.boolean().optional(),
            closed: z.boolean().optional(),
            archived: z.boolean().optional(),
            notification_level: z.number().int().optional(),
            bookmarked: z.boolean().optional(),
            liked: z.boolean().optional(),
            tags: z.array(z.unknown()).optional(),
            views: z.number().int().optional(),
            like_count: z.number().int().optional(),
            has_summary: z.boolean().optional(),
            last_poster_username: z.string().optional(),
            category_id: z.number().int().optional(),
            pinned_globally: z.boolean().optional(),
            featured_link: z.union([
                z.string(),
                z.null()
            ]).optional(),
            posters: z.array(z.object({
                extras: z.string().optional(),
                description: z.string().optional(),
                user_id: z.number().int().optional(),
                primary_group_id: z.union([
                    z.number().int(),
                    z.null()
                ]).optional()
            })).optional()
        })).optional()
    }).optional()
});

export const zGetSpecificPostsFromTopicResponse = z.object({
    post_stream: z.object({
        posts: z.array(z.object({
            id: z.number().int().optional(),
            name: z.union([
                z.string(),
                z.null()
            ]).optional(),
            username: z.string().optional(),
            avatar_template: z.string().optional(),
            created_at: z.string().optional(),
            cooked: z.string().optional(),
            post_number: z.number().int().optional(),
            post_type: z.number().int().optional(),
            updated_at: z.string().optional(),
            reply_count: z.number().int().optional(),
            reply_to_post_number: z.union([
                z.string(),
                z.null()
            ]).optional(),
            quote_count: z.number().int().optional(),
            incoming_link_count: z.number().int().optional(),
            reads: z.number().int().optional(),
            readers_count: z.number().int().optional(),
            score: z.number().optional(),
            yours: z.boolean().optional(),
            topic_id: z.number().int().optional(),
            topic_slug: z.string().optional(),
            display_username: z.union([
                z.string(),
                z.null()
            ]).optional(),
            primary_group_name: z.union([
                z.string(),
                z.null()
            ]).optional(),
            flair_name: z.union([
                z.string(),
                z.null()
            ]).optional(),
            flair_url: z.union([
                z.string(),
                z.null()
            ]).optional(),
            flair_bg_color: z.union([
                z.string(),
                z.null()
            ]).optional(),
            flair_color: z.union([
                z.string(),
                z.null()
            ]).optional(),
            version: z.number().int().optional(),
            can_edit: z.boolean().optional(),
            can_delete: z.boolean().optional(),
            can_recover: z.boolean().optional(),
            can_wiki: z.boolean().optional(),
            read: z.boolean().optional(),
            user_title: z.union([
                z.string(),
                z.null()
            ]).optional(),
            actions_summary: z.array(z.object({
                id: z.number().int().optional(),
                can_act: z.boolean().optional()
            })).optional(),
            moderator: z.boolean().optional(),
            admin: z.boolean().optional(),
            staff: z.boolean().optional(),
            user_id: z.number().int().optional(),
            hidden: z.boolean().optional(),
            trust_level: z.number().int().optional(),
            deleted_at: z.union([
                z.string(),
                z.null()
            ]).optional(),
            user_deleted: z.boolean().optional(),
            edit_reason: z.union([
                z.string(),
                z.null()
            ]).optional(),
            can_view_edit_history: z.boolean().optional(),
            wiki: z.boolean().optional(),
            reviewable_id: z.number().int().optional(),
            reviewable_score_count: z.number().int().optional(),
            reviewable_score_pending_count: z.number().int().optional()
        })).optional()
    }).optional(),
    id: z.number().int().optional()
});

export const zGetTopicResponse = z.object({
    post_stream: z.object({
        posts: z.array(z.object({
            id: z.number().int(),
            name: z.string(),
            username: z.string(),
            avatar_template: z.string(),
            created_at: z.string(),
            cooked: z.string(),
            post_number: z.number().int(),
            post_type: z.number().int(),
            updated_at: z.string(),
            reply_count: z.number().int(),
            reply_to_post_number: z.union([
                z.string(),
                z.null()
            ]),
            quote_count: z.number().int(),
            incoming_link_count: z.number().int(),
            reads: z.number().int(),
            readers_count: z.number().int(),
            score: z.number(),
            yours: z.boolean(),
            topic_id: z.number().int(),
            topic_slug: z.string(),
            display_username: z.string(),
            primary_group_name: z.union([
                z.string(),
                z.null()
            ]),
            flair_name: z.union([
                z.string(),
                z.null()
            ]),
            flair_url: z.union([
                z.string(),
                z.null()
            ]),
            flair_bg_color: z.union([
                z.string(),
                z.null()
            ]),
            flair_color: z.union([
                z.string(),
                z.null()
            ]),
            version: z.number().int(),
            can_edit: z.boolean(),
            can_delete: z.boolean(),
            can_recover: z.boolean(),
            can_see_hidden_post: z.boolean().optional(),
            can_wiki: z.boolean(),
            link_counts: z.array(z.object({
                url: z.string(),
                internal: z.boolean(),
                reflection: z.boolean(),
                title: z.string(),
                clicks: z.number().int()
            })),
            read: z.boolean(),
            user_title: z.union([
                z.string(),
                z.null()
            ]),
            bookmarked: z.boolean(),
            actions_summary: z.array(z.object({
                id: z.number().int(),
                can_act: z.boolean()
            })),
            moderator: z.boolean(),
            admin: z.boolean(),
            staff: z.boolean(),
            user_id: z.number().int(),
            hidden: z.boolean(),
            trust_level: z.number().int(),
            deleted_at: z.union([
                z.string(),
                z.null()
            ]),
            user_deleted: z.boolean(),
            edit_reason: z.union([
                z.string(),
                z.null()
            ]),
            can_view_edit_history: z.boolean(),
            wiki: z.boolean(),
            reviewable_id: z.number().int(),
            reviewable_score_count: z.number().int(),
            reviewable_score_pending_count: z.number().int()
        })),
        stream: z.array(z.unknown())
    }),
    timeline_lookup: z.array(z.unknown()),
    suggested_topics: z.array(z.object({
        id: z.number().int(),
        title: z.string(),
        fancy_title: z.string(),
        slug: z.string(),
        posts_count: z.number().int(),
        reply_count: z.number().int(),
        highest_post_number: z.number().int(),
        image_url: z.union([
            z.string(),
            z.null()
        ]),
        created_at: z.string(),
        last_posted_at: z.union([
            z.string(),
            z.null()
        ]),
        bumped: z.boolean(),
        bumped_at: z.string(),
        archetype: z.string(),
        unseen: z.boolean(),
        pinned: z.boolean(),
        unpinned: z.union([
            z.string(),
            z.null()
        ]),
        excerpt: z.string(),
        visible: z.boolean(),
        closed: z.boolean(),
        archived: z.boolean(),
        bookmarked: z.union([
            z.string(),
            z.null()
        ]),
        liked: z.union([
            z.string(),
            z.null()
        ]),
        tags: z.array(z.unknown()),
        tags_descriptions: z.object({}),
        like_count: z.number().int(),
        views: z.number().int(),
        category_id: z.number().int(),
        featured_link: z.union([
            z.string(),
            z.null()
        ]),
        posters: z.array(z.object({
            extras: z.string(),
            description: z.string(),
            user: z.object({
                id: z.number().int(),
                username: z.string(),
                name: z.string(),
                avatar_template: z.string()
            })
        }))
    })),
    tags: z.array(z.unknown()),
    tags_descriptions: z.object({}),
    id: z.number().int(),
    title: z.string(),
    fancy_title: z.string(),
    posts_count: z.number().int(),
    created_at: z.string(),
    views: z.number().int(),
    reply_count: z.number().int(),
    like_count: z.number().int(),
    last_posted_at: z.union([
        z.string(),
        z.null()
    ]),
    visible: z.boolean(),
    closed: z.boolean(),
    archived: z.boolean(),
    has_summary: z.boolean(),
    archetype: z.string(),
    slug: z.string(),
    category_id: z.number().int(),
    word_count: z.union([
        z.number().int(),
        z.null()
    ]),
    deleted_at: z.union([
        z.string(),
        z.null()
    ]),
    user_id: z.number().int(),
    featured_link: z.union([
        z.string(),
        z.null()
    ]),
    pinned_globally: z.boolean(),
    pinned_at: z.union([
        z.string(),
        z.null()
    ]),
    pinned_until: z.union([
        z.string(),
        z.null()
    ]),
    image_url: z.union([
        z.string(),
        z.null()
    ]),
    slow_mode_seconds: z.number().int(),
    draft: z.union([
        z.string(),
        z.null()
    ]),
    draft_key: z.string(),
    draft_sequence: z.number().int(),
    unpinned: z.union([
        z.string(),
        z.null()
    ]),
    pinned: z.boolean(),
    current_post_number: z.number().int().optional(),
    highest_post_number: z.union([
        z.number().int(),
        z.null()
    ]),
    deleted_by: z.union([
        z.string(),
        z.null()
    ]),
    has_deleted: z.boolean(),
    actions_summary: z.array(z.object({
        id: z.number().int(),
        count: z.number().int(),
        hidden: z.boolean(),
        can_act: z.boolean()
    })),
    chunk_size: z.number().int(),
    bookmarked: z.boolean(),
    bookmarks: z.array(z.unknown()),
    topic_timer: z.union([
        z.string(),
        z.null()
    ]),
    message_bus_last_id: z.number().int(),
    participant_count: z.number().int(),
    show_read_indicator: z.boolean(),
    thumbnails: z.union([
        z.string(),
        z.null()
    ]),
    slow_mode_enabled_until: z.union([
        z.string(),
        z.null()
    ]),
    details: z.object({
        can_edit: z.boolean(),
        notification_level: z.number().int(),
        can_move_posts: z.boolean(),
        can_delete: z.boolean(),
        can_remove_allowed_users: z.boolean(),
        can_create_post: z.boolean(),
        can_reply_as_new_topic: z.boolean(),
        can_invite_to: z.boolean().optional(),
        can_invite_via_email: z.boolean().optional(),
        can_flag_topic: z.boolean().optional(),
        can_convert_topic: z.boolean(),
        can_review_topic: z.boolean(),
        can_close_topic: z.boolean(),
        can_archive_topic: z.boolean(),
        can_split_merge_topic: z.boolean(),
        can_edit_staff_notes: z.boolean(),
        can_toggle_topic_visibility: z.boolean(),
        can_pin_unpin_topic: z.boolean(),
        can_moderate_category: z.boolean(),
        can_remove_self_id: z.number().int(),
        participants: z.array(z.object({
            id: z.number().int(),
            username: z.string(),
            name: z.string(),
            avatar_template: z.string(),
            post_count: z.number().int(),
            primary_group_name: z.union([
                z.string(),
                z.null()
            ]),
            flair_name: z.union([
                z.string(),
                z.null()
            ]),
            flair_url: z.union([
                z.string(),
                z.null()
            ]),
            flair_color: z.union([
                z.string(),
                z.null()
            ]),
            flair_bg_color: z.union([
                z.string(),
                z.null()
            ]),
            flair_group_id: z.union([
                z.number().int(),
                z.null()
            ]).optional(),
            admin: z.boolean(),
            moderator: z.boolean(),
            trust_level: z.number().int()
        })).optional(),
        created_by: z.object({
            id: z.number().int(),
            username: z.string(),
            name: z.string(),
            avatar_template: z.string()
        }),
        last_poster: z.object({
            id: z.number().int(),
            username: z.string(),
            name: z.string(),
            avatar_template: z.string()
        })
    })
});

export const zUpdateTopicResponse = z.object({
    basic_topic: z.object({
        id: z.number().int().optional(),
        title: z.string().optional(),
        fancy_title: z.string().optional(),
        slug: z.string().optional(),
        posts_count: z.number().int().optional()
    }).optional()
});

export const zInviteToTopicResponse = z.object({
    user: z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        name: z.string().optional(),
        avatar_template: z.string().optional()
    }).optional()
});

export const zInviteGroupToTopicResponse = z.object({
    group: z.object({
        id: z.number().int().optional(),
        name: z.string().optional()
    }).optional()
});

export const zUpdateTopicStatusResponse = z.object({
    success: z.string().optional(),
    topic_status_update: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zListLatestTopicsResponse = z.object({
    users: z.array(z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        name: z.union([
            z.string(),
            z.null()
        ]).optional(),
        avatar_template: z.string().optional()
    })).optional(),
    primary_groups: z.array(z.unknown()).optional(),
    topic_list: z.object({
        can_create_topic: z.boolean().optional(),
        draft: z.union([
            z.string(),
            z.null()
        ]).optional(),
        draft_key: z.string().optional(),
        draft_sequence: z.number().int().optional(),
        per_page: z.number().int().optional(),
        topics: z.array(z.object({
            id: z.number().int().optional(),
            title: z.string().optional(),
            fancy_title: z.string().optional(),
            slug: z.string().optional(),
            posts_count: z.number().int().optional(),
            reply_count: z.number().int().optional(),
            highest_post_number: z.number().int().optional(),
            image_url: z.string().optional(),
            created_at: z.string().optional(),
            last_posted_at: z.string().optional(),
            bumped: z.boolean().optional(),
            bumped_at: z.string().optional(),
            archetype: z.string().optional(),
            unseen: z.boolean().optional(),
            last_read_post_number: z.number().int().optional(),
            unread_posts: z.number().int().optional(),
            pinned: z.boolean().optional(),
            unpinned: z.union([
                z.string(),
                z.null()
            ]).optional(),
            visible: z.boolean().optional(),
            closed: z.boolean().optional(),
            archived: z.boolean().optional(),
            notification_level: z.number().int().optional(),
            bookmarked: z.boolean().optional(),
            liked: z.boolean().optional(),
            views: z.number().int().optional(),
            like_count: z.number().int().optional(),
            has_summary: z.boolean().optional(),
            last_poster_username: z.string().optional(),
            category_id: z.number().int().optional(),
            op_like_count: z.number().int().optional(),
            pinned_globally: z.boolean().optional(),
            featured_link: z.union([
                z.string(),
                z.null()
            ]).optional(),
            posters: z.array(z.object({
                extras: z.string().optional(),
                description: z.string().optional(),
                user_id: z.number().int().optional(),
                primary_group_id: z.union([
                    z.number().int(),
                    z.null()
                ]).optional()
            })).optional()
        })).optional()
    }).optional()
});

export const zListTopTopicsResponse = z.object({
    users: z.array(z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        name: z.string().optional(),
        avatar_template: z.string().optional()
    })).optional(),
    primary_groups: z.array(z.unknown()).optional(),
    topic_list: z.object({
        can_create_topic: z.boolean().optional(),
        draft: z.union([
            z.string(),
            z.null()
        ]).optional(),
        draft_key: z.string().optional(),
        draft_sequence: z.number().int().optional(),
        for_period: z.string().optional(),
        per_page: z.number().int().optional(),
        topics: z.array(z.object({
            id: z.number().int().optional(),
            title: z.string().optional(),
            fancy_title: z.string().optional(),
            slug: z.string().optional(),
            posts_count: z.number().int().optional(),
            reply_count: z.number().int().optional(),
            highest_post_number: z.number().int().optional(),
            image_url: z.union([
                z.string(),
                z.null()
            ]).optional(),
            created_at: z.string().optional(),
            last_posted_at: z.string().optional(),
            bumped: z.boolean().optional(),
            bumped_at: z.string().optional(),
            archetype: z.string().optional(),
            unseen: z.boolean().optional(),
            last_read_post_number: z.number().int().optional(),
            unread_posts: z.number().int().optional(),
            pinned: z.boolean().optional(),
            unpinned: z.boolean().optional(),
            visible: z.boolean().optional(),
            closed: z.boolean().optional(),
            archived: z.boolean().optional(),
            notification_level: z.number().int().optional(),
            bookmarked: z.boolean().optional(),
            liked: z.boolean().optional(),
            views: z.number().int().optional(),
            like_count: z.number().int().optional(),
            has_summary: z.boolean().optional(),
            last_poster_username: z.string().optional(),
            category_id: z.number().int().optional(),
            op_like_count: z.number().int().optional(),
            pinned_globally: z.boolean().optional(),
            featured_link: z.union([
                z.string(),
                z.null()
            ]).optional(),
            posters: z.array(z.object({
                extras: z.union([
                    z.string(),
                    z.null()
                ]).optional(),
                description: z.string().optional(),
                user_id: z.number().int().optional(),
                primary_group_id: z.union([
                    z.number().int(),
                    z.null()
                ]).optional()
            })).optional()
        })).optional()
    }).optional()
});

export const zSetNotificationLevelResponse = z.object({
    success: z.string().optional()
});

export const zUpdateTopicTimestampResponse = z.object({
    success: z.string().optional()
});

export const zCreateTopicTimerResponse = z.object({
    success: z.string().optional(),
    execute_at: z.string().optional(),
    duration: z.union([
        z.string(),
        z.null()
    ]).optional(),
    based_on_last_post: z.boolean().optional(),
    closed: z.boolean().optional(),
    category_id: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zCreateUploadResponse = z.object({
    id: z.number().int(),
    url: z.string(),
    original_filename: z.string(),
    filesize: z.number().int(),
    width: z.number().int(),
    height: z.number().int(),
    thumbnail_width: z.number().int(),
    thumbnail_height: z.number().int(),
    extension: z.string(),
    short_url: z.string(),
    short_path: z.string(),
    retain_hours: z.union([
        z.string(),
        z.null()
    ]),
    human_filesize: z.string(),
    dominant_color: z.union([
        z.string(),
        z.null()
    ]).optional(),
    thumbnail: z.union([
        z.object({
            id: z.number().int().optional(),
            upload_id: z.number().int().optional(),
            url: z.string().optional(),
            extension: z.string().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            filesize: z.number().int().optional()
        }),
        z.null()
    ]).optional()
});

export const zGeneratePresignedPutResponse = z.object({
    key: z.string().optional(),
    url: z.string().optional(),
    signed_headers: z.object({}).optional(),
    unique_identifier: z.string().optional()
});

export const zCompleteExternalUploadResponse = z.object({
    id: z.number().int(),
    url: z.string(),
    original_filename: z.string(),
    filesize: z.number().int(),
    width: z.number().int(),
    height: z.number().int(),
    thumbnail_width: z.number().int(),
    thumbnail_height: z.number().int(),
    extension: z.string(),
    short_url: z.string(),
    short_path: z.string(),
    retain_hours: z.union([
        z.string(),
        z.null()
    ]),
    human_filesize: z.string(),
    dominant_color: z.union([
        z.string(),
        z.null()
    ]).optional(),
    thumbnail: z.union([
        z.object({
            id: z.number().int().optional(),
            upload_id: z.number().int().optional(),
            url: z.string().optional(),
            extension: z.string().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            filesize: z.number().int().optional()
        }),
        z.null()
    ]).optional()
});

export const zCreateMultipartUploadResponse = z.object({
    key: z.string(),
    external_upload_identifier: z.string(),
    unique_identifier: z.string()
});

export const zBatchPresignMultipartPartsResponse = z.object({
    presigned_urls: z.object({})
});

export const zAbortMultipartResponse = z.object({
    success: z.string()
});

export const zCompleteMultipartResponse = z.object({
    id: z.number().int(),
    url: z.string(),
    original_filename: z.string(),
    filesize: z.number().int(),
    width: z.number().int(),
    height: z.number().int(),
    thumbnail_width: z.number().int(),
    thumbnail_height: z.number().int(),
    extension: z.string(),
    short_url: z.string(),
    short_path: z.string(),
    retain_hours: z.union([
        z.string(),
        z.null()
    ]),
    human_filesize: z.string(),
    dominant_color: z.union([
        z.string(),
        z.null()
    ]).optional(),
    thumbnail: z.union([
        z.object({
            id: z.number().int().optional(),
            upload_id: z.number().int().optional(),
            url: z.string().optional(),
            extension: z.string().optional(),
            width: z.number().int().optional(),
            height: z.number().int().optional(),
            filesize: z.number().int().optional()
        }),
        z.null()
    ]).optional()
});

export const zListUserBadgesResponse = z.object({
    badges: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        description: z.string(),
        grant_count: z.number().int(),
        allow_title: z.boolean(),
        multiple_grant: z.boolean(),
        icon: z.string(),
        image_url: z.union([
            z.string(),
            z.null()
        ]),
        listable: z.boolean(),
        enabled: z.boolean(),
        badge_grouping_id: z.number().int(),
        system: z.boolean(),
        slug: z.string(),
        manually_grantable: z.boolean(),
        badge_type_id: z.number().int()
    })).optional(),
    badge_types: z.array(z.object({
        id: z.number().int(),
        name: z.string(),
        sort_order: z.number().int()
    })).optional(),
    granted_bies: z.array(z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
        flair_name: z.union([
            z.string(),
            z.null()
        ]),
        admin: z.boolean(),
        moderator: z.boolean(),
        trust_level: z.number().int()
    })).optional(),
    user_badges: z.array(z.object({
        id: z.number().int(),
        granted_at: z.string(),
        grouping_position: z.number().int(),
        is_favorite: z.union([
            z.string(),
            z.null()
        ]),
        can_favorite: z.boolean(),
        badge_id: z.number().int(),
        granted_by_id: z.number().int()
    }))
});

export const zCreateUserResponse = z.object({
    success: z.boolean(),
    active: z.boolean(),
    message: z.string(),
    user_id: z.number().int().optional()
});

export const zGetUserResponse = z.object({
    user_badges: z.array(z.unknown()),
    user: z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
        last_posted_at: z.union([
            z.string(),
            z.null()
        ]),
        last_seen_at: z.union([
            z.string(),
            z.null()
        ]),
        created_at: z.string(),
        ignored: z.boolean(),
        muted: z.boolean(),
        can_ignore_user: z.boolean(),
        can_ignore_users: z.boolean().optional(),
        can_mute_user: z.boolean(),
        can_mute_users: z.boolean().optional(),
        can_send_private_messages: z.boolean(),
        can_send_private_message_to_user: z.boolean(),
        trust_level: z.number().int(),
        moderator: z.boolean(),
        admin: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        badge_count: z.number().int(),
        second_factor_backup_enabled: z.boolean().optional(),
        user_fields: z.object({
            1: z.union([
                z.string(),
                z.null()
            ]),
            2: z.union([
                z.string(),
                z.null()
            ])
        }).optional(),
        custom_fields: z.object({
            first_name: z.union([
                z.string(),
                z.null()
            ]).optional()
        }),
        time_read: z.number().int(),
        recent_time_read: z.number().int(),
        primary_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        primary_group_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        flair_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        featured_topic: z.union([
            z.string(),
            z.null()
        ]),
        staged: z.boolean(),
        can_edit: z.boolean(),
        can_edit_username: z.boolean(),
        can_edit_email: z.boolean(),
        can_edit_name: z.boolean(),
        uploaded_avatar_id: z.union([
            z.number().int(),
            z.null()
        ]),
        has_title_badges: z.boolean(),
        pending_count: z.number().int(),
        pending_posts_count: z.number().int().optional(),
        profile_view_count: z.number().int(),
        second_factor_enabled: z.boolean(),
        can_upload_profile_header: z.boolean(),
        can_upload_user_card_background: z.boolean(),
        post_count: z.number().int(),
        can_be_deleted: z.boolean(),
        can_delete_all_posts: z.boolean(),
        locale: z.union([
            z.string(),
            z.null()
        ]),
        muted_category_ids: z.array(z.unknown()),
        regular_category_ids: z.array(z.unknown()),
        watched_tags: z.array(z.unknown()),
        watching_first_post_tags: z.array(z.unknown()),
        tracked_tags: z.array(z.unknown()),
        muted_tags: z.array(z.unknown()),
        tracked_category_ids: z.array(z.unknown()),
        watched_category_ids: z.array(z.unknown()),
        watched_first_post_category_ids: z.array(z.unknown()),
        system_avatar_upload_id: z.union([
            z.string(),
            z.null()
        ]),
        system_avatar_template: z.string(),
        muted_usernames: z.array(z.unknown()),
        ignored_usernames: z.array(z.unknown()),
        allowed_pm_usernames: z.array(z.unknown()),
        mailing_list_posts_per_day: z.number().int(),
        can_change_bio: z.boolean(),
        can_change_location: z.boolean(),
        can_change_website: z.boolean(),
        can_change_tracking_preferences: z.boolean(),
        user_api_keys: z.union([
            z.string(),
            z.null()
        ]),
        user_passkeys: z.array(z.unknown()).optional(),
        sidebar_tags: z.array(z.unknown()).optional(),
        sidebar_category_ids: z.array(z.unknown()).optional(),
        display_sidebar_tags: z.boolean().optional(),
        can_pick_theme_with_custom_homepage: z.boolean().optional(),
        user_auth_tokens: z.array(z.object({
            id: z.number().int(),
            client_ip: z.string(),
            location: z.string(),
            browser: z.string(),
            device: z.string(),
            os: z.string(),
            icon: z.string(),
            created_at: z.string(),
            seen_at: z.string(),
            is_active: z.boolean()
        })),
        user_notification_schedule: z.object({
            enabled: z.boolean(),
            day_0_start_time: z.number().int(),
            day_0_end_time: z.number().int(),
            day_1_start_time: z.number().int(),
            day_1_end_time: z.number().int(),
            day_2_start_time: z.number().int(),
            day_2_end_time: z.number().int(),
            day_3_start_time: z.number().int(),
            day_3_end_time: z.number().int(),
            day_4_start_time: z.number().int(),
            day_4_end_time: z.number().int(),
            day_5_start_time: z.number().int(),
            day_5_end_time: z.number().int(),
            day_6_start_time: z.number().int(),
            day_6_end_time: z.number().int()
        }),
        use_logo_small_as_avatar: z.boolean(),
        featured_user_badge_ids: z.array(z.unknown()),
        invited_by: z.union([
            z.string(),
            z.null()
        ]),
        groups: z.array(z.object({
            id: z.number().int(),
            automatic: z.boolean(),
            name: z.string(),
            display_name: z.string(),
            user_count: z.number().int(),
            mentionable_level: z.number().int(),
            messageable_level: z.number().int(),
            visibility_level: z.number().int(),
            primary_group: z.boolean(),
            title: z.union([
                z.string(),
                z.null()
            ]),
            grant_trust_level: z.union([
                z.string(),
                z.null()
            ]),
            incoming_email: z.union([
                z.string(),
                z.null()
            ]),
            has_messages: z.boolean(),
            flair_url: z.union([
                z.string(),
                z.null()
            ]),
            flair_bg_color: z.union([
                z.string(),
                z.null()
            ]),
            flair_color: z.union([
                z.string(),
                z.null()
            ]),
            bio_raw: z.union([
                z.string(),
                z.null()
            ]),
            bio_cooked: z.union([
                z.string(),
                z.null()
            ]),
            bio_excerpt: z.union([
                z.string(),
                z.null()
            ]),
            public_admission: z.boolean(),
            public_exit: z.boolean(),
            allow_membership_requests: z.boolean(),
            full_name: z.union([
                z.string(),
                z.null()
            ]),
            default_notification_level: z.number().int(),
            membership_request_template: z.union([
                z.string(),
                z.null()
            ]),
            members_visibility_level: z.number().int(),
            can_see_members: z.boolean(),
            can_admin_group: z.boolean(),
            publish_read_state: z.boolean()
        })),
        group_users: z.array(z.object({
            group_id: z.number().int(),
            user_id: z.number().int(),
            notification_level: z.number().int(),
            owner: z.boolean().optional()
        })),
        user_option: z.object({
            user_id: z.number().int(),
            mailing_list_mode: z.boolean(),
            mailing_list_mode_frequency: z.number().int(),
            email_digests: z.boolean(),
            email_level: z.number().int(),
            email_messages_level: z.number().int(),
            external_links_in_new_tab: z.boolean(),
            bookmark_auto_delete_preference: z.number().int().optional(),
            color_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dark_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dynamic_favicon: z.boolean(),
            enable_quoting: z.boolean(),
            enable_smart_lists: z.boolean(),
            enable_defer: z.boolean(),
            digest_after_minutes: z.number().int(),
            automatically_unpin_topics: z.boolean(),
            auto_track_topics_after_msecs: z.number().int(),
            notification_level_when_replying: z.number().int(),
            new_topic_duration_minutes: z.number().int(),
            email_previous_replies: z.number().int(),
            email_in_reply_to: z.boolean(),
            like_notification_frequency: z.number().int(),
            include_tl0_in_digests: z.boolean(),
            theme_ids: z.array(z.unknown()),
            theme_key_seq: z.number().int(),
            allow_private_messages: z.boolean(),
            enable_allowed_pm_users: z.boolean(),
            homepage_id: z.union([
                z.string(),
                z.null()
            ]),
            hide_profile_and_presence: z.boolean(),
            hide_profile: z.boolean(),
            hide_presence: z.boolean(),
            text_size: z.string(),
            text_size_seq: z.number().int(),
            title_count_mode: z.string(),
            timezone: z.union([
                z.string(),
                z.null()
            ]),
            skip_new_user_tips: z.boolean(),
            default_calendar: z.string().optional(),
            oldest_search_log_date: z.union([
                z.string(),
                z.null()
            ]).optional(),
            sidebar_link_to_filtered_list: z.boolean().optional(),
            sidebar_show_count_of_new_items: z.boolean().optional(),
            watched_precedence_over_muted: z.union([
                z.boolean(),
                z.null()
            ]).optional(),
            seen_popups: z.union([
                z.array(z.unknown()),
                z.null()
            ]).optional(),
            topics_unread_when_closed: z.boolean()
        })
    })
});

export const zUpdateUserResponse = z.object({
    success: z.string(),
    user: z.object({})
});

export const zGetUserExternalIdResponse = z.object({
    user_badges: z.array(z.unknown()),
    user: z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
        last_posted_at: z.union([
            z.string(),
            z.null()
        ]),
        last_seen_at: z.union([
            z.string(),
            z.null()
        ]),
        created_at: z.string(),
        ignored: z.boolean(),
        muted: z.boolean(),
        can_ignore_user: z.boolean(),
        can_ignore_users: z.boolean().optional(),
        can_mute_user: z.boolean(),
        can_mute_users: z.boolean().optional(),
        can_send_private_messages: z.boolean(),
        can_send_private_message_to_user: z.boolean(),
        trust_level: z.number().int(),
        moderator: z.boolean(),
        admin: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        badge_count: z.number().int(),
        second_factor_backup_enabled: z.boolean().optional(),
        user_fields: z.object({
            1: z.union([
                z.string(),
                z.null()
            ]),
            2: z.union([
                z.string(),
                z.null()
            ])
        }).optional(),
        custom_fields: z.object({
            first_name: z.union([
                z.string(),
                z.null()
            ]).optional()
        }),
        time_read: z.number().int(),
        recent_time_read: z.number().int(),
        primary_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        primary_group_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        flair_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        featured_topic: z.union([
            z.string(),
            z.null()
        ]),
        staged: z.boolean(),
        can_edit: z.boolean(),
        can_edit_username: z.boolean(),
        can_edit_email: z.boolean(),
        can_edit_name: z.boolean(),
        uploaded_avatar_id: z.union([
            z.number().int(),
            z.null()
        ]),
        has_title_badges: z.boolean(),
        pending_count: z.number().int(),
        pending_posts_count: z.number().int().optional(),
        profile_view_count: z.number().int(),
        second_factor_enabled: z.boolean(),
        can_upload_profile_header: z.boolean(),
        can_upload_user_card_background: z.boolean(),
        post_count: z.number().int(),
        can_be_deleted: z.boolean(),
        can_delete_all_posts: z.boolean(),
        locale: z.union([
            z.string(),
            z.null()
        ]),
        muted_category_ids: z.array(z.unknown()),
        regular_category_ids: z.array(z.unknown()),
        watched_tags: z.array(z.unknown()),
        watching_first_post_tags: z.array(z.unknown()),
        tracked_tags: z.array(z.unknown()),
        muted_tags: z.array(z.unknown()),
        tracked_category_ids: z.array(z.unknown()),
        watched_category_ids: z.array(z.unknown()),
        watched_first_post_category_ids: z.array(z.unknown()),
        system_avatar_upload_id: z.union([
            z.string(),
            z.null()
        ]),
        system_avatar_template: z.string(),
        muted_usernames: z.array(z.unknown()),
        ignored_usernames: z.array(z.unknown()),
        allowed_pm_usernames: z.array(z.unknown()),
        mailing_list_posts_per_day: z.number().int(),
        can_change_bio: z.boolean(),
        can_change_location: z.boolean(),
        can_change_website: z.boolean(),
        can_change_tracking_preferences: z.boolean(),
        user_api_keys: z.union([
            z.string(),
            z.null()
        ]),
        user_passkeys: z.array(z.unknown()).optional(),
        sidebar_tags: z.array(z.unknown()).optional(),
        sidebar_category_ids: z.array(z.unknown()).optional(),
        display_sidebar_tags: z.boolean().optional(),
        can_pick_theme_with_custom_homepage: z.boolean().optional(),
        user_auth_tokens: z.array(z.object({
            id: z.number().int(),
            client_ip: z.string(),
            location: z.string(),
            browser: z.string(),
            device: z.string(),
            os: z.string(),
            icon: z.string(),
            created_at: z.string(),
            seen_at: z.string(),
            is_active: z.boolean()
        })),
        user_notification_schedule: z.object({
            enabled: z.boolean(),
            day_0_start_time: z.number().int(),
            day_0_end_time: z.number().int(),
            day_1_start_time: z.number().int(),
            day_1_end_time: z.number().int(),
            day_2_start_time: z.number().int(),
            day_2_end_time: z.number().int(),
            day_3_start_time: z.number().int(),
            day_3_end_time: z.number().int(),
            day_4_start_time: z.number().int(),
            day_4_end_time: z.number().int(),
            day_5_start_time: z.number().int(),
            day_5_end_time: z.number().int(),
            day_6_start_time: z.number().int(),
            day_6_end_time: z.number().int()
        }),
        use_logo_small_as_avatar: z.boolean(),
        featured_user_badge_ids: z.array(z.unknown()),
        invited_by: z.union([
            z.string(),
            z.null()
        ]),
        groups: z.array(z.object({
            id: z.number().int(),
            automatic: z.boolean(),
            name: z.string(),
            display_name: z.string(),
            user_count: z.number().int(),
            mentionable_level: z.number().int(),
            messageable_level: z.number().int(),
            visibility_level: z.number().int(),
            primary_group: z.boolean(),
            title: z.union([
                z.string(),
                z.null()
            ]),
            grant_trust_level: z.union([
                z.string(),
                z.null()
            ]),
            incoming_email: z.union([
                z.string(),
                z.null()
            ]),
            has_messages: z.boolean(),
            flair_url: z.union([
                z.string(),
                z.null()
            ]),
            flair_bg_color: z.union([
                z.string(),
                z.null()
            ]),
            flair_color: z.union([
                z.string(),
                z.null()
            ]),
            bio_raw: z.union([
                z.string(),
                z.null()
            ]),
            bio_cooked: z.union([
                z.string(),
                z.null()
            ]),
            bio_excerpt: z.union([
                z.string(),
                z.null()
            ]),
            public_admission: z.boolean(),
            public_exit: z.boolean(),
            allow_membership_requests: z.boolean(),
            full_name: z.union([
                z.string(),
                z.null()
            ]),
            default_notification_level: z.number().int(),
            membership_request_template: z.union([
                z.string(),
                z.null()
            ]),
            members_visibility_level: z.number().int(),
            can_see_members: z.boolean(),
            can_admin_group: z.boolean(),
            publish_read_state: z.boolean()
        })),
        group_users: z.array(z.object({
            group_id: z.number().int(),
            user_id: z.number().int(),
            notification_level: z.number().int(),
            owner: z.boolean().optional()
        })),
        user_option: z.object({
            user_id: z.number().int(),
            mailing_list_mode: z.boolean(),
            mailing_list_mode_frequency: z.number().int(),
            email_digests: z.boolean(),
            email_level: z.number().int(),
            email_messages_level: z.number().int(),
            external_links_in_new_tab: z.boolean(),
            bookmark_auto_delete_preference: z.number().int().optional(),
            color_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dark_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dynamic_favicon: z.boolean(),
            enable_quoting: z.boolean(),
            enable_smart_lists: z.boolean(),
            enable_defer: z.boolean(),
            digest_after_minutes: z.number().int(),
            automatically_unpin_topics: z.boolean(),
            auto_track_topics_after_msecs: z.number().int(),
            notification_level_when_replying: z.number().int(),
            new_topic_duration_minutes: z.number().int(),
            email_previous_replies: z.number().int(),
            email_in_reply_to: z.boolean(),
            like_notification_frequency: z.number().int(),
            include_tl0_in_digests: z.boolean(),
            theme_ids: z.array(z.unknown()),
            theme_key_seq: z.number().int(),
            allow_private_messages: z.boolean(),
            enable_allowed_pm_users: z.boolean(),
            homepage_id: z.union([
                z.string(),
                z.null()
            ]),
            hide_profile_and_presence: z.boolean(),
            hide_profile: z.boolean(),
            hide_presence: z.boolean(),
            text_size: z.string(),
            text_size_seq: z.number().int(),
            title_count_mode: z.string(),
            timezone: z.union([
                z.string(),
                z.null()
            ]),
            skip_new_user_tips: z.boolean(),
            default_calendar: z.string().optional(),
            oldest_search_log_date: z.union([
                z.string(),
                z.null()
            ]).optional(),
            sidebar_link_to_filtered_list: z.boolean().optional(),
            sidebar_show_count_of_new_items: z.boolean().optional(),
            watched_precedence_over_muted: z.union([
                z.boolean(),
                z.null()
            ]).optional(),
            seen_popups: z.union([
                z.array(z.unknown()),
                z.null()
            ]).optional(),
            topics_unread_when_closed: z.boolean()
        })
    })
});

export const zGetUserIdentiyProviderExternalIdResponse = z.object({
    user_badges: z.array(z.unknown()),
    user: z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
        last_posted_at: z.union([
            z.string(),
            z.null()
        ]),
        last_seen_at: z.union([
            z.string(),
            z.null()
        ]),
        created_at: z.string(),
        ignored: z.boolean(),
        muted: z.boolean(),
        can_ignore_user: z.boolean(),
        can_ignore_users: z.boolean().optional(),
        can_mute_user: z.boolean(),
        can_mute_users: z.boolean().optional(),
        can_send_private_messages: z.boolean(),
        can_send_private_message_to_user: z.boolean(),
        trust_level: z.number().int(),
        moderator: z.boolean(),
        admin: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        badge_count: z.number().int(),
        second_factor_backup_enabled: z.boolean().optional(),
        user_fields: z.object({
            1: z.union([
                z.string(),
                z.null()
            ]),
            2: z.union([
                z.string(),
                z.null()
            ])
        }).optional(),
        custom_fields: z.object({
            first_name: z.union([
                z.string(),
                z.null()
            ]).optional()
        }),
        time_read: z.number().int(),
        recent_time_read: z.number().int(),
        primary_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        primary_group_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        flair_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        featured_topic: z.union([
            z.string(),
            z.null()
        ]),
        staged: z.boolean(),
        can_edit: z.boolean(),
        can_edit_username: z.boolean(),
        can_edit_email: z.boolean(),
        can_edit_name: z.boolean(),
        uploaded_avatar_id: z.union([
            z.number().int(),
            z.null()
        ]),
        has_title_badges: z.boolean(),
        pending_count: z.number().int(),
        pending_posts_count: z.number().int().optional(),
        profile_view_count: z.number().int(),
        second_factor_enabled: z.boolean(),
        can_upload_profile_header: z.boolean(),
        can_upload_user_card_background: z.boolean(),
        post_count: z.number().int(),
        can_be_deleted: z.boolean(),
        can_delete_all_posts: z.boolean(),
        locale: z.union([
            z.string(),
            z.null()
        ]),
        muted_category_ids: z.array(z.unknown()),
        regular_category_ids: z.array(z.unknown()),
        watched_tags: z.array(z.unknown()),
        watching_first_post_tags: z.array(z.unknown()),
        tracked_tags: z.array(z.unknown()),
        muted_tags: z.array(z.unknown()),
        tracked_category_ids: z.array(z.unknown()),
        watched_category_ids: z.array(z.unknown()),
        watched_first_post_category_ids: z.array(z.unknown()),
        system_avatar_upload_id: z.union([
            z.string(),
            z.null()
        ]),
        system_avatar_template: z.string(),
        muted_usernames: z.array(z.unknown()),
        ignored_usernames: z.array(z.unknown()),
        allowed_pm_usernames: z.array(z.unknown()),
        mailing_list_posts_per_day: z.number().int(),
        can_change_bio: z.boolean(),
        can_change_location: z.boolean(),
        can_change_website: z.boolean(),
        can_change_tracking_preferences: z.boolean(),
        user_api_keys: z.union([
            z.string(),
            z.null()
        ]),
        user_passkeys: z.array(z.unknown()).optional(),
        sidebar_tags: z.array(z.unknown()).optional(),
        sidebar_category_ids: z.array(z.unknown()).optional(),
        display_sidebar_tags: z.boolean().optional(),
        can_pick_theme_with_custom_homepage: z.boolean().optional(),
        user_auth_tokens: z.array(z.object({
            id: z.number().int(),
            client_ip: z.string(),
            location: z.string(),
            browser: z.string(),
            device: z.string(),
            os: z.string(),
            icon: z.string(),
            created_at: z.string(),
            seen_at: z.string(),
            is_active: z.boolean()
        })),
        user_notification_schedule: z.object({
            enabled: z.boolean(),
            day_0_start_time: z.number().int(),
            day_0_end_time: z.number().int(),
            day_1_start_time: z.number().int(),
            day_1_end_time: z.number().int(),
            day_2_start_time: z.number().int(),
            day_2_end_time: z.number().int(),
            day_3_start_time: z.number().int(),
            day_3_end_time: z.number().int(),
            day_4_start_time: z.number().int(),
            day_4_end_time: z.number().int(),
            day_5_start_time: z.number().int(),
            day_5_end_time: z.number().int(),
            day_6_start_time: z.number().int(),
            day_6_end_time: z.number().int()
        }),
        use_logo_small_as_avatar: z.boolean(),
        featured_user_badge_ids: z.array(z.unknown()),
        invited_by: z.union([
            z.string(),
            z.null()
        ]),
        groups: z.array(z.object({
            id: z.number().int(),
            automatic: z.boolean(),
            name: z.string(),
            display_name: z.string(),
            user_count: z.number().int(),
            mentionable_level: z.number().int(),
            messageable_level: z.number().int(),
            visibility_level: z.number().int(),
            primary_group: z.boolean(),
            title: z.union([
                z.string(),
                z.null()
            ]),
            grant_trust_level: z.union([
                z.string(),
                z.null()
            ]),
            incoming_email: z.union([
                z.string(),
                z.null()
            ]),
            has_messages: z.boolean(),
            flair_url: z.union([
                z.string(),
                z.null()
            ]),
            flair_bg_color: z.union([
                z.string(),
                z.null()
            ]),
            flair_color: z.union([
                z.string(),
                z.null()
            ]),
            bio_raw: z.union([
                z.string(),
                z.null()
            ]),
            bio_cooked: z.union([
                z.string(),
                z.null()
            ]),
            bio_excerpt: z.union([
                z.string(),
                z.null()
            ]),
            public_admission: z.boolean(),
            public_exit: z.boolean(),
            allow_membership_requests: z.boolean(),
            full_name: z.union([
                z.string(),
                z.null()
            ]),
            default_notification_level: z.number().int(),
            membership_request_template: z.union([
                z.string(),
                z.null()
            ]),
            members_visibility_level: z.number().int(),
            can_see_members: z.boolean(),
            can_admin_group: z.boolean(),
            publish_read_state: z.boolean()
        })),
        group_users: z.array(z.object({
            group_id: z.number().int(),
            user_id: z.number().int(),
            notification_level: z.number().int(),
            owner: z.boolean().optional()
        })),
        user_option: z.object({
            user_id: z.number().int(),
            mailing_list_mode: z.boolean(),
            mailing_list_mode_frequency: z.number().int(),
            email_digests: z.boolean(),
            email_level: z.number().int(),
            email_messages_level: z.number().int(),
            external_links_in_new_tab: z.boolean(),
            bookmark_auto_delete_preference: z.number().int().optional(),
            color_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dark_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dynamic_favicon: z.boolean(),
            enable_quoting: z.boolean(),
            enable_smart_lists: z.boolean(),
            enable_defer: z.boolean(),
            digest_after_minutes: z.number().int(),
            automatically_unpin_topics: z.boolean(),
            auto_track_topics_after_msecs: z.number().int(),
            notification_level_when_replying: z.number().int(),
            new_topic_duration_minutes: z.number().int(),
            email_previous_replies: z.number().int(),
            email_in_reply_to: z.boolean(),
            like_notification_frequency: z.number().int(),
            include_tl0_in_digests: z.boolean(),
            theme_ids: z.array(z.unknown()),
            theme_key_seq: z.number().int(),
            allow_private_messages: z.boolean(),
            enable_allowed_pm_users: z.boolean(),
            homepage_id: z.union([
                z.string(),
                z.null()
            ]),
            hide_profile_and_presence: z.boolean(),
            hide_profile: z.boolean(),
            hide_presence: z.boolean(),
            text_size: z.string(),
            text_size_seq: z.number().int(),
            title_count_mode: z.string(),
            timezone: z.union([
                z.string(),
                z.null()
            ]),
            skip_new_user_tips: z.boolean(),
            default_calendar: z.string().optional(),
            oldest_search_log_date: z.union([
                z.string(),
                z.null()
            ]).optional(),
            sidebar_link_to_filtered_list: z.boolean().optional(),
            sidebar_show_count_of_new_items: z.boolean().optional(),
            watched_precedence_over_muted: z.union([
                z.boolean(),
                z.null()
            ]).optional(),
            seen_popups: z.union([
                z.array(z.unknown()),
                z.null()
            ]).optional(),
            topics_unread_when_closed: z.boolean()
        })
    })
});

export const zUpdateAvatarResponse = z.object({
    success: z.string()
});

export const zListUsersPublicResponse = z.object({
    directory_items: z.array(z.object({
        id: z.number().int(),
        likes_received: z.number().int(),
        likes_given: z.number().int(),
        topics_entered: z.number().int(),
        topic_count: z.number().int(),
        post_count: z.number().int(),
        posts_read: z.number().int(),
        days_visited: z.number().int(),
        user: z.object({
            id: z.number().int(),
            username: z.string(),
            name: z.union([
                z.string(),
                z.null()
            ]),
            avatar_template: z.string(),
            title: z.union([
                z.string(),
                z.null()
            ])
        })
    })),
    meta: z.object({
        last_updated_at: z.union([
            z.string(),
            z.null()
        ]),
        total_rows_directory_items: z.number().int(),
        load_more_directory_items: z.string()
    })
});

export const zDeleteUserResponse = z.object({
    deleted: z.boolean()
});

export const zAdminGetUserResponse = z.object({
    id: z.number().int(),
    username: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]),
    avatar_template: z.string(),
    active: z.boolean(),
    admin: z.boolean(),
    moderator: z.boolean(),
    last_seen_at: z.union([
        z.string(),
        z.null()
    ]),
    last_emailed_at: z.union([
        z.string(),
        z.null()
    ]),
    created_at: z.string(),
    last_seen_age: z.union([
        z.number(),
        z.null()
    ]),
    last_emailed_age: z.union([
        z.number(),
        z.null()
    ]),
    created_at_age: z.union([
        z.number(),
        z.null()
    ]),
    trust_level: z.number().int(),
    manual_locked_trust_level: z.union([
        z.string(),
        z.null()
    ]),
    title: z.union([
        z.string(),
        z.null()
    ]),
    time_read: z.number().int(),
    staged: z.boolean(),
    days_visited: z.number().int(),
    posts_read_count: z.number().int(),
    topics_entered: z.number().int(),
    post_count: z.number().int(),
    associated_accounts: z.array(z.unknown()).optional(),
    can_send_activation_email: z.boolean(),
    can_activate: z.boolean(),
    can_deactivate: z.boolean(),
    ip_address: z.string(),
    registration_ip_address: z.union([
        z.string(),
        z.null()
    ]),
    can_grant_admin: z.boolean(),
    can_revoke_admin: z.boolean(),
    can_grant_moderation: z.boolean(),
    can_revoke_moderation: z.boolean(),
    can_impersonate: z.boolean(),
    like_count: z.number().int(),
    like_given_count: z.number().int(),
    topic_count: z.number().int(),
    flags_given_count: z.number().int(),
    flags_received_count: z.number().int(),
    private_topics_count: z.number().int(),
    can_delete_all_posts: z.boolean(),
    can_be_deleted: z.boolean().optional(),
    can_be_anonymized: z.boolean(),
    can_be_merged: z.boolean(),
    full_suspend_reason: z.union([
        z.string(),
        z.null()
    ]),
    latest_export: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    silence_reason: z.union([
        z.string(),
        z.null()
    ]).optional(),
    post_edits_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    primary_group_id: z.union([
        z.number().int(),
        z.null()
    ]),
    badge_count: z.number().int(),
    warnings_received_count: z.number().int(),
    bounce_score: z.union([
        z.number().int(),
        z.null()
    ]),
    reset_bounce_score_after: z.union([
        z.string(),
        z.null()
    ]),
    can_view_action_logs: z.boolean(),
    can_disable_second_factor: z.boolean(),
    can_delete_sso_record: z.boolean(),
    api_key_count: z.number().int(),
    similar_users_count: z.number().int().optional(),
    single_sign_on_record: z.union([
        z.string(),
        z.null()
    ]),
    approved_by: z.union([
        z.object({
            id: z.number().int(),
            username: z.string(),
            name: z.string(),
            avatar_template: z.string()
        }),
        z.null()
    ]),
    suspended_by: z.union([
        z.string(),
        z.null()
    ]),
    silenced_by: z.union([
        z.string(),
        z.null()
    ]),
    penalty_counts: z.object({
        silenced: z.number().int(),
        suspended: z.number().int()
    }).optional(),
    next_penalty: z.string().optional(),
    tl3_requirements: z.object({
        time_period: z.number().int(),
        requirements_met: z.boolean(),
        requirements_lost: z.boolean(),
        trust_level_locked: z.boolean(),
        on_grace_period: z.boolean(),
        days_visited: z.number().int(),
        min_days_visited: z.number().int(),
        num_topics_replied_to: z.number().int(),
        min_topics_replied_to: z.number().int(),
        topics_viewed: z.number().int(),
        min_topics_viewed: z.number().int(),
        posts_read: z.number().int(),
        min_posts_read: z.number().int(),
        topics_viewed_all_time: z.number().int(),
        min_topics_viewed_all_time: z.number().int(),
        posts_read_all_time: z.number().int(),
        min_posts_read_all_time: z.number().int(),
        num_flagged_posts: z.number().int(),
        max_flagged_posts: z.number().int(),
        num_flagged_by_users: z.number().int(),
        max_flagged_by_users: z.number().int(),
        num_likes_given: z.number().int(),
        min_likes_given: z.number().int(),
        num_likes_received: z.number().int(),
        min_likes_received: z.number().int(),
        num_likes_received_days: z.number().int(),
        min_likes_received_days: z.number().int(),
        num_likes_received_users: z.number().int(),
        min_likes_received_users: z.number().int(),
        penalty_counts: z.object({
            silenced: z.number().int(),
            suspended: z.number().int(),
            total: z.number().int()
        })
    }).optional(),
    groups: z.array(z.object({
        id: z.number().int(),
        automatic: z.boolean(),
        name: z.string(),
        display_name: z.string(),
        user_count: z.number().int(),
        mentionable_level: z.number().int(),
        messageable_level: z.number().int(),
        visibility_level: z.number().int(),
        primary_group: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        grant_trust_level: z.union([
            z.string(),
            z.null()
        ]),
        incoming_email: z.union([
            z.string(),
            z.null()
        ]),
        has_messages: z.boolean(),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_group_id: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        bio_raw: z.union([
            z.string(),
            z.null()
        ]),
        bio_cooked: z.union([
            z.string(),
            z.null()
        ]),
        bio_excerpt: z.union([
            z.string(),
            z.null()
        ]),
        public_admission: z.boolean(),
        public_exit: z.boolean(),
        allow_membership_requests: z.boolean(),
        full_name: z.union([
            z.string(),
            z.null()
        ]),
        default_notification_level: z.number().int(),
        membership_request_template: z.union([
            z.string(),
            z.null()
        ]),
        members_visibility_level: z.number().int(),
        can_see_members: z.boolean(),
        can_admin_group: z.boolean(),
        publish_read_state: z.boolean()
    })),
    external_ids: z.object({})
});

export const zActivateUserResponse = z.object({
    success: z.string()
});

export const zDeactivateUserResponse = z.object({
    success: z.string()
});

export const zSuspendUserResponse = z.object({
    suspension: z.object({
        suspend_reason: z.string(),
        full_suspend_reason: z.string(),
        suspended_till: z.string(),
        suspended_at: z.string(),
        suspended_by: z.object({
            id: z.number().int(),
            username: z.string(),
            name: z.string(),
            avatar_template: z.string()
        })
    })
});

export const zSilenceUserResponse = z.object({
    silence: z.object({
        silenced: z.boolean(),
        silence_reason: z.string(),
        silenced_till: z.string(),
        silenced_at: z.string(),
        silenced_by: z.object({
            id: z.number().int(),
            username: z.string(),
            name: z.string(),
            avatar_template: z.string()
        })
    })
});

export const zAnonymizeUserResponse = z.object({
    success: z.string(),
    username: z.string()
});

export const zLogOutUserResponse = z.object({
    success: z.string()
});

export const zRefreshGravatarResponse = z.object({
    gravatar_upload_id: z.union([
        z.number().int(),
        z.null()
    ]),
    gravatar_avatar_template: z.union([
        z.string(),
        z.null()
    ])
});

export const zAdminListUsersResponse = z.array(z.object({
    id: z.number().int(),
    username: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]),
    avatar_template: z.string(),
    email: z.string().optional(),
    secondary_emails: z.array(z.unknown()).optional(),
    active: z.boolean(),
    admin: z.boolean(),
    moderator: z.boolean(),
    last_seen_at: z.union([
        z.string(),
        z.null()
    ]),
    last_emailed_at: z.union([
        z.string(),
        z.null()
    ]),
    created_at: z.string(),
    last_seen_age: z.union([
        z.number(),
        z.null()
    ]),
    last_emailed_age: z.union([
        z.number(),
        z.null()
    ]),
    created_at_age: z.union([
        z.number(),
        z.null()
    ]),
    trust_level: z.number().int(),
    manual_locked_trust_level: z.union([
        z.string(),
        z.null()
    ]),
    title: z.union([
        z.string(),
        z.null()
    ]),
    time_read: z.number().int(),
    staged: z.boolean(),
    days_visited: z.number().int(),
    posts_read_count: z.number().int(),
    topics_entered: z.number().int(),
    post_count: z.number().int()
})).min(1);

export const zListUserActionsResponse = z.object({
    user_actions: z.array(z.object({
        excerpt: z.string(),
        action_type: z.number().int(),
        created_at: z.string(),
        avatar_template: z.string(),
        acting_avatar_template: z.string(),
        slug: z.string(),
        topic_id: z.number().int(),
        target_user_id: z.number().int(),
        target_name: z.union([
            z.string(),
            z.null()
        ]),
        target_username: z.string(),
        post_number: z.number().int(),
        post_id: z.union([
            z.string(),
            z.null()
        ]),
        username: z.string(),
        name: z.union([
            z.string(),
            z.null()
        ]),
        user_id: z.number().int(),
        acting_username: z.string(),
        acting_name: z.union([
            z.string(),
            z.null()
        ]),
        acting_user_id: z.number().int(),
        title: z.string(),
        deleted: z.boolean(),
        hidden: z.union([
            z.string(),
            z.null()
        ]),
        post_type: z.union([
            z.string(),
            z.null()
        ]),
        action_code: z.union([
            z.string(),
            z.null()
        ]),
        category_id: z.number().int(),
        closed: z.boolean(),
        archived: z.boolean()
    }))
});

export const zSendPasswordResetEmailResponse = z.object({
    success: z.string(),
    user_found: z.boolean()
});

export const zGetUserEmailsResponse = z.object({
    email: z.string(),
    secondary_emails: z.array(z.unknown()),
    unconfirmed_emails: z.array(z.unknown()),
    associated_accounts: z.array(z.unknown())
});

export const zSendMessageResponse = z.object({
    success: z.string().optional(),
    message_id: z.number().int().optional()
});

export const zEditMessageResponse = z.object({
    success: z.string().optional(),
    message_id: z.number().int().optional()
});

export const zGetMessagesResponse = z.object({
    messages: z.array(z.object({
        id: z.number().int().optional(),
        message: z.string().optional(),
        cooked: z.string().optional(),
        created_at: z.string().datetime().optional(),
        chat_channel_id: z.number().int().optional(),
        streaming: z.boolean().optional(),
        user: z.object({
            id: z.number().int().optional(),
            username: z.string().optional(),
            name: z.string().optional(),
            avatar_template: z.string().optional(),
            moderator: z.boolean().optional(),
            admin: z.boolean().optional(),
            staff: z.boolean().optional()
        }).optional(),
        mentioned_users: z.array(z.object({
            id: z.number().int().optional(),
            username: z.string().optional(),
            name: z.string().optional()
        })).optional(),
        available_flags: z.array(z.union([
            z.string(),
            z.null()
        ])).optional(),
        uploads: z.array(z.object({})).optional(),
        edited: z.boolean().optional(),
        blocks: z.array(z.object({})).optional(),
        chat_webhook_event: z.union([
            z.object({}),
            z.null()
        ]).optional()
    })).optional(),
    tracking: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    meta: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zReactToMessageResponse = z.object({
    success: z.string().optional()
});

export const zGetUserCardResponse = z.object({});

export const zGetSessionResponse = z.object({
    current_user: z.object({
        id: z.number().int(),
        username: z.string(),
        name: z.string(),
        avatar_template: z.string(),
        last_posted_at: z.union([
            z.string(),
            z.null()
        ]),
        last_seen_at: z.union([
            z.string(),
            z.null()
        ]),
        created_at: z.string(),
        ignored: z.boolean(),
        muted: z.boolean(),
        can_ignore_user: z.boolean(),
        can_ignore_users: z.boolean().optional(),
        can_mute_user: z.boolean(),
        can_mute_users: z.boolean().optional(),
        can_send_private_messages: z.boolean(),
        can_send_private_message_to_user: z.boolean(),
        trust_level: z.number().int(),
        moderator: z.boolean(),
        admin: z.boolean(),
        title: z.union([
            z.string(),
            z.null()
        ]),
        badge_count: z.number().int(),
        second_factor_backup_enabled: z.boolean().optional(),
        user_fields: z.object({
            1: z.union([
                z.string(),
                z.null()
            ]),
            2: z.union([
                z.string(),
                z.null()
            ])
        }).optional(),
        custom_fields: z.object({
            first_name: z.union([
                z.string(),
                z.null()
            ]).optional()
        }),
        time_read: z.number().int(),
        recent_time_read: z.number().int(),
        primary_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        primary_group_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_group_id: z.union([
            z.number().int(),
            z.null()
        ]),
        flair_name: z.union([
            z.string(),
            z.null()
        ]),
        flair_url: z.union([
            z.string(),
            z.null()
        ]),
        flair_bg_color: z.union([
            z.string(),
            z.null()
        ]),
        flair_color: z.union([
            z.string(),
            z.null()
        ]),
        featured_topic: z.union([
            z.string(),
            z.null()
        ]),
        staged: z.boolean(),
        can_edit: z.boolean(),
        can_edit_username: z.boolean(),
        can_edit_email: z.boolean(),
        can_edit_name: z.boolean(),
        uploaded_avatar_id: z.union([
            z.number().int(),
            z.null()
        ]),
        has_title_badges: z.boolean(),
        pending_count: z.number().int(),
        pending_posts_count: z.number().int().optional(),
        profile_view_count: z.number().int(),
        second_factor_enabled: z.boolean(),
        can_upload_profile_header: z.boolean(),
        can_upload_user_card_background: z.boolean(),
        post_count: z.number().int(),
        can_be_deleted: z.boolean(),
        can_delete_all_posts: z.boolean(),
        locale: z.union([
            z.string(),
            z.null()
        ]),
        muted_category_ids: z.array(z.unknown()),
        regular_category_ids: z.array(z.unknown()),
        watched_tags: z.array(z.unknown()),
        watching_first_post_tags: z.array(z.unknown()),
        tracked_tags: z.array(z.unknown()),
        muted_tags: z.array(z.unknown()),
        tracked_category_ids: z.array(z.unknown()),
        watched_category_ids: z.array(z.unknown()),
        watched_first_post_category_ids: z.array(z.unknown()),
        system_avatar_upload_id: z.union([
            z.string(),
            z.null()
        ]),
        system_avatar_template: z.string(),
        muted_usernames: z.array(z.unknown()),
        ignored_usernames: z.array(z.unknown()),
        allowed_pm_usernames: z.array(z.unknown()),
        mailing_list_posts_per_day: z.number().int(),
        can_change_bio: z.boolean(),
        can_change_location: z.boolean(),
        can_change_website: z.boolean(),
        can_change_tracking_preferences: z.boolean(),
        user_api_keys: z.union([
            z.string(),
            z.null()
        ]),
        user_passkeys: z.array(z.unknown()).optional(),
        sidebar_tags: z.array(z.unknown()).optional(),
        sidebar_category_ids: z.array(z.unknown()).optional(),
        display_sidebar_tags: z.boolean().optional(),
        can_pick_theme_with_custom_homepage: z.boolean().optional(),
        user_auth_tokens: z.array(z.object({
            id: z.number().int(),
            client_ip: z.string(),
            location: z.string(),
            browser: z.string(),
            device: z.string(),
            os: z.string(),
            icon: z.string(),
            created_at: z.string(),
            seen_at: z.string(),
            is_active: z.boolean()
        })),
        user_notification_schedule: z.object({
            enabled: z.boolean(),
            day_0_start_time: z.number().int(),
            day_0_end_time: z.number().int(),
            day_1_start_time: z.number().int(),
            day_1_end_time: z.number().int(),
            day_2_start_time: z.number().int(),
            day_2_end_time: z.number().int(),
            day_3_start_time: z.number().int(),
            day_3_end_time: z.number().int(),
            day_4_start_time: z.number().int(),
            day_4_end_time: z.number().int(),
            day_5_start_time: z.number().int(),
            day_5_end_time: z.number().int(),
            day_6_start_time: z.number().int(),
            day_6_end_time: z.number().int()
        }),
        use_logo_small_as_avatar: z.boolean(),
        featured_user_badge_ids: z.array(z.unknown()),
        invited_by: z.union([
            z.string(),
            z.null()
        ]),
        groups: z.array(z.object({
            id: z.number().int(),
            automatic: z.boolean(),
            name: z.string(),
            display_name: z.string(),
            user_count: z.number().int(),
            mentionable_level: z.number().int(),
            messageable_level: z.number().int(),
            visibility_level: z.number().int(),
            primary_group: z.boolean(),
            title: z.union([
                z.string(),
                z.null()
            ]),
            grant_trust_level: z.union([
                z.string(),
                z.null()
            ]),
            incoming_email: z.union([
                z.string(),
                z.null()
            ]),
            has_messages: z.boolean(),
            flair_url: z.union([
                z.string(),
                z.null()
            ]),
            flair_bg_color: z.union([
                z.string(),
                z.null()
            ]),
            flair_color: z.union([
                z.string(),
                z.null()
            ]),
            bio_raw: z.union([
                z.string(),
                z.null()
            ]),
            bio_cooked: z.union([
                z.string(),
                z.null()
            ]),
            bio_excerpt: z.union([
                z.string(),
                z.null()
            ]),
            public_admission: z.boolean(),
            public_exit: z.boolean(),
            allow_membership_requests: z.boolean(),
            full_name: z.union([
                z.string(),
                z.null()
            ]),
            default_notification_level: z.number().int(),
            membership_request_template: z.union([
                z.string(),
                z.null()
            ]),
            members_visibility_level: z.number().int(),
            can_see_members: z.boolean(),
            can_admin_group: z.boolean(),
            publish_read_state: z.boolean()
        })),
        group_users: z.array(z.object({
            group_id: z.number().int(),
            user_id: z.number().int(),
            notification_level: z.number().int(),
            owner: z.boolean().optional()
        })),
        user_option: z.object({
            user_id: z.number().int(),
            mailing_list_mode: z.boolean(),
            mailing_list_mode_frequency: z.number().int(),
            email_digests: z.boolean(),
            email_level: z.number().int(),
            email_messages_level: z.number().int(),
            external_links_in_new_tab: z.boolean(),
            bookmark_auto_delete_preference: z.number().int().optional(),
            color_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dark_scheme_id: z.union([
                z.string(),
                z.null()
            ]),
            dynamic_favicon: z.boolean(),
            enable_quoting: z.boolean(),
            enable_smart_lists: z.boolean(),
            enable_defer: z.boolean(),
            digest_after_minutes: z.number().int(),
            automatically_unpin_topics: z.boolean(),
            auto_track_topics_after_msecs: z.number().int(),
            notification_level_when_replying: z.number().int(),
            new_topic_duration_minutes: z.number().int(),
            email_previous_replies: z.number().int(),
            email_in_reply_to: z.boolean(),
            like_notification_frequency: z.number().int(),
            include_tl0_in_digests: z.boolean(),
            theme_ids: z.array(z.unknown()),
            theme_key_seq: z.number().int(),
            allow_private_messages: z.boolean(),
            enable_allowed_pm_users: z.boolean(),
            homepage_id: z.union([
                z.string(),
                z.null()
            ]),
            hide_profile_and_presence: z.boolean(),
            hide_profile: z.boolean(),
            hide_presence: z.boolean(),
            text_size: z.string(),
            text_size_seq: z.number().int(),
            title_count_mode: z.string(),
            timezone: z.union([
                z.string(),
                z.null()
            ]),
            skip_new_user_tips: z.boolean(),
            default_calendar: z.string().optional(),
            oldest_search_log_date: z.union([
                z.string(),
                z.null()
            ]).optional(),
            sidebar_link_to_filtered_list: z.boolean().optional(),
            sidebar_show_count_of_new_items: z.boolean().optional(),
            watched_precedence_over_muted: z.union([
                z.boolean(),
                z.null()
            ]).optional(),
            seen_popups: z.union([
                z.array(z.unknown()),
                z.null()
            ]).optional(),
            topics_unread_when_closed: z.boolean()
        })
    }).optional()
});