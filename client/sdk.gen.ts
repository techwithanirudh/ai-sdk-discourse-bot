// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
  urlSearchParamsBodySerializer,
} from '@hey-api/client-fetch';
import type {
  GetBackupsData,
  GetBackupsResponse,
  CreateBackupData,
  CreateBackupResponse,
  DownloadBackupData,
  SendDownloadBackupEmailData,
  AdminListBadgesData,
  AdminListBadgesResponse,
  CreateBadgeData,
  CreateBadgeResponse,
  DeleteBadgeData,
  UpdateBadgeData,
  UpdateBadgeResponse,
  ListCategoriesData,
  ListCategoriesResponse,
  CreateCategoryData,
  CreateCategoryResponse,
  UpdateCategoryData,
  UpdateCategoryResponse,
  ListCategoryTopicsData,
  ListCategoryTopicsResponse,
  GetCategoryData,
  GetCategoryResponse,
  CreateGroupData,
  CreateGroupResponse,
  DeleteGroupData,
  DeleteGroupResponse,
  GetGroupData,
  GetGroupResponse,
  UpdateGroupData,
  UpdateGroupResponse,
  RemoveGroupMembersData,
  RemoveGroupMembersResponse,
  ListGroupMembersData,
  ListGroupMembersResponse,
  AddGroupMembersData,
  AddGroupMembersResponse,
  ListGroupsData,
  ListGroupsResponse,
  CreateInviteData,
  CreateInviteResponse,
  CreateMultipleInvitesData,
  CreateMultipleInvitesResponse,
  GetNotificationsData,
  GetNotificationsResponse,
  MarkNotificationsAsReadData,
  MarkNotificationsAsReadResponse,
  ListPostsData,
  ListPostsResponse,
  CreateTopicPostPmData,
  CreateTopicPostPmResponse,
  DeletePostData,
  GetPostData,
  GetPostResponse,
  UpdatePostData,
  UpdatePostResponse,
  PostRepliesData,
  PostRepliesResponse,
  LockPostData,
  LockPostResponse,
  PerformPostActionData,
  PerformPostActionResponse,
  ListUserPrivateMessagesData,
  ListUserPrivateMessagesResponse,
  GetUserSentPrivateMessagesData,
  GetUserSentPrivateMessagesResponse,
  SearchData,
  SearchResponse,
  GetSiteData,
  GetSiteResponse,
  GetSiteBasicInfoData,
  GetSiteBasicInfoResponse,
  ListTagGroupsData,
  ListTagGroupsResponse,
  CreateTagGroupData,
  CreateTagGroupResponse,
  GetTagGroupData,
  GetTagGroupResponse,
  UpdateTagGroupData,
  UpdateTagGroupResponse,
  ListTagsData,
  ListTagsResponse,
  GetTagData,
  GetTagResponse,
  GetSpecificPostsFromTopicData,
  GetSpecificPostsFromTopicResponse,
  RemoveTopicData,
  GetTopicData,
  GetTopicResponse,
  UpdateTopicData,
  UpdateTopicResponse,
  InviteToTopicData,
  InviteToTopicResponse,
  InviteGroupToTopicData,
  InviteGroupToTopicResponse,
  BookmarkTopicData,
  UpdateTopicStatusData,
  UpdateTopicStatusResponse,
  ListLatestTopicsData,
  ListLatestTopicsResponse,
  ListTopTopicsData,
  ListTopTopicsResponse,
  SetNotificationLevelData,
  SetNotificationLevelResponse,
  UpdateTopicTimestampData,
  UpdateTopicTimestampResponse,
  CreateTopicTimerData,
  CreateTopicTimerResponse,
  GetTopicByExternalIdData,
  CreateUploadData,
  CreateUploadResponse,
  GeneratePresignedPutData,
  GeneratePresignedPutResponse,
  CompleteExternalUploadData,
  CompleteExternalUploadResponse,
  CreateMultipartUploadData,
  CreateMultipartUploadResponse,
  BatchPresignMultipartPartsData,
  BatchPresignMultipartPartsResponse,
  AbortMultipartData,
  AbortMultipartResponse,
  CompleteMultipartData,
  CompleteMultipartResponse,
  ListUserBadgesData,
  ListUserBadgesResponse,
  CreateUserData,
  CreateUserResponse,
  GetUserData,
  GetUserResponse,
  UpdateUserData,
  UpdateUserResponse,
  GetUserExternalIdData,
  GetUserExternalIdResponse,
  GetUserIdentiyProviderExternalIdData,
  GetUserIdentiyProviderExternalIdResponse,
  UpdateAvatarData,
  UpdateAvatarResponse,
  UpdateEmailData,
  UpdateUsernameData,
  ListUsersPublicData,
  ListUsersPublicResponse,
  DeleteUserData,
  DeleteUserResponse,
  AdminGetUserData,
  AdminGetUserResponse,
  ActivateUserData,
  ActivateUserResponse,
  DeactivateUserData,
  DeactivateUserResponse,
  SuspendUserData,
  SuspendUserResponse,
  SilenceUserData,
  SilenceUserResponse,
  AnonymizeUserData,
  AnonymizeUserResponse,
  LogOutUserData,
  LogOutUserResponse,
  RefreshGravatarData,
  RefreshGravatarResponse,
  AdminListUsersData,
  AdminListUsersResponse,
  ListUserActionsData,
  ListUserActionsResponse,
  SendPasswordResetEmailData,
  SendPasswordResetEmailResponse,
  ChangePasswordData,
  GetUserEmailsData,
  GetUserEmailsResponse,
  SendMessageData,
  SendMessageResponse,
  EditMessageData,
  EditMessageResponse,
  GetMessagesData,
  GetMessagesResponse,
  ReactToMessageData,
  ReactToMessageResponse,
  GetUserCardData,
  GetUserCardResponse,
  GetSessionData,
  GetSessionResponse,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { getMessagesResponseTransformer } from './transformers.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List backups
 */
export const getBackups = <ThrowOnError extends boolean = false>(
  options?: Options<GetBackupsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetBackupsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/backups.json',
    ...options,
  });
};

/**
 * Create backup
 */
export const createBackup = <ThrowOnError extends boolean = false>(
  options?: Options<CreateBackupData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateBackupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/backups.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Download backup
 */
export const downloadBackup = <ThrowOnError extends boolean = false>(
  options: Options<DownloadBackupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/admin/backups/{filename}',
    ...options,
  });
};

/**
 * Send download backup email
 */
export const sendDownloadBackupEmail = <ThrowOnError extends boolean = false>(
  options: Options<SendDownloadBackupEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    url: '/admin/backups/{filename}',
    ...options,
  });
};

/**
 * List badges
 */
export const adminListBadges = <ThrowOnError extends boolean = false>(
  options?: Options<AdminListBadgesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AdminListBadgesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/badges.json',
    ...options,
  });
};

/**
 * Create badge
 */
export const createBadge = <ThrowOnError extends boolean = false>(
  options?: Options<CreateBadgeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateBadgeResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/badges.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete badge
 */
export const deleteBadge = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBadgeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/admin/badges/{id}.json',
    ...options,
  });
};

/**
 * Update badge
 */
export const updateBadge = <ThrowOnError extends boolean = false>(
  options: Options<UpdateBadgeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateBadgeResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/badges/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Retrieves a list of categories
 */
export const listCategories = <ThrowOnError extends boolean = false>(
  options?: Options<ListCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCategoriesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/categories.json',
    ...options,
  });
};

/**
 * Creates a category
 */
export const createCategory = <ThrowOnError extends boolean = false>(
  options?: Options<CreateCategoryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateCategoryResponse,
    unknown,
    ThrowOnError
  >({
    url: '/categories.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Updates a category
 */
export const updateCategory = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCategoryResponse,
    unknown,
    ThrowOnError
  >({
    url: '/categories/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List topics
 */
export const listCategoryTopics = <ThrowOnError extends boolean = false>(
  options: Options<ListCategoryTopicsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListCategoryTopicsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/c/{slug}/{id}.json',
    ...options,
  });
};

/**
 * Show category
 */
export const getCategory = <ThrowOnError extends boolean = false>(
  options: Options<GetCategoryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCategoryResponse,
    unknown,
    ThrowOnError
  >({
    url: '/c/{id}/show.json',
    ...options,
  });
};

/**
 * Create a group
 */
export const createGroup = <ThrowOnError extends boolean = false>(
  options?: Options<CreateGroupData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateGroupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/groups.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/groups/{id}.json',
    ...options,
  });
};

/**
 * Get a group
 */
export const getGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetGroupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/groups/{id}.json',
    ...options,
  });
};

/**
 * Update a group
 */
export const updateGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGroupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/groups/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Remove group members
 */
export const removeGroupMembers = <ThrowOnError extends boolean = false>(
  options: Options<RemoveGroupMembersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    RemoveGroupMembersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/groups/{id}/members.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List group members
 */
export const listGroupMembers = <ThrowOnError extends boolean = false>(
  options: Options<ListGroupMembersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListGroupMembersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/groups/{id}/members.json',
    ...options,
  });
};

/**
 * Add group members
 */
export const addGroupMembers = <ThrowOnError extends boolean = false>(
  options: Options<AddGroupMembersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    AddGroupMembersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/groups/{id}/members.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List groups
 */
export const listGroups = <ThrowOnError extends boolean = false>(
  options?: Options<ListGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGroupsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/groups.json',
    ...options,
  });
};

/**
 * Create an invite
 */
export const createInvite = <ThrowOnError extends boolean = false>(
  options: Options<CreateInviteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateInviteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/invites.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create multiple invites
 */
export const createMultipleInvites = <ThrowOnError extends boolean = false>(
  options: Options<CreateMultipleInvitesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateMultipleInvitesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/invites/create-multiple.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get the notifications that belong to the current user
 */
export const getNotifications = <ThrowOnError extends boolean = false>(
  options?: Options<GetNotificationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetNotificationsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/notifications.json',
    ...options,
  });
};

/**
 * Mark notifications as read
 */
export const markNotificationsAsRead = <ThrowOnError extends boolean = false>(
  options?: Options<MarkNotificationsAsReadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<
    MarkNotificationsAsReadResponse,
    unknown,
    ThrowOnError
  >({
    url: '/notifications/mark-read.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List latest posts across topics
 */
export const listPosts = <ThrowOnError extends boolean = false>(
  options: Options<ListPostsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPostsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/posts.json',
    ...options,
  });
};

/**
 * Creates a new topic, a new post, or a private message
 */
export const createTopicPostPm = <ThrowOnError extends boolean = false>(
  options?: Options<CreateTopicPostPmData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateTopicPostPmResponse,
    unknown,
    ThrowOnError
  >({
    url: '/posts.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * delete a single post
 */
export const deletePost = <ThrowOnError extends boolean = false>(
  options: Options<DeletePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/posts/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a single post
 * This endpoint can be used to get the number of likes on a post using the
 * `actions_summary` property in the response. `actions_summary` responses
 * with the id of `2` signify a `like`. If there are no `actions_summary`
 * items with the id of `2`, that means there are 0 likes. Other ids likely
 * refer to various different flag types.
 *
 */
export const getPost = <ThrowOnError extends boolean = false>(
  options: Options<GetPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPostResponse,
    unknown,
    ThrowOnError
  >({
    url: '/posts/{id}.json',
    ...options,
  });
};

/**
 * Update a single post
 */
export const updatePost = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePostResponse,
    unknown,
    ThrowOnError
  >({
    url: '/posts/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List replies to a post
 */
export const postReplies = <ThrowOnError extends boolean = false>(
  options: Options<PostRepliesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    PostRepliesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/posts/{id}/replies.json',
    ...options,
  });
};

/**
 * Lock a post from being edited
 */
export const lockPost = <ThrowOnError extends boolean = false>(
  options: Options<LockPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    LockPostResponse,
    unknown,
    ThrowOnError
  >({
    url: '/posts/{id}/locked.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Like a post and other actions
 */
export const performPostAction = <ThrowOnError extends boolean = false>(
  options: Options<PerformPostActionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PerformPostActionResponse,
    unknown,
    ThrowOnError
  >({
    url: '/post_actions.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a list of private messages for a user
 */
export const listUserPrivateMessages = <ThrowOnError extends boolean = false>(
  options: Options<ListUserPrivateMessagesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserPrivateMessagesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/topics/private-messages/{username}.json',
    ...options,
  });
};

/**
 * Get a list of private messages sent for a user
 */
export const getUserSentPrivateMessages = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserSentPrivateMessagesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserSentPrivateMessagesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/topics/private-messages-sent/{username}.json',
    ...options,
  });
};

/**
 * Search for a term
 */
export const search = <ThrowOnError extends boolean = false>(
  options?: Options<SearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SearchResponse,
    unknown,
    ThrowOnError
  >({
    url: '/search.json',
    ...options,
  });
};

/**
 * Get site info
 * Can be used to fetch all categories and subcategories
 */
export const getSite = <ThrowOnError extends boolean = false>(
  options?: Options<GetSiteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSiteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/site.json',
    ...options,
  });
};

/**
 * Get site basic info
 * Can be used to fetch basic info about a site
 */
export const getSiteBasicInfo = <ThrowOnError extends boolean = false>(
  options?: Options<GetSiteBasicInfoData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSiteBasicInfoResponse,
    unknown,
    ThrowOnError
  >({
    url: '/site/basic-info.json',
    ...options,
  });
};

/**
 * Get a list of tag groups
 */
export const listTagGroups = <ThrowOnError extends boolean = false>(
  options?: Options<ListTagGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListTagGroupsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/tag_groups.json',
    ...options,
  });
};

/**
 * Creates a tag group
 */
export const createTagGroup = <ThrowOnError extends boolean = false>(
  options?: Options<CreateTagGroupData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateTagGroupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/tag_groups.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a single tag group
 */
export const getTagGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetTagGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTagGroupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/tag_groups/{id}.json',
    ...options,
  });
};

/**
 * Update tag group
 */
export const updateTagGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTagGroupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTagGroupResponse,
    unknown,
    ThrowOnError
  >({
    url: '/tag_groups/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a list of tags
 */
export const listTags = <ThrowOnError extends boolean = false>(
  options?: Options<ListTagsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListTagsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/tags.json',
    ...options,
  });
};

/**
 * Get a specific tag
 */
export const getTag = <ThrowOnError extends boolean = false>(
  options: Options<GetTagData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTagResponse,
    unknown,
    ThrowOnError
  >({
    url: '/tag/{name}.json',
    ...options,
  });
};

/**
 * Get specific posts from a topic
 */
export const getSpecificPostsFromTopic = <ThrowOnError extends boolean = false>(
  options: Options<GetSpecificPostsFromTopicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSpecificPostsFromTopicResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}/posts.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Remove a topic
 */
export const removeTopic = <ThrowOnError extends boolean = false>(
  options: Options<RemoveTopicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}.json',
    ...options,
  });
};

/**
 * Get a single topic
 */
export const getTopic = <ThrowOnError extends boolean = false>(
  options: Options<GetTopicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTopicResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}.json',
    ...options,
  });
};

/**
 * Update a topic
 */
export const updateTopic = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTopicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTopicResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/-/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Invite to topic
 */
export const inviteToTopic = <ThrowOnError extends boolean = false>(
  options: Options<InviteToTopicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    InviteToTopicResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}/invite.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Invite group to topic
 */
export const inviteGroupToTopic = <ThrowOnError extends boolean = false>(
  options: Options<InviteGroupToTopicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    InviteGroupToTopicResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}/invite-group.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Bookmark topic
 */
export const bookmarkTopic = <ThrowOnError extends boolean = false>(
  options: Options<BookmarkTopicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    url: '/t/{id}/bookmark.json',
    ...options,
  });
};

/**
 * Update the status of a topic
 */
export const updateTopicStatus = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTopicStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTopicStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}/status.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get the latest topics
 */
export const listLatestTopics = <ThrowOnError extends boolean = false>(
  options: Options<ListLatestTopicsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListLatestTopicsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/latest.json',
    ...options,
  });
};

/**
 * Get the top topics filtered by period
 */
export const listTopTopics = <ThrowOnError extends boolean = false>(
  options: Options<ListTopTopicsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListTopTopicsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/top.json',
    ...options,
  });
};

/**
 * Set notification level
 */
export const setNotificationLevel = <ThrowOnError extends boolean = false>(
  options: Options<SetNotificationLevelData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SetNotificationLevelResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}/notifications.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update topic timestamp
 */
export const updateTopicTimestamp = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTopicTimestampData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTopicTimestampResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}/change-timestamp.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create topic timer
 */
export const createTopicTimer = <ThrowOnError extends boolean = false>(
  options: Options<CreateTopicTimerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTopicTimerResponse,
    unknown,
    ThrowOnError
  >({
    url: '/t/{id}/timer.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get topic by external_id
 */
export const getTopicByExternalId = <ThrowOnError extends boolean = false>(
  options: Options<GetTopicByExternalIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/t/external_id/{external_id}.json',
    ...options,
  });
};

/**
 * Creates an upload
 */
export const createUpload = <ThrowOnError extends boolean = false>(
  options?: Options<CreateUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateUploadResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: '/uploads.json',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

/**
 * Initiates a direct external upload
 * Direct external uploads bypass the usual method of creating uploads
 * via the POST /uploads route, and upload directly to an external provider,
 * which by default is S3. This route begins the process, and will return
 * a unique identifier for the external upload as well as a presigned URL
 * which is where the file binary blob should be uploaded to.
 *
 * Once the upload is complete to the external service, you must call the
 * POST /complete-external-upload route using the unique identifier returned
 * by this route, which will create any required Upload record in the Discourse
 * database and also move file from its temporary location to the final
 * destination in the external storage service.
 *
 * You must have the correct permissions and CORS settings configured in your
 * external provider. We support AWS S3 as the default. See:
 *
 * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
 *
 * An external file store must be set up and `enable_direct_s3_uploads` must
 * be set to true for this endpoint to function.
 *
 *
 */
export const generatePresignedPut = <ThrowOnError extends boolean = false>(
  options?: Options<GeneratePresignedPutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    GeneratePresignedPutResponse,
    unknown,
    ThrowOnError
  >({
    url: '/uploads/generate-presigned-put.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Completes a direct external upload
 * Completes an external upload initialized with /get-presigned-put. The
 * file will be moved from its temporary location in external storage to
 * a final destination in the S3 bucket. An Upload record will also be
 * created in the database in most cases.
 *
 * If a sha1-checksum was provided in the initial request it will also
 * be compared with the uploaded file in storage to make sure the same
 * file was uploaded. The file size will be compared for the same reason.
 *
 * You must have the correct permissions and CORS settings configured in your
 * external provider. We support AWS S3 as the default. See:
 *
 * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
 *
 * An external file store must be set up and `enable_direct_s3_uploads` must
 * be set to true for this endpoint to function.
 *
 *
 */
export const completeExternalUpload = <ThrowOnError extends boolean = false>(
  options?: Options<CompleteExternalUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CompleteExternalUploadResponse,
    unknown,
    ThrowOnError
  >({
    url: '/uploads/complete-external-upload.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Creates a multipart external upload
 * Creates a multipart upload in the external storage provider, storing
 * a temporary reference to the external upload similar to /get-presigned-put.
 *
 * You must have the correct permissions and CORS settings configured in your
 * external provider. We support AWS S3 as the default. See:
 *
 * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
 *
 * An external file store must be set up and `enable_direct_s3_uploads` must
 * be set to true for this endpoint to function.
 *
 *
 */
export const createMultipartUpload = <ThrowOnError extends boolean = false>(
  options?: Options<CreateMultipartUploadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateMultipartUploadResponse,
    unknown,
    ThrowOnError
  >({
    url: '/uploads/create-multipart.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Generates batches of presigned URLs for multipart parts
 * Multipart uploads are uploaded in chunks or parts to individual presigned
 * URLs, similar to the one generated by /generate-presigned-put. The part
 * numbers provided must be between 1 and 10000. The total number of parts
 * will depend on the chunk size in bytes that you intend to use to upload
 * each chunk. For example a 12MB file may have 2 5MB chunks and a final
 * 2MB chunk, for part numbers 1, 2, and 3.
 *
 * This endpoint will return a presigned URL for each part number provided,
 * which you can then use to send PUT requests for the binary chunk corresponding
 * to that part. When the part is uploaded, the provider should return an
 * ETag for the part, and this should be stored along with the part number,
 * because this is needed to complete the multipart upload.
 *
 * You must have the correct permissions and CORS settings configured in your
 * external provider. We support AWS S3 as the default. See:
 *
 * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
 *
 * An external file store must be set up and `enable_direct_s3_uploads` must
 * be set to true for this endpoint to function.
 *
 *
 */
export const batchPresignMultipartParts = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<BatchPresignMultipartPartsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    BatchPresignMultipartPartsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/uploads/batch-presign-multipart-parts.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Abort multipart upload
 * This endpoint aborts the multipart upload initiated with /create-multipart.
 * This should be used when cancelling the upload. It does not matter if parts
 * were already uploaded into the external storage provider.
 *
 * You must have the correct permissions and CORS settings configured in your
 * external provider. We support AWS S3 as the default. See:
 *
 * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
 *
 * An external file store must be set up and `enable_direct_s3_uploads` must
 * be set to true for this endpoint to function.
 *
 *
 */
export const abortMultipart = <ThrowOnError extends boolean = false>(
  options?: Options<AbortMultipartData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AbortMultipartResponse,
    unknown,
    ThrowOnError
  >({
    url: '/uploads/abort-multipart.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Complete multipart upload
 * Completes the multipart upload in the external store, and copies the
 * file from its temporary location to its final location in the store.
 * All of the parts must have been uploaded to the external storage provider.
 * An Upload record will be completed in most cases once the file is copied
 * to its final location.
 *
 * You must have the correct permissions and CORS settings configured in your
 * external provider. We support AWS S3 as the default. See:
 *
 * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
 *
 * An external file store must be set up and `enable_direct_s3_uploads` must
 * be set to true for this endpoint to function.
 *
 *
 */
export const completeMultipart = <ThrowOnError extends boolean = false>(
  options?: Options<CompleteMultipartData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CompleteMultipartResponse,
    unknown,
    ThrowOnError
  >({
    url: '/uploads/complete-multipart.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List badges for a user
 */
export const listUserBadges = <ThrowOnError extends boolean = false>(
  options: Options<ListUserBadgesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserBadgesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/user-badges/{username}.json',
    ...options,
  });
};

/**
 * Creates a user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/users.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a single user by username
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/u/{username}.json',
    ...options,
  });
};

/**
 * Update a user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/u/{username}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a user by external_id
 */
export const getUserExternalId = <ThrowOnError extends boolean = false>(
  options: Options<GetUserExternalIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserExternalIdResponse,
    unknown,
    ThrowOnError
  >({
    url: '/u/by-external/{external_id}.json',
    ...options,
  });
};

/**
 * Get a user by identity provider external ID
 */
export const getUserIdentiyProviderExternalId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserIdentiyProviderExternalIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserIdentiyProviderExternalIdResponse,
    unknown,
    ThrowOnError
  >({
    url: '/u/by-external/{provider}/{external_id}.json',
    ...options,
  });
};

/**
 * Update avatar
 */
export const updateAvatar = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAvatarData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAvatarResponse,
    unknown,
    ThrowOnError
  >({
    url: '/u/{username}/preferences/avatar/pick.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update email
 */
export const updateEmail = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    url: '/u/{username}/preferences/email.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update username
 */
export const updateUsername = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUsernameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    url: '/u/{username}/preferences/username.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a public list of users
 */
export const listUsersPublic = <ThrowOnError extends boolean = false>(
  options: Options<ListUsersPublicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListUsersPublicResponse,
    unknown,
    ThrowOnError
  >({
    url: '/directory_items.json',
    ...options,
  });
};

/**
 * Delete a user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a user by id
 */
export const adminGetUser = <ThrowOnError extends boolean = false>(
  options: Options<AdminGetUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    AdminGetUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}.json',
    ...options,
  });
};

/**
 * Activate a user
 */
export const activateUser = <ThrowOnError extends boolean = false>(
  options: Options<ActivateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ActivateUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}/activate.json',
    ...options,
  });
};

/**
 * Deactivate a user
 */
export const deactivateUser = <ThrowOnError extends boolean = false>(
  options: Options<DeactivateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    DeactivateUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}/deactivate.json',
    ...options,
  });
};

/**
 * Suspend a user
 */
export const suspendUser = <ThrowOnError extends boolean = false>(
  options: Options<SuspendUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SuspendUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}/suspend.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Silence a user
 */
export const silenceUser = <ThrowOnError extends boolean = false>(
  options: Options<SilenceUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SilenceUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}/silence.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Anonymize a user
 */
export const anonymizeUser = <ThrowOnError extends boolean = false>(
  options: Options<AnonymizeUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    AnonymizeUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}/anonymize.json',
    ...options,
  });
};

/**
 * Log a user out
 */
export const logOutUser = <ThrowOnError extends boolean = false>(
  options: Options<LogOutUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LogOutUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/{id}/log_out.json',
    ...options,
  });
};

/**
 * Refresh gravatar
 */
export const refreshGravatar = <ThrowOnError extends boolean = false>(
  options: Options<RefreshGravatarData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RefreshGravatarResponse,
    unknown,
    ThrowOnError
  >({
    url: '/user_avatar/{username}/refresh_gravatar.json',
    ...options,
  });
};

/**
 * Get a list of users
 */
export const adminListUsers = <ThrowOnError extends boolean = false>(
  options: Options<AdminListUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    AdminListUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/admin/users/list/{flag}.json',
    ...options,
  });
};

/**
 * Get a list of user actions
 */
export const listUserActions = <ThrowOnError extends boolean = false>(
  options: Options<ListUserActionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserActionsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/user_actions.json',
    ...options,
  });
};

/**
 * Send password reset email
 */
export const sendPasswordResetEmail = <ThrowOnError extends boolean = false>(
  options?: Options<SendPasswordResetEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    SendPasswordResetEmailResponse,
    unknown,
    ThrowOnError
  >({
    url: '/session/forgot_password.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Change password
 */
export const changePassword = <ThrowOnError extends boolean = false>(
  options: Options<ChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    url: '/users/password-reset/{token}.json',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get email addresses belonging to a user
 */
export const getUserEmails = <ThrowOnError extends boolean = false>(
  options: Options<GetUserEmailsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserEmailsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/u/{username}/emails.json',
    ...options,
  });
};

/**
 * Send a message to a chat channel
 */
export const sendMessage = <ThrowOnError extends boolean = false>(
  options: Options<SendMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SendMessageResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: '/chat/{channel_id}',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Edit an existing message
 */
export const editMessage = <ThrowOnError extends boolean = false>(
  options: Options<EditMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    EditMessageResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: '/chat/api/channels/{channel_id}/messages/{message_id}',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Fetch chat messages
 */
export const getMessages = <ThrowOnError extends boolean = false>(
  options: Options<GetMessagesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMessagesResponse,
    unknown,
    ThrowOnError
  >({
    responseTransformer: getMessagesResponseTransformer,
    url: '/chat/api/channels/{channel_id}/messages',
    ...options,
  });
};

/**
 * React to a message
 */
export const reactToMessage = <ThrowOnError extends boolean = false>(
  options: Options<ReactToMessageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ReactToMessageResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: '/chat/{channel_id}/react/{message_id}',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Fetch a user card
 */
export const getUserCard = <ThrowOnError extends boolean = false>(
  options: Options<GetUserCardData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserCardResponse,
    unknown,
    ThrowOnError
  >({
    url: '/u/{username}/card.json',
    ...options,
  });
};

/**
 * Get current session info
 */
export const getSession = <ThrowOnError extends boolean = false>(
  options?: Options<GetSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetSessionResponse,
    unknown,
    ThrowOnError
  >({
    url: '/session/current.json',
    ...options,
  });
};
